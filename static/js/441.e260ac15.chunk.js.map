{"version":3,"file":"static/js/441.e260ac15.chunk.js","mappings":"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","sources":["services/mocker/msw/controllers/reminder.ts","services/mocker/msw/controllers/reminderGroup.ts","services/mocker/msw/db.ts","services/mocker/msw/handlers.ts","services/mocker/msw/server.ts","services/mocker/msw/buildScenarios.ts","services/mocker/utils.ts","types/Reminders.ts"],"sourcesContent":["import { HttpResponse, http } from \"msw\";\n\nimport {\n  TCreateReminderRequestPayload,\n  TCreateReminderResponsePayload,\n  TDeleteReminderRequestPathParams,\n  TDeleteReminderResponsePayload,\n  TReminder,\n  THTTPError,\n  TUpdateReminderRequestPayload,\n  TUpdateReminderResponsePayload,\n} from \"types\";\n\nimport { getUrlSearchParams, urlPrefix } from \"utils\";\n\nimport { TSetupController } from \"./types\";\n\nexport const setupRemindersController: TSetupController = ({ db }) => {\n  const getReminders = http.get(urlPrefix(\"/reminders\"), ({ request }) => {\n    const reminders = db.reminder.getAll();\n\n    const searchParams = getUrlSearchParams(request.url);\n\n    let data: TReminder[] = reminders;\n\n    if (searchParams[\"groupId\"]) {\n      data = data.filter((reminder) => reminder?.group?.id === searchParams[\"groupId\"]);\n    }\n\n    if (searchParams[\"state\"]) {\n      data = data.filter((reminder) => reminder.state === searchParams[\"state\"]);\n    }\n\n    return HttpResponse.json({ data }, { status: 200 });\n  });\n\n  const createReminder = http.post<never, TCreateReminderRequestPayload, TCreateReminderResponsePayload | THTTPError>(\n    urlPrefix(\"/reminders\"),\n    async ({ request }) => {\n      const { title, groupId } = await request.json();\n\n      const group = db.reminderGroup.getAll().find((group) => group.id === groupId);\n\n      if (groupId && !group) {\n        return HttpResponse.json({ message: `Reminder Group with id ${groupId} not found!` }, { status: 404 });\n      }\n\n      const newReminder = db.reminder.create({ title, group });\n\n      return HttpResponse.json({ data: newReminder }, { status: 201 });\n    }\n  );\n\n  const deleteReminder = http.delete<{ id: TDeleteReminderRequestPathParams }, never, TDeleteReminderResponsePayload>(\n    urlPrefix(\"/reminders/:id\"),\n    ({ params }) => {\n      const reminder = db.reminder.findFirst({\n        where: {\n          id: {\n            equals: params.id,\n          },\n        },\n      });\n\n      if (!reminder) {\n        return HttpResponse.json({ message: `Reminder with id ${params.id} not found!` }, { status: 404 });\n      }\n\n      db.reminder.delete({\n        where: {\n          id: {\n            equals: params.id,\n          },\n        },\n      });\n\n      return HttpResponse.json({ message: `Reminder with id ${params.id} deleted!` }, { status: 200 });\n    }\n  );\n\n  const updateReminder = http.patch<\n    { id: TUpdateReminderRequestPayload[\"id\"] },\n    TUpdateReminderRequestPayload,\n    TUpdateReminderResponsePayload | THTTPError\n  >(urlPrefix(\"/reminders/:id\"), async ({ request, params }) => {\n    const { groupId, ...requestBody } = await request.json();\n\n    const reminder = db.reminder.findFirst({\n      where: {\n        id: {\n          equals: params.id,\n        },\n      },\n    });\n\n    if (!reminder) {\n      return HttpResponse.json({ message: `Reminder with id ${params.id} not found!` }, { status: 404 });\n    }\n\n    const group = db.reminderGroup.findFirst({\n      where: {\n        id: {\n          equals: groupId,\n        },\n      },\n    });\n\n    if (groupId && !group) {\n      return HttpResponse.json({ message: `Reminder Group with id ${groupId} not found!` }, { status: 404 });\n    }\n\n    const updatedReminder = db.reminder.update({\n      where: {\n        id: {\n          equals: params.id,\n        },\n      },\n      data: {\n        ...(requestBody as any),\n      },\n    }) as TReminder;\n\n    return HttpResponse.json({ data: updatedReminder }, { status: 200 });\n  });\n\n  return [getReminders, createReminder, deleteReminder, updateReminder];\n};\n","import { HttpResponse, http } from \"msw\";\n\nimport {\n  TCreateReminderGroupRequestPayload,\n  TCreateReminderGroupResponsePayload,\n  TDeleteReminderGroupRequestPathParams,\n  TDeleteReminderGroupResponsePayload,\n  TUpdateReminderGroupRequestPayload,\n  TUpdateReminderGroupResponsePayload,\n  TGetReminderGroupRequestPathParams,\n  TGetReminderGroupResponsePayload,\n  TReminderGroup,\n  THTTPError,\n} from \"types\";\n\nimport { urlPrefix } from \"utils\";\n\nimport { TSetupController } from \"./types\";\n\nexport const setupReminderGroupsController: TSetupController = ({ db }) => {\n  const getReminderGroups = http.get(urlPrefix(\"/reminder-groups\"), () => {\n    return HttpResponse.json({ data: db.reminderGroup.getAll() }, { status: 200 });\n  });\n\n  const getReminderGroup = http.get<\n    { id: TGetReminderGroupRequestPathParams },\n    never,\n    TGetReminderGroupResponsePayload | THTTPError\n  >(urlPrefix(\"/reminder-groups/:id\"), ({ params }) => {\n    const reminderGroup = db.reminderGroup.findFirst({\n      where: {\n        id: {\n          equals: params.id,\n        },\n      },\n    });\n\n    if (!reminderGroup) {\n      return HttpResponse.json({ message: `Reminder Group with id ${params.id} not found!` }, { status: 404 });\n    }\n\n    return HttpResponse.json({ data: reminderGroup }, { status: 200 });\n  });\n\n  const createReminderGroup = http.post<\n    never,\n    TCreateReminderGroupRequestPayload,\n    TCreateReminderGroupResponsePayload | THTTPError\n  >(urlPrefix(\"/reminder-groups\"), async ({ request }) => {\n    const requestBody = await request.json();\n\n    const reminderGroup = db.reminderGroup.create({\n      ...requestBody,\n    });\n\n    return HttpResponse.json({ data: reminderGroup }, { status: 201 });\n  });\n\n  const deleteReminderGroup = http.delete<\n    { id: TDeleteReminderGroupRequestPathParams },\n    never,\n    TDeleteReminderGroupResponsePayload | THTTPError\n  >(urlPrefix(\"/reminder-groups/:id\"), ({ params }) => {\n    const reminderGroup = db.reminderGroup.findFirst({\n      where: {\n        id: {\n          equals: params.id,\n        },\n      },\n    });\n\n    if (!reminderGroup) {\n      return HttpResponse.json({ message: `Reminder Group with id ${params.id} not found!` }, { status: 404 });\n    }\n\n    db.reminderGroup.delete({\n      where: {\n        id: {\n          equals: params.id,\n        },\n      },\n    });\n\n    return HttpResponse.json({ message: `Reminder Group with id ${params.id} deleted!` }, { status: 200 });\n  });\n\n  const updateReminderGroup = http.patch<\n    { id: TUpdateReminderGroupRequestPayload[\"id\"] },\n    TUpdateReminderGroupRequestPayload,\n    TUpdateReminderGroupResponsePayload | THTTPError\n  >(urlPrefix(\"/reminder-groups/:id\"), async ({ request, params }) => {\n    const requestBody = await request.json();\n\n    const reminderGroup = db.reminderGroup.findFirst({\n      where: {\n        id: {\n          equals: params.id,\n        },\n      },\n    });\n\n    if (!reminderGroup) {\n      return HttpResponse.json({ message: `Reminder Group with id ${params.id} not found!` }, { status: 404 });\n    }\n\n    const updatedReminder = db.reminderGroup.update({\n      where: {\n        id: {\n          equals: params.id,\n        },\n      },\n      data: {\n        ...requestBody,\n      },\n    }) as TReminderGroup;\n\n    return HttpResponse.json({ data: updatedReminder }, { status: 200 });\n  });\n\n  return [getReminderGroups, getReminderGroup, createReminderGroup, deleteReminderGroup, updateReminderGroup];\n};\n","import { factory, nullable, oneOf, primaryKey, drop } from \"@mswjs/data\";\nimport { NullableProperty } from \"@mswjs/data/lib/nullable\";\n\nimport { uuid } from \"utils\";\nimport { REMINDER_STATE } from \"types\";\n\nexport const db = factory({\n  reminder: {\n    id: primaryKey(uuid),\n    title: () => {\n      return `Reminder ${uuid({ simple: true })}`;\n    },\n\n    isPinned: () => false,\n    state: () => REMINDER_STATE.INACTIVE,\n    group: nullable(oneOf(\"reminderGroup\")),\n    createdAt: () => new Date().toISOString(),\n    updatedAt: () => new Date().toISOString(),\n    focusSessions: () => [],\n    // FIX: nullable(Object) returning {} instead of null\n    currentFocusSession: nullable<any>(\n      {\n        startTime: () => String,\n        endTime: () => String,\n      },\n      { defaultsToNull: true }\n    ) as unknown as NullableProperty<any>,\n    dueDate: nullable<string>(() => null),\n    repeatInterval: nullable<number>(() => null),\n    repeatTimes: nullable<number>(() => null),\n  },\n\n  reminderGroup: {\n    id: primaryKey(uuid),\n    name: () => `Reminder Group ${uuid({ simple: true })}`,\n    createdAt: () => new Date().toISOString(),\n    updatedAt: () => new Date().toISOString(),\n  },\n});\n\nexport type TDb = typeof db;\n\nexport const dropDb = (db: TDb) => {\n  drop(db);\n};\n","import { setupReminderGroupsController, setupRemindersController, TSetupController } from \"./controllers\";\n\nimport { db } from \"./db\";\n\nexport const setupHandlers = (config: Parameters<TSetupController>[0]) => [\n  ...setupReminderGroupsController(config),\n  ...setupRemindersController(config),\n];\n\nexport const handlers = setupHandlers({ db });\n","import { setupWorker } from \"msw/browser\";\n\nimport { buildScenarios } from \"./buildScenarios\";\n\nimport { handlers } from \"./handlers\";\n\nimport { db } from \"./db\";\n\nconst PUBLIC_URL = process.env.REACT_APP_PUBLIC_URL;\n\nexport const startMswWorker = async () => {\n  const worker = setupWorker(...handlers);\n\n  return await worker.start({\n    onUnhandledRequest: \"bypass\",\n    serviceWorker: {\n      url: `${PUBLIC_URL}mockServiceWorker.js`,\n    },\n  });\n};\n\nexport const runServer = async (config?: { withDefaultScenario?: boolean }) => {\n  if (config?.withDefaultScenario) {\n    buildScenarios(db)\n      .withReminders(5)\n      .withReminderGroups({ reminderGroups: [\"Work\", \"Home\", \"Personal\"], remindersPerGroup: 2 })\n      .withFocusSessions();\n  }\n\n  return await startMswWorker();\n};\n","import { generateRandomFocusSessions } from \"../utils\";\n\nimport { TScenariosBuilder } from \"../types\";\n\nimport { TDb } from \"./db\";\n\nexport const buildScenarios = (db: TDb) => {\n  const builder: TScenariosBuilder = {\n    withReminders: (n = 10) => {\n      for (let i = 0; i < n; i++) {\n        db.reminder.create();\n      }\n\n      return builder;\n    },\n    withReminderGroups: ({ reminderGroups = [\"Work\", \"Home\", \"Personal\"], remindersPerGroup = 10 }) => {\n      reminderGroups.forEach((groupName) => {\n        const group = db.reminderGroup.create({ name: groupName });\n\n        for (let i = 0; i < remindersPerGroup; i++) {\n          db.reminder.create({ group });\n        }\n      });\n\n      return builder;\n    },\n\n    withFocusSessions: () => {\n      db.reminder.getAll().forEach((reminder) => {\n        const n = Math.floor(Math.random() * (10 - 0 + 1)) + 0;\n\n        const focusSessions = generateRandomFocusSessions(n) as never[];\n\n        db.reminder.update({\n          where: {\n            id: {\n              equals: reminder.id,\n            },\n          },\n          data: {\n            ...reminder,\n            focusSessions,\n          },\n        });\n      });\n\n      return builder;\n    },\n  };\n  return builder;\n};\n","import { subDays, addMinutes } from \"date-fns\";\n\nimport { TReminder } from \"types\";\n\nimport { generateUniqueRandomNumbers } from \"utils\";\n\nexport function generateRandomFocusSessions(\n  numberOfEntries: number,\n  maxDaysInPast: number = 30\n): TReminder[\"focusSessions\"] {\n  const now = new Date();\n  const history: TReminder[\"focusSessions\"] = [];\n\n  const randomPastDays = generateUniqueRandomNumbers(numberOfEntries, 1, maxDaysInPast);\n\n  for (let i = 0; i < numberOfEntries; i++) {\n    // Generate a random start date within the last maxDaysInPast days\n    const startDate = subDays(now, randomPastDays[i]);\n\n    // Add a random number of minutes (0 to 120) to get the end time\n    const randomMinutes = Math.floor(Math.random() * 121);\n    const endDate = addMinutes(startDate, randomMinutes);\n\n    // Ensure the end time is not in the future\n    const adjustedEndDate = endDate > now ? now : endDate;\n\n    const entry: TReminder[\"focusSessions\"][number] = {\n      startTime: startDate.toISOString(),\n      endTime: adjustedEndDate.toISOString(),\n    };\n\n    history.push(entry);\n  }\n\n  // Sort the history by start time, most recent last\n  return history.sort((a, b) => new Date(a.startTime).getTime() - new Date(b.startTime).getTime());\n}\n","export const REMINDER_STATE = {\n  INACTIVE: \"INACTIVE\",\n  INPROGRESS: \"INPROGRESS\",\n  COMPLETED: \"COMPLETED\",\n  ARCHIVED: \"ARCHIVED\",\n} as const;\n\nexport type TReminderState = (typeof REMINDER_STATE)[keyof typeof REMINDER_STATE];\n\nexport type TReminderFocusSession = {\n  startTime: string;\n  endTime: string;\n};\n\nexport type TReminder = {\n  id: string;\n  title: string;\n  /**\n   * Current state of the reminder.\n   *\n   * @example \"IN_ACTIVE\" | \"IN_PROGRESS\" | \"COMPLETED\"\n   */\n  state: TReminderState;\n  /**\n   * Indicates if the reminder is pinned on top.\n   */\n  isPinned: boolean;\n  /**\n   * Date and time the reminder was created. (ISO 8601 format)\n   */\n  createdAt: string;\n  /**\n   * Date and time the reminder was last updated. (ISO 8601 format)\n   */\n  updatedAt: string;\n  /**\n   * Optional reminder group this reminder belongs to.\n   */\n  group: TReminderGroup | null;\n  /**\n   * Due date and time for the reminder. (ISO 8601 format)\n   *\n   * @example \"2021-09-30T00:00:00.000Z\"\n   */\n  dueDate: string | null;\n  /**\n   * Number of times to repeat the reminder.\n   *\n   * @default 1\n   */\n  repeatTimes: number | null;\n  /**\n   * Interval to repeat the reminder. (in milliseconds)\n   *\n   * @default 300000 (5 minutes)\n   */\n  repeatInterval: number | null;\n\n  /**\n   * Current focus session for this reminder.\n   */\n  currentFocusSession: {\n    /**\n     * date and time when focus session was started for this reminder. (ISO 8601 format)\n     */\n    startTime: string;\n    /**\n     * date and time the focus session stopped for this reminder. (ISO 8601 format)\n     */\n    endTime: string;\n  } | null;\n  /**\n   * Array to store history of multiple focus sessions for this reminder.\n   * Each session includes start time and end time.\n   */\n  focusSessions: TReminderFocusSession[];\n};\n\nexport type TReminderGroup = {\n  id: string;\n  name: string;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type TMessageResponsePayload = {\n  message: string;\n};\n\nexport type TDataResponsePayload<T> = {\n  data: T;\n};\n\n/**\n * Error\n */\nexport type THTTPError = {\n  message: string;\n};\n\n/**\n * Reminder\n */\nexport type TGetRemindersRequestQueryParams = Partial<{\n  groupId: TReminderGroup[\"id\"];\n  state: TReminder[\"state\"];\n}>;\n\nexport type TGetRemindersResponsePayload = TDataResponsePayload<TReminder[]>;\n\nexport type TGetReminderRequestPathParams = TReminder[\"id\"];\n\nexport type TGetReminderResponsePayload = TDataResponsePayload<TReminder>;\n\nexport type TCreateReminderRequestPayload = Pick<TReminder, \"title\"> & Partial<{ groupId: TReminderGroup[\"id\"] }>;\n\nexport type TCreateReminderResponsePayload = TDataResponsePayload<TReminder>;\n\nexport type TUpdateReminderRequestPayload = Pick<TReminder, \"id\"> &\n  Partial<\n    Pick<\n      TReminder,\n      | \"title\"\n      | \"state\"\n      | \"isPinned\"\n      | \"dueDate\"\n      | \"currentFocusSession\"\n      | \"focusSessions\"\n      | \"repeatTimes\"\n      | \"repeatInterval\"\n    > & {\n      groupId: TReminderGroup[\"id\"];\n    }\n  >;\n\nexport type TUpdateReminderResponsePayload = TDataResponsePayload<TReminder>;\n\nexport type TDeleteReminderRequestPathParams = TReminder[\"id\"];\n\nexport type TDeleteReminderResponsePayload = TMessageResponsePayload;\n\n/**\n * Reminder Group\n */\nexport type TGetReminderGroupsResponsePayload = TDataResponsePayload<TReminderGroup[]>;\n\nexport type TGetReminderGroupRequestPathParams = TReminderGroup[\"id\"];\n\nexport type TGetReminderGroupResponsePayload = TDataResponsePayload<TReminderGroup>;\n\nexport type TCreateReminderGroupRequestPayload = Pick<TReminderGroup, \"name\">;\n\nexport type TCreateReminderGroupResponsePayload = TDataResponsePayload<TReminderGroup>;\n\nexport type TUpdateReminderGroupRequestPayload = Pick<TReminderGroup, \"id\"> & Partial<Pick<TReminderGroup, \"name\">>;\n\nexport type TUpdateReminderGroupResponsePayload = TDataResponsePayload<TReminderGroup>;\n\nexport type TDeleteReminderGroupRequestPathParams = TReminderGroup[\"id\"];\n\nexport type TDeleteReminderGroupResponsePayload = TMessageResponsePayload;\n"],"names":["setupRemindersController","_ref","db","http","get","urlPrefix","_ref2","request","reminders","reminder","getAll","searchParams","getUrlSearchParams","url","data","filter","_reminder$group","group","id","state","HttpResponse","json","status","post","async","_ref3","title","groupId","reminderGroup","find","message","concat","newReminder","create","delete","_ref4","params","findFirst","where","equals","patch","_ref5","requestBody","updatedReminder","update","setupReminderGroupsController","factory","primaryKey","uuid","simple","isPinned","REMINDER_STATE","INACTIVE","nullable","oneOf","createdAt","Date","toISOString","updatedAt","focusSessions","currentFocusSession","startTime","String","endTime","defaultsToNull","dueDate","repeatInterval","repeatTimes","name","handlers","config","runServer","withDefaultScenario","builder","withReminders","n","arguments","length","undefined","i","withReminderGroups","reminderGroups","remindersPerGroup","forEach","groupName","withFocusSessions","Math","floor","random","generateRandomFocusSessions","buildScenarios","worker","setupWorker","start","onUnhandledRequest","serviceWorker","process","startMswWorker","numberOfEntries","maxDaysInPast","now","history","randomPastDays","generateUniqueRandomNumbers","startDate","subDays","randomMinutes","endDate","addMinutes","adjustedEndDate","entry","push","sort","a","b","getTime","INPROGRESS","COMPLETED","ARCHIVED"],"sourceRoot":""}