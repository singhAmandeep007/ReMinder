{"version":3,"file":"static/js/836.085292f5.chunk.js","mappings":"+JAEA,MAAMA,EAGJC,WAAAA,GAAe,KAFfC,SAAG,EAGDC,KAAKD,IAAM,IAAIE,GACjB,CAGAC,KAAAA,GACE,IAAIC,GAAKC,EAAAA,EAAAA,MACT,KAAOJ,KAAKD,IAAIM,IAAIF,IAClBA,GAAKC,EAAAA,EAAAA,MAKP,OAFAJ,KAAKD,IAAIO,IAAIH,GAENA,CACT,CAGAI,GAAAA,CAAIJ,GACF,GAAIH,KAAKD,IAAIM,IAAIF,GACf,MAAM,IAAIK,MAAM,MAADC,OAAON,EAAE,4BAG1BH,KAAKD,IAAIO,IAAIH,EACf,CAGAO,KAAAA,GACEV,KAAKD,IAAIY,OACX,E","sources":["services/mocker/mirage/identityManager.ts"],"sourcesContent":["import { uuid } from \"shared\";\n\nclass IdentityManager {\n  ids: Set<string>;\n\n  constructor() {\n    this.ids = new Set<string>();\n  }\n\n  // Returns a new unused unique identifier.\n  fetch() {\n    let id = uuid();\n    while (this.ids.has(id)) {\n      id = uuid();\n    }\n\n    this.ids.add(id);\n\n    return id;\n  }\n\n  // Registers an identifier as used. Must throw if identifier is already used.\n  set(id: string) {\n    if (this.ids.has(id)) {\n      throw new Error(`ID ${id} has already been used.`);\n    }\n\n    this.ids.add(id);\n  }\n\n  // Resets all used identifiers to unused.\n  reset() {\n    this.ids.clear();\n  }\n}\n\nexport { IdentityManager };\n"],"names":["IdentityManager","constructor","ids","this","Set","fetch","id","uuid","has","add","set","Error","concat","reset","clear"],"sourceRoot":""}