{"version":3,"file":"static/js/424.3872ffbe.chunk.js","mappings":"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","sources":["types/Reminders.ts","views/Reminders/components/AddButton.tsx","views/Reminders/components/AddUpdateItem.tsx","views/Reminders/ReminderItem/ReminderItem.tsx","views/Reminders/ReminderItem/useReminderItem.ts","views/Reminders/RemindersList/RemindersList.tsx","views/Reminders/RemindersList/useRemindersList.ts","views/Reminders/ReminderGroupItem/ReminderGroupItem.tsx","views/Reminders/ReminderGroupItem/useReminderGroupItem.ts","views/Reminders/ReminderGroupsList/ReminderGroupsList.tsx","views/Reminders/ReminderGroupsList/useReminderGroupsList.ts","views/Reminders/Reminders.tsx","hooks/useBreakpoint.ts"],"sourcesContent":["export const REMINDER_STATE = {\n  ACTIVE: \"ACTIVE\",\n  COMPLETED: \"COMPLETED\",\n} as const;\n\nexport type TReminderState = (typeof REMINDER_STATE)[keyof typeof REMINDER_STATE];\n\nexport type TReminder = {\n  id: string;\n  title: string;\n  state: TReminderState;\n  isPinned: boolean;\n  createdAt: string;\n  updatedAt: string;\n  group?: TReminderGroup;\n};\n\nexport type TReminderGroup = {\n  id: string;\n  name: string;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type TMessageResponsePaylaod = {\n  message: string;\n};\n\nexport type TDataResponsePayload<T> = {\n  data: T;\n};\n\n/**\n * Error\n */\nexport type THTTPError = {\n  message: string;\n};\n\n/**\n * Reminder\n */\nexport type TGetRemindersQueryParams = Partial<{\n  groupId: TReminderGroup[\"id\"];\n  state: TReminder[\"state\"];\n}>;\n\nexport type TGetRemindersResponsePayload = TDataResponsePayload<TReminder[]>;\n\nexport type TGetReminderRequestPayload = TReminder[\"id\"];\n\nexport type TGetReminderResponsePayload = TDataResponsePayload<TReminder>;\n\nexport type TCreateReminderRequestPayload = Pick<TReminder, \"title\"> & Partial<{ groupId: TReminderGroup[\"id\"] }>;\n\nexport type TCreateReminderResponsePayload = TDataResponsePayload<TReminder>;\n\nexport type TUpdateReminderRequestPayload = Pick<TReminder, \"id\"> &\n  Partial<Pick<TReminder, \"title\" | \"state\" | \"isPinned\"> & { groupId: TReminderGroup[\"id\"] }>;\n\nexport type TUpdateReminderResponsePayload = TDataResponsePayload<TReminder>;\n\nexport type TDeleteReminderRequestPayload = TReminder[\"id\"];\n\nexport type TDeleteReminderResponsePayload = TMessageResponsePaylaod;\n\n/**\n * Reminder Group\n */\nexport type TGetReminderGroupsResponsePayload = TDataResponsePayload<TReminderGroup[]>;\n\nexport type TGetReminderGroupRequestPayload = TReminderGroup[\"id\"];\n\nexport type TGetReminderGroupResponsePayload = TDataResponsePayload<TReminderGroup>;\n\nexport type TCreateReminderGroupRequestPayload = Pick<TReminderGroup, \"name\">;\n\nexport type TCreateReminderGroupResponsePayload = TDataResponsePayload<TReminderGroup>;\n\nexport type TUpdateReminderGroupRequestPayload = Pick<TReminderGroup, \"id\"> & Partial<Pick<TReminderGroup, \"name\">>;\n\nexport type TUpdateReminderGroupResponsePayload = TDataResponsePayload<TReminderGroup>;\n\nexport type TDeleteReminderGroupRequestPayload = TReminderGroup[\"id\"];\n\nexport type TDeleteReminderGroupResponsePayload = TMessageResponsePaylaod;\n","import { FC } from \"react\";\nimport { Plus } from \"lucide-react\";\n\nimport { cn } from \"shared\";\n\nimport { Button, TButtonProps } from \"components\";\n\nexport const AddButton: FC<TButtonProps> = ({ children, className, ...props }) => {\n  return (\n    <Button\n      variant={\"ghost\"}\n      className={cn(\"gap-1 border border-accent-dark hover:bg-accent-dark hover:text-primary\", className)}\n      {...props}\n    >\n      <Plus className=\"icon\" />\n      {children}\n    </Button>\n  );\n};\n","import { FC, PropsWithChildren, useCallback, useRef } from \"react\";\n\nimport { Check, X } from \"lucide-react\";\n\nimport { cn } from \"shared\";\n\nimport { Button, Input } from \"components\";\n\nexport type TAddUpdateItemProps = {\n  className?: string;\n  onSave?: (value: string) => void;\n  onCancel?: () => void;\n  defaultValue?: string;\n  testIds?: {\n    save?: string;\n    cancel?: string;\n  };\n};\n\nexport const AddUpdateItem: FC<PropsWithChildren<TAddUpdateItemProps>> = ({\n  className,\n  onCancel,\n  onSave,\n  defaultValue = \"\",\n  testIds,\n}) => {\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const handleOnSave = useCallback(() => {\n    if (inputRef.current?.value) {\n      onSave?.(inputRef.current.value);\n    }\n  }, [onSave]);\n\n  const handleOnCancel = useCallback(() => {\n    onCancel?.();\n  }, [onCancel]);\n\n  return (\n    <div className={cn(\"mt-2 flex items-center justify-between\", className)}>\n      <Input\n        className=\"ml-1 mr-2\"\n        defaultValue={defaultValue}\n        ref={inputRef}\n        autoFocus\n        required\n      />\n      <div className=\"flex items-center gap-1\">\n        <Button\n          onClick={handleOnSave}\n          size=\"icon\"\n          variant={\"outline\"}\n          data-testid={testIds?.save}\n          className=\"group\"\n        >\n          <Check className=\"icon group-hover:text-primary\" />\n        </Button>\n        <Button\n          onClick={handleOnCancel}\n          size=\"icon\"\n          variant={\"outline\"}\n          data-testid={testIds?.cancel}\n          className=\"group\"\n        >\n          <X className=\"icon group-hover:text-destructive\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n","import { FC, PropsWithChildren, useState } from \"react\";\n\nimport { ChevronDown, ChevronUp, Pencil, Trash, Pin } from \"lucide-react\";\n\nimport { TReminder, REMINDER_STATE } from \"types\";\n\nimport {\n  Button,\n  Checkbox,\n  Typography,\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n} from \"components\";\n\nimport { cn } from \"shared\";\n\nimport { AddUpdateItem } from \"../components\";\n\nimport { useReminderItem } from \"./useReminderItem\";\n\nexport type TReminderItemProps = {\n  reminder: TReminder;\n};\n\nexport const ReminderItem: FC<PropsWithChildren<TReminderItemProps>> = ({ reminder }) => {\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n  const [isUpdating, setIsUpdating] = useState(false);\n\n  const { handleOnDelete, handleOnUpdate, isLoading } = useReminderItem({\n    reminder,\n  });\n\n  const isMenuDisabled = isLoading;\n\n  return (\n    <div\n      className=\"flex items-center justify-between gap-2  py-2\"\n      data-testid={`reminder-item-${reminder.id}`}\n    >\n      {isUpdating ? (\n        <AddUpdateItem\n          className=\"flex-1\"\n          defaultValue={reminder.title}\n          onCancel={() => setIsUpdating(false)}\n          onSave={(title) => {\n            handleOnUpdate({ id: reminder.id, title });\n            setIsUpdating(false);\n          }}\n          testIds={{\n            cancel: `reminder-item-update-cancel-${reminder.id}`,\n            save: `reminder-item-update-save-${reminder.id}`,\n          }}\n        />\n      ) : (\n        <>\n          <Checkbox\n            checked={reminder.state === REMINDER_STATE.COMPLETED}\n            className=\"peer\"\n            onClick={() =>\n              handleOnUpdate({\n                id: reminder.id,\n                state: reminder.state === REMINDER_STATE.COMPLETED ? REMINDER_STATE.ACTIVE : REMINDER_STATE.COMPLETED,\n              })\n            }\n          />\n          <Typography\n            variant={\"p\"}\n            affects={\"withoutPMargin\"}\n            className={cn(\"flex-1 overflow-x-scroll text-nowrap py-2 peer-aria-[checked=true]:line-through\")}\n          >\n            {reminder.title}\n          </Typography>\n        </>\n      )}\n\n      {!isUpdating && (\n        <DropdownMenu\n          open={isDropdownOpen}\n          onOpenChange={setIsDropdownOpen}\n        >\n          <DropdownMenuTrigger asChild>\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              data-testid={`reminder-item-menu-${reminder.id}`}\n              disabled={isMenuDisabled}\n            >\n              {isDropdownOpen ? <ChevronUp className=\"icon\" /> : <ChevronDown className=\"icon\" />}\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent\n            className=\"min-w-min\"\n            align=\"end\"\n            onInteractOutside={() => setIsDropdownOpen(false)}\n          >\n            <DropdownMenuItem\n              data-testid={`reminder-item-pin-${reminder.id}`}\n              onClick={() =>\n                handleOnUpdate({\n                  id: reminder.id,\n                  isPinned: !reminder.isPinned,\n                })\n              }\n              className={cn(\"group\", {\n                \"bg-primary text-secondary\": reminder.isPinned,\n              })}\n            >\n              <Pin\n                size={20}\n                className={cn(\"group-hover:text-primary\")}\n                role=\"button\"\n              />\n            </DropdownMenuItem>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem\n              data-testid={`reminder-item-edit-${reminder.id}`}\n              onClick={() => setIsUpdating(true)}\n              className=\"group\"\n              disabled={reminder.state === REMINDER_STATE.COMPLETED}\n            >\n              <Pencil\n                size={20}\n                className=\"group-hover:text-primary\"\n                role=\"button\"\n              />\n            </DropdownMenuItem>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem\n              data-testid={`reminder-item-delete-${reminder.id}`}\n              onClick={() => handleOnDelete(reminder.id)}\n              className=\"group\"\n            >\n              <Trash\n                size={20}\n                className=\"group-hover:text-destructive\"\n                role=\"button\"\n              />\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      )}\n    </div>\n  );\n};\n","import { useCallback } from \"react\";\n\nimport { useDeleteReminderMutation, handleAsync, useUpdateReminderMutation } from \"shared\";\nimport { TReminder } from \"types\";\n\nexport type TUseReminderItemProps = {\n  reminder: TReminder;\n};\n\nexport const useReminderItem = ({ reminder }: TUseReminderItemProps) => {\n  const [deleteReminder, deleteReminderResult] = useDeleteReminderMutation();\n  const [updateReminder, updateReminderResult] = useUpdateReminderMutation();\n\n  const isLoading = deleteReminderResult.isLoading || updateReminderResult.isLoading;\n\n  const isErrored = deleteReminderResult.isError || updateReminderResult.isError;\n\n  const handleOnDelete = useCallback(\n    async (id: Parameters<typeof deleteReminder>[0]) => {\n      await handleAsync(() => deleteReminder(id));\n    },\n    [deleteReminder]\n  );\n\n  const handleOnUpdate = useCallback(\n    async (props: Parameters<typeof updateReminder>[0]) => {\n      await handleAsync(() =>\n        updateReminder({\n          id: props.id,\n          groupId: props.groupId,\n          title: props.title,\n          state: props.state,\n          isPinned: props.isPinned,\n        })\n      );\n    },\n    [updateReminder]\n  );\n\n  return {\n    isLoading,\n    isErrored,\n\n    handleOnDelete,\n    handleOnUpdate,\n  };\n};\n","import { FC, PropsWithChildren, useState } from \"react\";\n\nimport { RefreshCcw } from \"lucide-react\";\n\nimport { Button, Typography } from \"components\";\n\nimport { ReminderItem } from \"../ReminderItem\";\nimport { AddButton, AddUpdateItem } from \"../components\";\n\nimport { useRemindersList } from \"./useRemindersList\";\n\nexport type TRemindersListProps = Record<string, never>;\n\nexport const RemindersList: FC<PropsWithChildren<TRemindersListProps>> = () => {\n  const { reminders, refetchReminders, reminderGroup, handleOnSave } = useRemindersList();\n\n  const [isCreating, setIsCreating] = useState(false);\n\n  return (\n    <div className=\"flex flex-1 flex-col overflow-hidden p-4\">\n      <div className=\"mb-2 flex items-center justify-between gap-2\">\n        <Typography\n          variant={\"h4\"}\n          className=\"flex items-center justify-between overflow-x-scroll text-nowrap py-2 \"\n          data-testid=\"reminder-list-title\"\n        >\n          {reminderGroup?.name || \"All\"}\n        </Typography>\n        <div className=\"flex gap-2\">\n          <Button\n            size={\"icon\"}\n            variant={\"ghost\"}\n            className=\"hover:text-primary\"\n            data-testid=\"reminder-list-refetch\"\n          >\n            <RefreshCcw\n              className=\"icon\"\n              onClick={refetchReminders}\n            />\n          </Button>\n\n          <AddButton\n            size={\"icon\"}\n            onClick={() => setIsCreating((isCreating) => !isCreating)}\n            disabled={isCreating}\n          />\n        </div>\n      </div>\n\n      {reminders && (\n        <div className=\"flex-1 overflow-scroll\">\n          <ul className=\"divide divide-y\">\n            {reminders\n              ?.slice()\n              .sort((a, b) => {\n                return a.isPinned ? -1 : b.isPinned ? 1 : 0;\n              })\n              .map((reminder) => {\n                return (\n                  <li key={reminder.id}>\n                    <ReminderItem reminder={reminder} />\n                  </li>\n                );\n              })}\n          </ul>\n        </div>\n      )}\n\n      {isCreating && (\n        <AddUpdateItem\n          onCancel={() => setIsCreating(false)}\n          onSave={(title) => {\n            handleOnSave({ title: title, groupId: reminderGroup?.id });\n            setIsCreating(false);\n          }}\n          testIds={{\n            cancel: `reminder-item-create-cancel`,\n            save: `reminder-item-create-save`,\n          }}\n        />\n      )}\n    </div>\n  );\n};\n","import { useCallback } from \"react\";\n\nimport {\n  useGetRemindersQuery,\n  useSelectQueryParams,\n  useGetReminderGroupQuery,\n  useCreateReminderMutation,\n  handleAsync,\n} from \"shared\";\n\nexport const useRemindersList = () => {\n  const queryParams = useSelectQueryParams();\n\n  const { currentData: reminders, refetch } = useGetRemindersQuery(queryParams);\n\n  const { currentData: reminderGroup } = useGetReminderGroupQuery(queryParams.groupId as string, {\n    skip: !queryParams.groupId,\n  });\n\n  const [createReminder, createReminderResult] = useCreateReminderMutation();\n\n  const isLoading = createReminderResult.isLoading;\n\n  const isErrored = createReminderResult.isError;\n\n  const handleOnSave = useCallback(\n    async (props: Parameters<typeof createReminder>[0]) => {\n      await handleAsync(() =>\n        createReminder({\n          groupId: props.groupId,\n          title: props.title,\n        })\n      );\n    },\n    [createReminder]\n  );\n\n  return {\n    reminders,\n    reminderGroup,\n    refetchReminders: refetch,\n    handleOnSave,\n    isLoading,\n    isErrored,\n  };\n};\n","import { FC, PropsWithChildren, useMemo, useState } from \"react\";\n\nimport { ChevronDown, ChevronUp, Pencil, Trash } from \"lucide-react\";\n\nimport { TReminderGroup } from \"types\";\n\nimport {\n  Button,\n  Typography,\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n} from \"components\";\n\nimport { cn } from \"shared\";\n\nimport { AddUpdateItem } from \"../components\";\n\nimport { useReminderGroupItem } from \"./useReminderGroupItem\";\n\nexport type TReminderGroupItemProps = {\n  reminderGroup?: TReminderGroup;\n};\n\nexport const ReminderGroupItem: FC<PropsWithChildren<TReminderGroupItemProps>> = ({ reminderGroup }) => {\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n  const [isUpdating, setIsUpdating] = useState(false);\n\n  const { handleOnDelete, handleOnItemClick, handleOnSave, isLoading, isSelected } = useReminderGroupItem({\n    reminderGroup,\n  });\n\n  const isMenuDisabled = isLoading;\n\n  const renderItem = useMemo(() => {\n    if (reminderGroup && isUpdating) {\n      return (\n        <AddUpdateItem\n          className=\"flex-1\"\n          defaultValue={reminderGroup.name}\n          onCancel={() => setIsUpdating(false)}\n          onSave={(name) => {\n            handleOnSave({ id: reminderGroup.id, name });\n            setIsUpdating(false);\n          }}\n          testIds={{\n            cancel: `reminder-group-item-update-cancel-${reminderGroup.id}`,\n            save: `reminder-group-item-update-save-${reminderGroup.id}`,\n          }}\n        />\n      );\n    }\n\n    return (\n      <Typography\n        variant={\"p\"}\n        className={cn(\"flex-1 cursor-pointer overflow-x-scroll text-nowrap py-2\", isSelected && \"text-primary\")}\n        onClick={() => handleOnItemClick({ groupId: reminderGroup ? reminderGroup.id : undefined })}\n      >\n        {reminderGroup ? reminderGroup.name : \"All\"}\n      </Typography>\n    );\n  }, [isSelected, handleOnItemClick, isUpdating, reminderGroup, handleOnSave]);\n\n  return (\n    <div\n      className={cn(\"flex cursor-pointer items-center justify-between gap-2 px-1 py-2\")}\n      data-testid={`reminder-group-item-${reminderGroup ? reminderGroup.id : \"all\"}`}\n    >\n      {renderItem}\n\n      {reminderGroup && !isUpdating && (\n        <DropdownMenu\n          open={isDropdownOpen}\n          onOpenChange={setIsDropdownOpen}\n        >\n          <DropdownMenuTrigger asChild>\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              data-testid={`reminder-group-item-menu-${reminderGroup.id}`}\n              disabled={isMenuDisabled}\n            >\n              {isDropdownOpen ? <ChevronUp className=\"icon\" /> : <ChevronDown className=\"icon\" />}\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent\n            align=\"end\"\n            onInteractOutside={() => setIsDropdownOpen(false)}\n            className=\"min-w-min\"\n          >\n            <DropdownMenuItem\n              onClick={() => setIsUpdating(true)}\n              data-testid={`reminder-group-item-update-${reminderGroup.id}`}\n              className=\"group\"\n            >\n              <Pencil\n                size={20}\n                className=\"group-hover:text-primary\"\n                role=\"button\"\n              />\n            </DropdownMenuItem>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem\n              onClick={() => handleOnDelete(reminderGroup.id)}\n              data-testid={`reminder-group-item-delete-${reminderGroup.id}`}\n              className=\"group\"\n            >\n              <Trash\n                size={20}\n                className=\"group-hover:text-destructive\"\n                role=\"button\"\n              />\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      )}\n    </div>\n  );\n};\n","import { useCallback } from \"react\";\n\nimport {\n  useAppDispatch,\n  setQueryParams,\n  useAppSelector,\n  selectQueryParams,\n  useDeleteReminderGroupMutation,\n  handleAsync,\n  useUpdateReminderGroupMutation,\n} from \"shared\";\nimport { TReminderGroup } from \"types\";\n\nexport type TUseReminderGroupItemProps = {\n  reminderGroup?: TReminderGroup;\n};\n\nexport const useReminderGroupItem = ({ reminderGroup }: TUseReminderGroupItemProps) => {\n  const { groupId } = useAppSelector(selectQueryParams);\n  const isSelected = groupId === reminderGroup?.id;\n\n  const [deleteReminderGroup, deleteReminderGroupResult] = useDeleteReminderGroupMutation();\n  const [updateReminderGroup, updateReminderGroupResult] = useUpdateReminderGroupMutation();\n\n  const dispatch = useAppDispatch();\n\n  const isLoading = deleteReminderGroupResult.isLoading || updateReminderGroupResult.isLoading;\n\n  const isErrored = deleteReminderGroupResult.isError || updateReminderGroupResult.isError;\n\n  const handleOnItemClick = useCallback(\n    (queryParams: Parameters<typeof setQueryParams>[0]) => {\n      // update the query params value in store, causing a re-fetch of the reminders\n      dispatch(setQueryParams(queryParams));\n    },\n    [dispatch]\n  );\n\n  const handleOnDelete = useCallback(\n    async (id: Parameters<typeof deleteReminderGroup>[0]) => {\n      await handleAsync(() => deleteReminderGroup(id));\n    },\n    [deleteReminderGroup]\n  );\n\n  const handleOnSave = useCallback(\n    async (props: Parameters<typeof updateReminderGroup>[0]) => {\n      await handleAsync(() =>\n        updateReminderGroup({\n          id: props.id,\n          name: props.name,\n        })\n      );\n    },\n    [updateReminderGroup]\n  );\n\n  return {\n    isSelected,\n    isLoading,\n    isErrored,\n    handleOnItemClick,\n    handleOnDelete,\n\n    handleOnSave,\n  };\n};\n","import { FC, PropsWithChildren, useState } from \"react\";\n\nimport { ReminderGroupItem } from \"../ReminderGroupItem\";\nimport { AddButton, AddUpdateItem } from \"../components\";\n\nimport { useReminderGroupsList } from \"./useReminderGroupsList\";\n\nexport type TReminderGroupsListProps = Record<string, never>;\n\nexport const ReminderGroupsList: FC<PropsWithChildren<TReminderGroupsListProps>> = () => {\n  const [isCreating, setIsCreating] = useState(false);\n\n  const { handleOnSave, reminderGroups } = useReminderGroupsList();\n\n  return (\n    <div className=\"flex min-w-[200px] flex-1 flex-col overflow-hidden p-4\">\n      <div className=\"mb-2 mt-1 flex justify-center\">\n        <AddButton\n          size={\"full\"}\n          onClick={() => setIsCreating((isCreating) => !isCreating)}\n          disabled={isCreating}\n        >\n          Add List\n        </AddButton>\n      </div>\n\n      <div className=\"flex-1 overflow-scroll\">\n        <ul className=\"divide divide-y divide-accent-dark\">\n          <li key=\"all\">\n            <ReminderGroupItem />\n          </li>\n          {reminderGroups &&\n            reminderGroups.map((reminderGroup) => {\n              return (\n                <li key={reminderGroup.id}>\n                  <ReminderGroupItem reminderGroup={reminderGroup} />\n                </li>\n              );\n            })}\n        </ul>\n      </div>\n\n      {isCreating && (\n        <AddUpdateItem\n          onCancel={() => setIsCreating(false)}\n          onSave={(name) => {\n            handleOnSave({ name: name });\n            setIsCreating(false);\n          }}\n          testIds={{\n            cancel: `reminder-group-item-create-cancel`,\n            save: `reminder-group-item-create-save`,\n          }}\n        />\n      )}\n    </div>\n  );\n};\n","import { useCallback } from \"react\";\n\nimport { useGetReminderGroupsQuery, useCreateReminderGroupMutation, handleAsync } from \"shared\";\n\nexport const useReminderGroupsList = () => {\n  const { data: reminderGroups } = useGetReminderGroupsQuery();\n\n  const [createReminderGroup, createReminderGroupResult] = useCreateReminderGroupMutation();\n\n  const isLoading = createReminderGroupResult.isLoading;\n\n  const isErrored = createReminderGroupResult.isError;\n\n  const handleOnSave = useCallback(\n    async (props: Parameters<typeof createReminderGroup>[0]) => {\n      await handleAsync(() =>\n        createReminderGroup({\n          name: props.name,\n        })\n      );\n    },\n    [createReminderGroup]\n  );\n\n  return {\n    reminderGroups,\n    handleOnSave,\n    isLoading,\n    isErrored,\n  };\n};\n","import { FC, PropsWithChildren } from \"react\";\n\nimport { Panel, PanelGroup, PanelResizeHandle } from \"react-resizable-panels\";\nimport { EllipsisVertical, EllipsisIcon } from \"lucide-react\";\n\nimport { useBreakpoint } from \"hooks\";\nimport { cn } from \"shared\";\nimport { Typography } from \"components\";\n\nimport { RemindersList } from \"./RemindersList\";\n\nimport { ReminderGroupsList } from \"./ReminderGroupsList\";\n\nexport type TRemindersProps = Record<string, never>;\n\nexport const Reminders: FC<PropsWithChildren<TRemindersProps>> = () => {\n  const { isBelowMd } = useBreakpoint(\"md\");\n\n  return (\n    <div className=\"mx-auto h-full max-w-screen-md p-2 md:p-8\">\n      <div className=\"flex h-full flex-col rounded border-2 border-primary shadow-lg lg:h-3/4\">\n        <nav className=\"flex h-[--navbar-height] border-b-2 border-primary\">\n          <ul className=\"flex flex-1 items-center justify-between px-4\">\n            <li>\n              <Typography\n                variant={\"h2\"}\n                className=\"pb-0\"\n              >\n                Reminders\n              </Typography>\n            </li>\n          </ul>\n        </nav>\n\n        <PanelGroup\n          direction={isBelowMd ? \"vertical\" : \"horizontal\"}\n          className=\"flex-1\"\n          autoSaveId={\"reminders-panel-group\"}\n        >\n          <Panel\n            maxSize={50}\n            className=\"flex flex-col\"\n          >\n            <ReminderGroupsList />\n          </Panel>\n\n          <PanelResizeHandle className=\"group\">\n            <div\n              className={cn(\n                \"flex h-full w-full items-center border-primary group-hover:bg-secondary group-hover:text-primary\",\n                isBelowMd ? \"border-b-2\" : \"border-r-2\"\n              )}\n            >\n              {isBelowMd ? <EllipsisIcon className=\"icon mx-auto\" /> : <EllipsisVertical className=\"icon mx-auto\" />}\n            </div>\n          </PanelResizeHandle>\n\n          <Panel className=\"flex flex-col\">\n            <RemindersList />\n          </Panel>\n        </PanelGroup>\n      </div>\n    </div>\n  );\n};\n","import { useMediaQuery } from \"react-responsive\";\n\nimport { BREAKPOINTS } from \"shared\";\n\ntype TKeyAbove<K extends string> = `isAbove${Capitalize<K>}`;\ntype TKeyBelow<K extends string> = `isBelow${Capitalize<K>}`;\n\nexport function useBreakpoint<K extends string>(breakpointKey: K) {\n  const breakpointValue = BREAKPOINTS[breakpointKey as keyof typeof BREAKPOINTS];\n  const isBelow = useMediaQuery({\n    query: `(max-width: ${breakpointValue})`,\n  });\n  const capitalizedKey = breakpointKey[0].toUpperCase() + breakpointKey.substring(1);\n\n  return {\n    [breakpointKey]: Number(String(breakpointValue).replace(/[^0-9]/g, \"\")),\n    [`isAbove${capitalizedKey}`]: !isBelow,\n    [`isBelow${capitalizedKey}`]: isBelow,\n  } as Record<K, number> & Record<TKeyAbove<K> | TKeyBelow<K>, boolean>;\n}\n"],"names":["REMINDER_STATE","ACTIVE","COMPLETED","AddButton","_ref","children","className","props","_jsxs","Button","variant","cn","_jsx","Plus","AddUpdateItem","onCancel","onSave","defaultValue","testIds","inputRef","useRef","handleOnSave","useCallback","_inputRef$current","current","value","handleOnCancel","Input","ref","autoFocus","required","onClick","size","save","Check","cancel","X","ReminderItem","reminder","isDropdownOpen","setIsDropdownOpen","useState","isUpdating","setIsUpdating","handleOnDelete","handleOnUpdate","isLoading","deleteReminder","deleteReminderResult","useDeleteReminderMutation","updateReminder","updateReminderResult","useUpdateReminderMutation","isErrored","isError","async","handleAsync","id","groupId","title","state","isPinned","useReminderItem","isMenuDisabled","concat","_Fragment","Checkbox","checked","Typography","affects","DropdownMenu","open","onOpenChange","DropdownMenuTrigger","asChild","disabled","ChevronUp","ChevronDown","DropdownMenuContent","align","onInteractOutside","DropdownMenuItem","Pin","role","DropdownMenuSeparator","Pencil","Trash","RemindersList","reminders","refetchReminders","reminderGroup","useRemindersList","queryParams","useSelectQueryParams","currentData","refetch","useGetRemindersQuery","useGetReminderGroupQuery","skip","createReminder","createReminderResult","useCreateReminderMutation","isCreating","setIsCreating","name","RefreshCcw","slice","sort","a","b","map","ReminderGroupItem","handleOnItemClick","isSelected","useAppSelector","selectQueryParams","deleteReminderGroup","deleteReminderGroupResult","useDeleteReminderGroupMutation","updateReminderGroup","updateReminderGroupResult","useUpdateReminderGroupMutation","dispatch","useAppDispatch","setQueryParams","useReminderGroupItem","renderItem","useMemo","undefined","ReminderGroupsList","reminderGroups","useReminderGroupsList","data","useGetReminderGroupsQuery","createReminderGroup","createReminderGroupResult","useCreateReminderGroupMutation","Reminders","isBelowMd","breakpointKey","breakpointValue","BREAKPOINTS","isBelow","useMediaQuery","query","capitalizedKey","toUpperCase","substring","Number","String","replace","useBreakpoint","PanelGroup","direction","autoSaveId","Panel","maxSize","PanelResizeHandle","EllipsisIcon","EllipsisVertical"],"sourceRoot":""}