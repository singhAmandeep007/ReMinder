{"version":3,"file":"static/js/424.43747e78.chunk.js","mappings":"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","sources":["types/Reminders.ts","views/Reminders/components/AddButton.tsx","views/Reminders/components/AddUpdateItem.tsx","views/Reminders/ReminderItem/ReminderItem.tsx","views/Reminders/ReminderItem/useReminderItem.ts","views/Reminders/RemindersList/useRemindersList.ts","views/Reminders/RemindersList/RemindersList.tsx","views/Reminders/ReminderGroupItem/ReminderGroupItem.tsx","views/Reminders/ReminderGroupItem/useReminderGroupItem.ts","views/Reminders/ReminderGroupsList/ReminderGroupsList.tsx","views/Reminders/ReminderGroupsList/useReminderGroupsList.ts","views/Reminders/Reminders.tsx","hooks/useBreakpoint.ts"],"sourcesContent":["export const REMINDER_STATE = {\n  INACTIVE: \"INACTIVE\",\n  INPROGRESS: \"INPROGRESS\",\n  COMPLETED: \"COMPLETED\",\n  ARCHIVED: \"ARCHIVED\",\n} as const;\n\nexport type TReminderState = (typeof REMINDER_STATE)[keyof typeof REMINDER_STATE];\n\nexport type TReminder = {\n  id: string;\n  title: string;\n  /**\n   * Current state of the reminder.\n   *\n   * @example \"IN_ACTIVE\" | \"IN_PROGRESS\" | \"COMPLETED\"\n   */\n  state: TReminderState;\n  /**\n   * Indicates if the reminder is pinned on top.\n   */\n  isPinned: boolean;\n  /**\n   * Date and time the reminder was created. (ISO 8601 format)\n   */\n  createdAt: string;\n  /**\n   * Date and time the reminder was last updated. (ISO 8601 format)\n   */\n  updatedAt: string;\n  /**\n   * Optional reminder group this reminder belongs to.\n   */\n  group: TReminderGroup | null;\n  /**\n   * Optional due date and time for the reminder. (ISO 8601 format)\n   *\n   * @example \"2021-09-30T00:00:00.000Z\"\n   */\n  dueDate: string | null;\n};\n\nexport type TReminderGroup = {\n  id: string;\n  name: string;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type TMessageResponsePaylaod = {\n  message: string;\n};\n\nexport type TDataResponsePayload<T> = {\n  data: T;\n};\n\n/**\n * Error\n */\nexport type THTTPError = {\n  message: string;\n};\n\n/**\n * Reminder\n */\nexport type TGetRemindersQueryParams = Partial<{\n  groupId: TReminderGroup[\"id\"];\n  state: TReminder[\"state\"];\n}>;\n\nexport type TGetRemindersResponsePayload = TDataResponsePayload<TReminder[]>;\n\nexport type TGetReminderRequestPayload = TReminder[\"id\"];\n\nexport type TGetReminderResponsePayload = TDataResponsePayload<TReminder>;\n\nexport type TCreateReminderRequestPayload = Pick<TReminder, \"title\"> & Partial<{ groupId: TReminderGroup[\"id\"] }>;\n\nexport type TCreateReminderResponsePayload = TDataResponsePayload<TReminder>;\n\nexport type TUpdateReminderRequestPayload = Pick<TReminder, \"id\"> &\n  Partial<Pick<TReminder, \"title\" | \"state\" | \"isPinned\" | \"dueDate\"> & { groupId: TReminderGroup[\"id\"] }>;\n\nexport type TUpdateReminderResponsePayload = TDataResponsePayload<TReminder>;\n\nexport type TDeleteReminderRequestPayload = TReminder[\"id\"];\n\nexport type TDeleteReminderResponsePayload = TMessageResponsePaylaod;\n\n/**\n * Reminder Group\n */\nexport type TGetReminderGroupsResponsePayload = TDataResponsePayload<TReminderGroup[]>;\n\nexport type TGetReminderGroupRequestPayload = TReminderGroup[\"id\"];\n\nexport type TGetReminderGroupResponsePayload = TDataResponsePayload<TReminderGroup>;\n\nexport type TCreateReminderGroupRequestPayload = Pick<TReminderGroup, \"name\">;\n\nexport type TCreateReminderGroupResponsePayload = TDataResponsePayload<TReminderGroup>;\n\nexport type TUpdateReminderGroupRequestPayload = Pick<TReminderGroup, \"id\"> & Partial<Pick<TReminderGroup, \"name\">>;\n\nexport type TUpdateReminderGroupResponsePayload = TDataResponsePayload<TReminderGroup>;\n\nexport type TDeleteReminderGroupRequestPayload = TReminderGroup[\"id\"];\n\nexport type TDeleteReminderGroupResponsePayload = TMessageResponsePaylaod;\n","import { FC } from \"react\";\nimport { Plus } from \"lucide-react\";\n\nimport { cn } from \"shared\";\n\nimport { Button, TButtonProps } from \"components\";\n\nexport const AddButton: FC<TButtonProps> = ({ children, className, ...props }) => {\n  return (\n    <Button\n      variant={\"ghost\"}\n      className={cn(\"gap-1 border border-accent-dark hover:bg-accent-dark hover:text-primary\", className)}\n      {...props}\n    >\n      <Plus className=\"icon\" />\n      {children}\n    </Button>\n  );\n};\n","import { FC, PropsWithChildren, useCallback, useRef } from \"react\";\n\nimport { Check, X } from \"lucide-react\";\n\nimport { cn } from \"shared\";\n\nimport { Button, Input } from \"components\";\n\nexport type TAddUpdateItemProps = {\n  className?: string;\n  onSave?: (value: string) => void;\n  onCancel?: () => void;\n  defaultValue?: string;\n  testIds?: {\n    save?: string;\n    cancel?: string;\n    text?: string;\n  };\n};\n\nexport const AddUpdateItem: FC<PropsWithChildren<TAddUpdateItemProps>> = ({\n  className,\n  onCancel,\n  onSave,\n  defaultValue = \"\",\n  testIds,\n}) => {\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const handleOnSave = useCallback(() => {\n    if (inputRef.current?.value) {\n      onSave?.(inputRef.current.value);\n    }\n  }, [onSave]);\n\n  const handleOnCancel = useCallback(() => {\n    onCancel?.();\n  }, [onCancel]);\n\n  return (\n    <div className={cn(\"mt-2 flex items-center justify-between\", className)}>\n      <Input\n        className=\"ml-1 mr-2\"\n        defaultValue={defaultValue}\n        ref={inputRef}\n        autoFocus\n        required\n        data-testid={testIds?.text}\n      />\n      <div className=\"flex items-center gap-1\">\n        <Button\n          onClick={handleOnSave}\n          size=\"icon\"\n          variant={\"outline\"}\n          data-testid={testIds?.save}\n          className=\"group\"\n        >\n          <Check className=\"icon group-hover:text-primary\" />\n        </Button>\n        <Button\n          onClick={handleOnCancel}\n          size=\"icon\"\n          variant={\"outline\"}\n          data-testid={testIds?.cancel}\n          className=\"group\"\n        >\n          <X className=\"icon group-hover:text-destructive\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n","import { FC, PropsWithChildren, useState } from \"react\";\n\nimport { ChevronDown, ChevronUp, Pencil, Trash, Pin, CalendarClock } from \"lucide-react\";\nimport { format } from \"date-fns\";\n\nimport { TReminder, REMINDER_STATE } from \"types\";\n\nimport {\n  Button,\n  Checkbox,\n  Typography,\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DateTimePicker,\n  Dialog,\n  DialogTrigger,\n  DialogContent,\n  DialogTitle,\n  DialogDescription,\n  DialogHeader,\n  DialogClose,\n  Badge,\n} from \"components\";\n\nimport { cn } from \"shared\";\n\nimport { AddUpdateItem } from \"../components\";\n\nimport { useReminderItem } from \"./useReminderItem\";\n\nexport type TReminderItemProps = {\n  reminder: TReminder;\n  listName?: string;\n};\n\nexport const ReminderItem: FC<PropsWithChildren<TReminderItemProps>> = ({ reminder, listName }) => {\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n  const [isUpdating, setIsUpdating] = useState(false);\n\n  const { handleOnDelete, handleOnUpdate, isLoading } = useReminderItem({\n    reminder,\n  });\n\n  const isMenuDisabled = isLoading;\n\n  const isCompleted = reminder.state === REMINDER_STATE.COMPLETED;\n\n  const isOverdue = reminder.dueDate && new Date(reminder.dueDate) < new Date();\n\n  return (\n    <div\n      className=\"flex flex-col py-2\"\n      data-testid={`reminder-item-${reminder.title}`}\n    >\n      {isUpdating && (\n        <AddUpdateItem\n          className=\"flex-1\"\n          defaultValue={reminder.title}\n          onCancel={() => setIsUpdating(false)}\n          onSave={(title) => {\n            handleOnUpdate({ id: reminder.id, title });\n            setIsUpdating(false);\n          }}\n          testIds={{\n            cancel: `reminder-update-cancel`,\n            save: `reminder-update-save`,\n            text: `reminder-update-text`,\n          }}\n        />\n      )}\n\n      {!isUpdating && (\n        <>\n          <div className=\"flex items-center justify-between gap-2\">\n            <Checkbox\n              checked={isCompleted}\n              className=\"peer\"\n              onClick={() =>\n                handleOnUpdate({\n                  id: reminder.id,\n                  state: isCompleted ? REMINDER_STATE.INACTIVE : REMINDER_STATE.COMPLETED,\n                })\n              }\n              data-testid={`reminder-item-checkbox`}\n            />\n            <Typography\n              variant={\"p\"}\n              affects={\"withoutPMargin\"}\n              className={cn(\n                \"flex-1 overflow-x-scroll text-nowrap py-2 peer-aria-[checked=true]:text-muted-foreground peer-aria-[checked=true]:line-through\"\n              )}\n            >\n              {reminder.title}\n            </Typography>\n            <Dialog>\n              <DropdownMenu\n                open={isDropdownOpen}\n                onOpenChange={setIsDropdownOpen}\n                // NOTE: https://github.com/radix-ui/primitives/issues/1241#issuecomment-1580887090\n                modal={false}\n              >\n                <DropdownMenuTrigger asChild>\n                  <Button\n                    variant=\"outline\"\n                    size=\"icon\"\n                    data-testid={`reminder-item-menu-btn`}\n                    disabled={isMenuDisabled}\n                  >\n                    {isDropdownOpen ? <ChevronUp className=\"icon\" /> : <ChevronDown className=\"icon\" />}\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent\n                  className=\"min-w-min\"\n                  align=\"end\"\n                  onInteractOutside={() => setIsDropdownOpen(false)}\n                  data-testid={`reminder-item-menu`}\n                >\n                  <DropdownMenuItem\n                    data-testid={`reminder-item-menuitem-pin`}\n                    onClick={() =>\n                      handleOnUpdate({\n                        id: reminder.id,\n                        isPinned: !reminder.isPinned,\n                      })\n                    }\n                    className={cn(\"group\", {\n                      \"bg-primary text-secondary\": reminder.isPinned,\n                    })}\n                    disabled={isCompleted}\n                  >\n                    <Pin\n                      size={20}\n                      className={cn(\"group-hover:text-primary\")}\n                      role=\"button\"\n                    />\n                  </DropdownMenuItem>\n                  <DropdownMenuSeparator />\n\n                  <DialogTrigger asChild>\n                    <DropdownMenuItem\n                      className=\"group\"\n                      disabled={isCompleted}\n                      data-testid={`reminder-item-menuitem-due-date`}\n                    >\n                      <CalendarClock\n                        size={20}\n                        className=\"group-hover:text-primary\"\n                        role=\"button\"\n                      />\n                    </DropdownMenuItem>\n                  </DialogTrigger>\n\n                  <DropdownMenuSeparator />\n\n                  <DropdownMenuItem\n                    data-testid={`reminder-item-menuitem-edit`}\n                    onClick={() => setIsUpdating(true)}\n                    className=\"group\"\n                    disabled={isCompleted}\n                  >\n                    <Pencil\n                      size={20}\n                      className=\"group-hover:text-primary\"\n                      role=\"button\"\n                    />\n                  </DropdownMenuItem>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem\n                    data-testid={`reminder-item-menuitem-delete`}\n                    onClick={() => handleOnDelete(reminder.id)}\n                    className=\"group\"\n                  >\n                    <Trash\n                      size={20}\n                      className=\"group-hover:text-destructive\"\n                      role=\"button\"\n                    />\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n\n              <DialogContent\n                className=\"w-max\"\n                data-testid=\"reminder-item-due-date-dialog\"\n              >\n                <DialogHeader>\n                  <DialogTitle className=\"text-left\">Schedule your reminder</DialogTitle>\n                  <DialogDescription className=\"text-left\">Select reminder's due date and time</DialogDescription>\n                </DialogHeader>\n\n                <DateTimePicker\n                  isLoading={isLoading}\n                  date={reminder.dueDate ? new Date(reminder.dueDate) : undefined}\n                >\n                  {({ selectedDateTime }) => {\n                    return (\n                      <DialogClose asChild>\n                        <Button\n                          size=\"full\"\n                          onClick={() => {\n                            if (selectedDateTime) {\n                              const dueDate = selectedDateTime.toISOString();\n                              handleOnUpdate({ id: reminder.id, dueDate });\n                            }\n                          }}\n                          className={cn(isLoading && \"cursor-not-allowed\")}\n                          disabled={!selectedDateTime || isLoading}\n                          data-testid={`reminder-item-save-due-date-btn`}\n                        >\n                          Save\n                        </Button>\n                      </DialogClose>\n                    );\n                  }}\n                </DateTimePicker>\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          {!isCompleted && (\n            <div className=\"ml-6 mr-10 flex flex-wrap gap-2\">\n              {!listName && reminder.group?.name && <Badge variant=\"default\">{reminder.group.name}</Badge>}\n              {reminder?.dueDate && (\n                <Badge variant={isOverdue ? \"destructive\" : \"default\"}>\n                  Due: {format(new Date(reminder.dueDate), \"PPp\")}\n                </Badge>\n              )}\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n","import { useCallback } from \"react\";\n\nimport { useDeleteReminderMutation, handleAsync, useUpdateReminderMutation } from \"shared\";\nimport { TReminder } from \"types\";\n\nexport type TUseReminderItemProps = {\n  reminder: TReminder;\n};\n\nexport const useReminderItem = ({ reminder }: TUseReminderItemProps) => {\n  const [deleteReminder, deleteReminderResult] = useDeleteReminderMutation();\n  const [updateReminder, updateReminderResult] = useUpdateReminderMutation();\n\n  const isLoading = deleteReminderResult.isLoading || updateReminderResult.isLoading;\n\n  const isErrored = deleteReminderResult.isError || updateReminderResult.isError;\n\n  const handleOnDelete = useCallback(\n    async (id: Parameters<typeof deleteReminder>[0]) => {\n      await handleAsync(() => deleteReminder(id));\n    },\n    [deleteReminder]\n  );\n\n  const handleOnUpdate = useCallback(\n    async (props: Parameters<typeof updateReminder>[0]) => {\n      await handleAsync(() =>\n        updateReminder({\n          id: props.id,\n          groupId: props.groupId,\n          title: props.title,\n          state: props.state,\n          isPinned: props.isPinned,\n          dueDate: props.dueDate,\n        })\n      );\n    },\n    [updateReminder]\n  );\n\n  return {\n    isLoading,\n    isErrored,\n\n    handleOnDelete,\n    handleOnUpdate,\n  };\n};\n","import { useCallback } from \"react\";\n\nimport { toast } from \"sonner\";\n\nimport {\n  useGetRemindersQuery,\n  useSelectQueryParams,\n  useGetReminderGroupQuery,\n  useCreateReminderMutation,\n  handleAsync,\n} from \"shared\";\n\nexport const useRemindersList = () => {\n  const queryParams = useSelectQueryParams();\n\n  const getRemindersResult = useGetRemindersQuery(queryParams);\n\n  const getReminderGroupResult = useGetReminderGroupQuery(queryParams.groupId as string, {\n    skip: !queryParams.groupId,\n  });\n\n  const [createReminder, createReminderResult] = useCreateReminderMutation();\n\n  const handleOnSave = useCallback(\n    async (props: Parameters<typeof createReminder>[0]) => {\n      await handleAsync(() =>\n        createReminder({\n          groupId: props.groupId,\n          title: props.title,\n        })\n      );\n    },\n    [createReminder]\n  );\n\n  if (getReminderGroupResult.isError) {\n    toast.error(\"Error fetching reminder group\");\n  }\n\n  if (getRemindersResult.isError) {\n    toast.error(\"Error fetching reminders\");\n  }\n\n  if (createReminderResult.isError) {\n    toast.error(\"Error creating reminder\");\n  }\n\n  return {\n    reminders: getRemindersResult.currentData,\n    reminderGroup: getReminderGroupResult.currentData,\n    refetchReminders: getRemindersResult.refetch,\n    handleOnSave,\n  };\n};\n","import { FC, PropsWithChildren, useState } from \"react\";\n\nimport { RefreshCcw } from \"lucide-react\";\n\nimport { Button, Typography } from \"components\";\n\nimport { ReminderItem } from \"../ReminderItem\";\nimport { AddButton, AddUpdateItem } from \"../components\";\n\nimport { useRemindersList } from \"./useRemindersList\";\n\nexport type TRemindersListProps = Record<string, never>;\n\nexport const RemindersList: FC<PropsWithChildren<TRemindersListProps>> = () => {\n  const { reminders, refetchReminders, reminderGroup, handleOnSave } = useRemindersList();\n\n  const [isCreating, setIsCreating] = useState(false);\n\n  return (\n    <div className=\"flex flex-1 flex-col overflow-hidden p-4\">\n      <div className=\"mb-2 flex items-center justify-between gap-2\">\n        <Typography\n          variant={\"h4\"}\n          className=\"flex items-center justify-between overflow-x-scroll text-nowrap py-2 \"\n          data-testid=\"reminder-list-title\"\n        >\n          {reminderGroup?.name || \"All\"}\n        </Typography>\n        <div className=\"flex gap-2\">\n          <Button\n            size={\"icon\"}\n            variant={\"ghost\"}\n            className=\"hover:text-primary\"\n            data-testid=\"reminder-refetch-btn\"\n          >\n            <RefreshCcw\n              className=\"icon\"\n              onClick={refetchReminders}\n            />\n          </Button>\n\n          <AddButton\n            size={\"icon\"}\n            onClick={() => setIsCreating((isCreating) => !isCreating)}\n            disabled={isCreating}\n            data-testid=\"reminder-create-btn\"\n          />\n        </div>\n      </div>\n\n      {reminders && (\n        <div className=\"flex-1 overflow-scroll\">\n          <ul className=\"divide divide-y\">\n            {reminders\n              ?.slice()\n              .sort((a, b) => {\n                return a.isPinned ? -1 : b.isPinned ? 1 : 0;\n              })\n              .map((reminder) => {\n                return (\n                  <li key={reminder.id}>\n                    <ReminderItem\n                      reminder={reminder}\n                      listName={reminderGroup?.name}\n                    />\n                  </li>\n                );\n              })}\n          </ul>\n        </div>\n      )}\n\n      {isCreating && (\n        <AddUpdateItem\n          onCancel={() => setIsCreating(false)}\n          onSave={(title) => {\n            handleOnSave({ title: title, groupId: reminderGroup?.id });\n            setIsCreating(false);\n          }}\n          testIds={{\n            cancel: `reminder-item-create-cancel`,\n            save: `reminder-item-create-save`,\n            text: `reminder-item-create-text`,\n          }}\n        />\n      )}\n    </div>\n  );\n};\n","import { FC, PropsWithChildren, useMemo, useState } from \"react\";\n\nimport { ChevronDown, ChevronUp, Pencil, Trash } from \"lucide-react\";\n\nimport { TReminderGroup } from \"types\";\n\nimport {\n  Button,\n  Typography,\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n} from \"components\";\n\nimport { cn } from \"shared\";\n\nimport { AddUpdateItem } from \"../components\";\n\nimport { useReminderGroupItem } from \"./useReminderGroupItem\";\n\nexport type TReminderGroupItemProps = {\n  reminderGroup?: TReminderGroup;\n};\n\nexport const ReminderGroupItem: FC<PropsWithChildren<TReminderGroupItemProps>> = ({ reminderGroup }) => {\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n  const [isUpdating, setIsUpdating] = useState(false);\n\n  const { handleOnDelete, handleOnItemClick, handleOnSave, isLoading, isSelected } = useReminderGroupItem({\n    reminderGroup,\n  });\n\n  const isMenuDisabled = isLoading;\n\n  const renderItem = useMemo(() => {\n    if (reminderGroup && isUpdating) {\n      return (\n        <AddUpdateItem\n          className=\"flex-1\"\n          defaultValue={reminderGroup.name}\n          onCancel={() => setIsUpdating(false)}\n          onSave={(name) => {\n            handleOnSave({ id: reminderGroup.id, name });\n            setIsUpdating(false);\n          }}\n          testIds={{\n            cancel: `reminder-group-item-update-cancel-${reminderGroup.id}`,\n            save: `reminder-group-item-update-save-${reminderGroup.id}`,\n          }}\n        />\n      );\n    }\n\n    return (\n      <Typography\n        variant={\"p\"}\n        className={cn(\"flex-1 cursor-pointer overflow-x-scroll text-nowrap py-2\", isSelected && \"text-primary\")}\n        onClick={() => handleOnItemClick({ groupId: reminderGroup ? reminderGroup.id : undefined })}\n      >\n        {reminderGroup ? reminderGroup.name : \"All\"}\n      </Typography>\n    );\n  }, [isSelected, handleOnItemClick, isUpdating, reminderGroup, handleOnSave]);\n\n  return (\n    <div\n      className={cn(\"flex cursor-pointer items-center justify-between gap-2 px-1 py-2\")}\n      data-testid={`reminder-group-item-${reminderGroup ? reminderGroup.name : \"all\"}`}\n    >\n      {renderItem}\n\n      {reminderGroup && !isUpdating && (\n        <DropdownMenu\n          open={isDropdownOpen}\n          onOpenChange={setIsDropdownOpen}\n        >\n          <DropdownMenuTrigger asChild>\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              data-testid={`reminder-group-item-menu-btn`}\n              disabled={isMenuDisabled}\n            >\n              {isDropdownOpen ? <ChevronUp className=\"icon\" /> : <ChevronDown className=\"icon\" />}\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent\n            align=\"end\"\n            onInteractOutside={() => setIsDropdownOpen(false)}\n            className=\"min-w-min\"\n            data-testid={`reminder-group-item-menu`}\n          >\n            <DropdownMenuItem\n              onClick={() => setIsUpdating(true)}\n              data-testid={`reminder-group-item-update-${reminderGroup.name}`}\n              className=\"group\"\n            >\n              <Pencil\n                size={20}\n                className=\"group-hover:text-primary\"\n                role=\"button\"\n              />\n            </DropdownMenuItem>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem\n              onClick={() => handleOnDelete(reminderGroup.id)}\n              data-testid={`reminder-group-item-delete-${reminderGroup.name}`}\n              className=\"group\"\n            >\n              <Trash\n                size={20}\n                className=\"group-hover:text-destructive\"\n                role=\"button\"\n              />\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      )}\n    </div>\n  );\n};\n","import { useCallback } from \"react\";\n\nimport {\n  useAppDispatch,\n  setQueryParams,\n  useAppSelector,\n  selectQueryParams,\n  useDeleteReminderGroupMutation,\n  handleAsync,\n  useUpdateReminderGroupMutation,\n} from \"shared\";\nimport { TReminderGroup } from \"types\";\n\nexport type TUseReminderGroupItemProps = {\n  reminderGroup?: TReminderGroup;\n};\n\nexport const useReminderGroupItem = ({ reminderGroup }: TUseReminderGroupItemProps) => {\n  const { groupId } = useAppSelector(selectQueryParams);\n  const isSelected = groupId === reminderGroup?.id;\n\n  const [deleteReminderGroup, deleteReminderGroupResult] = useDeleteReminderGroupMutation();\n  const [updateReminderGroup, updateReminderGroupResult] = useUpdateReminderGroupMutation();\n\n  const dispatch = useAppDispatch();\n\n  const isLoading = deleteReminderGroupResult.isLoading || updateReminderGroupResult.isLoading;\n\n  const isErrored = deleteReminderGroupResult.isError || updateReminderGroupResult.isError;\n\n  const handleOnItemClick = useCallback(\n    (queryParams: Parameters<typeof setQueryParams>[0]) => {\n      // update the query params value in store, causing a re-fetch of the reminders\n      dispatch(setQueryParams(queryParams));\n    },\n    [dispatch]\n  );\n\n  const handleOnDelete = useCallback(\n    async (id: Parameters<typeof deleteReminderGroup>[0]) => {\n      await handleAsync(() => deleteReminderGroup(id));\n    },\n    [deleteReminderGroup]\n  );\n\n  const handleOnSave = useCallback(\n    async (props: Parameters<typeof updateReminderGroup>[0]) => {\n      await handleAsync(() =>\n        updateReminderGroup({\n          id: props.id,\n          name: props.name,\n        })\n      );\n    },\n    [updateReminderGroup]\n  );\n\n  return {\n    isSelected,\n    isLoading,\n    isErrored,\n    handleOnItemClick,\n    handleOnDelete,\n\n    handleOnSave,\n  };\n};\n","import { FC, PropsWithChildren, useState } from \"react\";\n\nimport { ReminderGroupItem } from \"../ReminderGroupItem\";\nimport { AddButton, AddUpdateItem } from \"../components\";\n\nimport { useReminderGroupsList } from \"./useReminderGroupsList\";\n\nexport type TReminderGroupsListProps = Record<string, never>;\n\nexport const ReminderGroupsList: FC<PropsWithChildren<TReminderGroupsListProps>> = () => {\n  const [isCreating, setIsCreating] = useState(false);\n\n  const { handleOnSave, reminderGroups } = useReminderGroupsList();\n\n  return (\n    <div className=\"flex min-w-[200px] flex-1 flex-col overflow-hidden p-4\">\n      <div className=\"mb-2 mt-1 flex justify-center\">\n        <AddButton\n          size={\"full\"}\n          onClick={() => setIsCreating((isCreating) => !isCreating)}\n          disabled={isCreating}\n          data-testid={\"reminder-group-create-btn\"}\n        >\n          Add List\n        </AddButton>\n      </div>\n\n      {reminderGroups && (\n        <div className=\"flex-1 overflow-scroll\">\n          <ul className=\"divide divide-y divide-accent-dark\">\n            <li key=\"all\">\n              <ReminderGroupItem />\n            </li>\n            {reminderGroups &&\n              reminderGroups.map((reminderGroup) => (\n                <li key={reminderGroup.id}>\n                  <ReminderGroupItem reminderGroup={reminderGroup} />\n                </li>\n              ))}\n          </ul>\n        </div>\n      )}\n\n      {isCreating && (\n        <AddUpdateItem\n          onCancel={() => setIsCreating(false)}\n          onSave={(name) => {\n            handleOnSave({ name: name });\n            setIsCreating(false);\n          }}\n          testIds={{\n            cancel: `reminder-group-create-cancel`,\n            save: `reminder-group-create-save`,\n            text: `reminder-group-create-text`,\n          }}\n        />\n      )}\n    </div>\n  );\n};\n","import { useCallback } from \"react\";\n\nimport { toast } from \"sonner\";\n\nimport { useGetReminderGroupsQuery, useCreateReminderGroupMutation, handleAsync } from \"shared\";\n\nexport const useReminderGroupsList = () => {\n  const getReminderGroupsResult = useGetReminderGroupsQuery();\n\n  const [createReminderGroup, createReminderGroupResult] = useCreateReminderGroupMutation();\n\n  const handleOnSave = useCallback(\n    async (props: Parameters<typeof createReminderGroup>[0]) => {\n      await handleAsync(() =>\n        createReminderGroup({\n          name: props.name,\n        })\n      );\n    },\n    [createReminderGroup]\n  );\n\n  if (createReminderGroupResult.isError) {\n    toast.error(\"Error creating reminder group\");\n  }\n\n  if (getReminderGroupsResult.isError) {\n    toast.error(\"Error fetching reminder groups\");\n  }\n\n  return {\n    reminderGroups: getReminderGroupsResult.data,\n    handleOnSave,\n  };\n};\n","import { FC, PropsWithChildren } from \"react\";\n\nimport { Panel, PanelGroup, PanelResizeHandle } from \"react-resizable-panels\";\nimport { EllipsisVertical, EllipsisIcon } from \"lucide-react\";\n\nimport { useBreakpoint } from \"hooks\";\nimport { cn, BREAKPOINTS } from \"shared\";\n\nimport { RemindersList } from \"./RemindersList\";\n\nimport { ReminderGroupsList } from \"./ReminderGroupsList\";\n\nexport type TRemindersProps = Record<string, never>;\n\nexport const Reminders: FC<PropsWithChildren<TRemindersProps>> = () => {\n  const { isBelowMd } = useBreakpoint<keyof typeof BREAKPOINTS>(\"md\", BREAKPOINTS);\n\n  return (\n    <div\n      className=\"mx-auto h-full max-w-screen-lg p-2 md:p-8\"\n      data-testid=\"reminders\"\n    >\n      <div className=\"flex h-full flex-col rounded border-2 border-primary shadow-lg lg:h-3/4\">\n        <PanelGroup\n          direction={isBelowMd ? \"vertical\" : \"horizontal\"}\n          className=\"flex-1\"\n          autoSaveId={\"reminders-panel-group\"}\n        >\n          <Panel\n            maxSize={50}\n            className=\"flex flex-col\"\n          >\n            <ReminderGroupsList />\n          </Panel>\n\n          <PanelResizeHandle className=\"group\">\n            <div\n              className={cn(\n                \"flex h-full w-full items-center border-primary group-hover:bg-secondary group-hover:text-primary\",\n                isBelowMd ? \"border-b-2\" : \"border-r-2\"\n              )}\n            >\n              {isBelowMd ? <EllipsisIcon className=\"icon mx-auto\" /> : <EllipsisVertical className=\"icon mx-auto\" />}\n            </div>\n          </PanelResizeHandle>\n\n          <Panel className=\"flex flex-col\">\n            <RemindersList />\n          </Panel>\n        </PanelGroup>\n      </div>\n    </div>\n  );\n};\n","import { useMediaQuery } from \"react-responsive\";\n\ntype TKeyAbove<K extends string> = `isAbove${Capitalize<K>}`;\ntype TKeyBelow<K extends string> = `isBelow${Capitalize<K>}`;\n\n/**\n * Custom hook that returns breakpoint information based on the provided breakpoint key and breakpoints object.\n * @param breakpointKey - The key representing the desired breakpoint. Eg. \"sm\"\n * @param BREAKPOINTS - An object containing key-value pairs of breakpoints. Eg. { sm: \"576px\", md: \"768px\" }\n * @returns An object containing the breakpoint value, and boolean flags indicating if the viewport is above or below the specified breakpoint.\n *\n * @example\n * const BREAKPOINTS = { sm: \"576px\", md: \"768px\" };\n * const { isBelowMd, isAboveMd, md } = useBreakpoint<keyof typeof BREAKPOINTS>(\"md\", BREAKPOINTS);\n *\n * if (isBelowMd) {\n *  // Do something\n * }\n * if (isAboveMd) {\n *  // Do something\n * }\n */\nexport function useBreakpoint<K extends string>(breakpointKey: K, BREAKPOINTS: Record<K, string>) {\n  const breakpointValue = BREAKPOINTS[breakpointKey];\n\n  const isBelow = useMediaQuery({\n    query: `(max-width: ${breakpointValue})`,\n  });\n\n  const capitalizedKey = breakpointKey[0].toUpperCase() + breakpointKey.substring(1);\n\n  return {\n    [breakpointKey]: Number(String(breakpointValue).replace(/[^0-9]/g, \"\")),\n    [`isAbove${capitalizedKey}`]: !isBelow,\n    [`isBelow${capitalizedKey}`]: isBelow,\n  } as Record<K, number> & Record<TKeyAbove<K> | TKeyBelow<K>, boolean>;\n}\n"],"names":["REMINDER_STATE","INACTIVE","INPROGRESS","COMPLETED","ARCHIVED","AddButton","_ref","children","className","props","_jsxs","Button","variant","cn","_jsx","Plus","AddUpdateItem","onCancel","onSave","defaultValue","testIds","inputRef","useRef","handleOnSave","useCallback","_inputRef$current","current","value","handleOnCancel","Input","ref","autoFocus","required","text","onClick","size","save","Check","cancel","X","ReminderItem","_reminder$group","reminder","listName","isDropdownOpen","setIsDropdownOpen","useState","isUpdating","setIsUpdating","handleOnDelete","handleOnUpdate","isLoading","deleteReminder","deleteReminderResult","useDeleteReminderMutation","updateReminder","updateReminderResult","useUpdateReminderMutation","isErrored","isError","async","handleAsync","id","groupId","title","state","isPinned","dueDate","useReminderItem","isMenuDisabled","isCompleted","isOverdue","Date","concat","_Fragment","Checkbox","checked","Typography","affects","Dialog","DropdownMenu","open","onOpenChange","modal","DropdownMenuTrigger","asChild","disabled","ChevronUp","ChevronDown","DropdownMenuContent","align","onInteractOutside","DropdownMenuItem","Pin","role","DropdownMenuSeparator","DialogTrigger","CalendarClock","Pencil","Trash","DialogContent","DialogHeader","DialogTitle","DialogDescription","DateTimePicker","date","undefined","_ref2","selectedDateTime","DialogClose","toISOString","group","name","Badge","format","RemindersList","reminders","refetchReminders","reminderGroup","useRemindersList","queryParams","useSelectQueryParams","getRemindersResult","useGetRemindersQuery","getReminderGroupResult","useGetReminderGroupQuery","skip","createReminder","createReminderResult","useCreateReminderMutation","toast","error","currentData","refetch","isCreating","setIsCreating","RefreshCcw","slice","sort","a","b","map","ReminderGroupItem","handleOnItemClick","isSelected","useAppSelector","selectQueryParams","deleteReminderGroup","deleteReminderGroupResult","useDeleteReminderGroupMutation","updateReminderGroup","updateReminderGroupResult","useUpdateReminderGroupMutation","dispatch","useAppDispatch","setQueryParams","useReminderGroupItem","renderItem","useMemo","ReminderGroupsList","reminderGroups","useReminderGroupsList","getReminderGroupsResult","useGetReminderGroupsQuery","createReminderGroup","createReminderGroupResult","useCreateReminderGroupMutation","data","Reminders","isBelowMd","breakpointKey","BREAKPOINTS","breakpointValue","isBelow","useMediaQuery","query","capitalizedKey","toUpperCase","substring","Number","String","replace","useBreakpoint","PanelGroup","direction","autoSaveId","Panel","maxSize","PanelResizeHandle","EllipsisIcon","EllipsisVertical"],"sourceRoot":""}