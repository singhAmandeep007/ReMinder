{"version":3,"file":"static/js/253.aac614cb.chunk.js","mappings":"4HAAO,MAAMA,EAAiB,CAC5BC,SAAU,WACVC,WAAY,aACZC,UAAW,YACXC,SAAU,W,oGCWL,SAASC,EAAYC,GAAuD,IAAtD,WAAEC,EAAU,YAAEC,EAAc,GAAuBF,EAC9E,GAAIE,EAAc,GAAKA,EAAcD,EACnC,MAAM,IAAIE,MAAM,sDAGlB,MAAOC,EAAMC,IAAWC,EAAAA,EAAAA,UAASJ,GAE3BK,GAAWC,EAAAA,EAAAA,cAAY,KAC3BH,GAASI,GACHA,GAAYR,EACPQ,EAEFA,EAAW,GAClB,GACD,CAACR,IAEEQ,GAAWD,EAAAA,EAAAA,cAAY,KAC3BH,GAASI,GACHA,GAAY,EACPA,EAEFA,EAAW,GAClB,GACD,IAEGC,GAAYF,EAAAA,EAAAA,cACfG,IACCN,GAASI,GACHE,GAAW,GAAKA,GAAWV,EACtBU,EAEFF,GACP,GAEJ,CAACR,IAGH,MAAO,CACLG,OACAG,WACAE,WACAC,YACAE,YAAsB,IAATR,EACbS,WAAYT,IAASH,EAEzB,C,oICrDO,MAAMa,EAA8Bd,IAAwC,IAAvC,SAAEe,EAAQ,UAAEC,KAAcC,GAAOjB,EAC3E,OACEkB,EAAAA,EAAAA,MAACC,EAAAA,GAAM,CACLC,QAAS,QACTJ,WAAWK,EAAAA,EAAAA,IAAG,0EAA2EL,MACrFC,EAAKF,SAAA,EAETO,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAACP,UAAU,SACfD,IACM,E,uBCIN,MAAMS,EAA4DxB,IAMlE,IANmE,UACxEgB,EAAS,SACTS,EAAQ,OACRC,EAAM,aACNC,EAAe,GAAE,QACjBC,GACD5B,EACC,MAAM6B,GAAWC,EAAAA,EAAAA,QAAyB,MAEpCC,GAAevB,EAAAA,EAAAA,cAAY,KAAO,IAADwB,EACjB,QAApBA,EAAIH,EAASI,eAAO,IAAAD,GAAhBA,EAAkBE,QACd,OAANR,QAAM,IAANA,GAAAA,EAASG,EAASI,QAAQC,OAC5B,GACC,CAACR,IAEES,GAAiB3B,EAAAA,EAAAA,cAAY,KACzB,OAARiB,QAAQ,IAARA,GAAAA,GAAY,GACX,CAACA,IAEJ,OACEP,EAAAA,EAAAA,MAAA,OAAKF,WAAWK,EAAAA,EAAAA,IAAG,yCAA0CL,GAAWD,SAAA,EACtEO,EAAAA,EAAAA,KAACc,EAAAA,GAAK,CACJpB,UAAU,YACVW,aAAcA,EACdU,IAAKR,EACLS,WAAS,EACTC,UAAQ,EACR,cAAoB,OAAPX,QAAO,IAAPA,OAAO,EAAPA,EAASY,QAExBtB,EAAAA,EAAAA,MAAA,OAAKF,UAAU,0BAAyBD,SAAA,EACtCO,EAAAA,EAAAA,KAACH,EAAAA,GAAM,CACLsB,QAASV,EACTW,KAAK,OACLtB,QAAS,UACT,cAAoB,OAAPQ,QAAO,IAAPA,OAAO,EAAPA,EAASe,KACtB3B,UAAU,QAAOD,UAEjBO,EAAAA,EAAAA,KAACsB,EAAAA,EAAK,CAAC5B,UAAU,qCAEnBM,EAAAA,EAAAA,KAACH,EAAAA,GAAM,CACLsB,QAASN,EACTO,KAAK,OACLtB,QAAS,UACT,cAAoB,OAAPQ,QAAO,IAAPA,OAAO,EAAPA,EAASiB,OACtB7B,UAAU,QAAOD,UAEjBO,EAAAA,EAAAA,KAACwB,EAAAA,EAAC,CAAC9B,UAAU,6CAGb,E,kCCxDV,SAAS+B,EAAgBC,GACvB,MAAMC,GAAWC,EAAAA,EAAAA,GAAmB,CAAEC,MAAO,EAAGC,IAAKJ,IAmBrD,MAf2B,CAAC,QAAS,WAGlCK,KAAKC,IACJ,MAAMpB,EAAQe,EAASK,GAEvB,OAAIpB,GAASA,EAAQ,EACb,GAANqB,OAAUrB,GAAKqB,OAAGD,EAAKE,OAAO,IAGzB,EAAE,IAEVC,OAAOC,SACPC,KAAK,KAES,IACnB,CAEO,MAAMC,EAA8C5D,IAA6B,IAAD6D,EAAA,IAA3B,SAAEC,EAAQ,SAAEC,GAAU/D,EAChF,MAAMgE,EAAYF,EAASG,SAAW,IAAIC,KAAKJ,EAASG,SAAW,IAAIC,KAEjEC,GAAkBC,EAAAA,EAAAA,UACtB,IACEN,EAASO,cAAcC,QAAO,CAACC,EAAKC,KAClC,MAAMrB,EAAQ,IAAIe,KAAKM,EAAKC,WACtBrB,EAAM,IAAIc,KAAKM,EAAKE,SAG1B,OAAOH,GAFUI,EAAAA,EAAAA,GAAyBvB,EAAKD,EAE1B,GACpB,IACL,CAACW,EAASO,gBAEZ,OACEnD,EAAAA,EAAAA,MAAA,OAAKF,UAAU,kCAAiCD,SAAA,EAC5CgD,IAA0B,QAAlBF,EAAIC,EAASc,aAAK,IAAAf,OAAA,EAAdA,EAAgBgB,QAAQvD,EAAAA,EAAAA,KAACwD,EAAAA,GAAK,CAAC1D,QAAQ,UAASL,SAAE+C,EAASc,MAAMC,OAE9Ef,EAASG,UACR/C,EAAAA,EAAAA,MAAC4D,EAAAA,GAAK,CAAC1D,QAAS4C,EAAY,cAAgB,UAAUjD,SAAA,CAAC,SAAMgE,EAAAA,EAAAA,IAAO,IAAIb,KAAKJ,EAASG,SAAU,UAGjGE,EAAkB,IAAKjD,EAAAA,EAAAA,MAAC4D,EAAAA,GAAK,CAAC1D,QAAQ,UAASL,SAAA,CAAC,eAAagC,EAAgBoB,QAC1E,E,kCCdH,MCjCMa,EAAkBA,KAC7B,MAAOC,EAAgBC,IAAwBC,EAAAA,EAAAA,MAEzCC,EAAYF,EAAqBE,UAEjCC,EAAYH,EAAqBI,SAEjC,SAAExB,EAAUyB,qBAAsBC,GAAeC,KAE/CC,GAAIC,GAAe7B,EAErB8B,GAAiBpF,EAAAA,EAAAA,cAAYqF,UACjC,IAAK/B,EAASgC,oBAAqB,OAEnC,MAAMC,EAAkBjC,EAASgC,0BAE3BE,EAAAA,EAAAA,KAAY,IAChBf,EAAe,CACbS,GAAI5B,EAAS4B,GACbI,oBAAqB,KACrBzB,cAAe,IAAIP,EAASO,cAAe0B,MAE9C,GACA,CAACd,EAAgBnB,KAEd,UAAEmC,EAAS,aAAEC,EAAY,MAAE/C,EAAK,KAAEgD,GDQlB,SACtBX,GAEI,IADJ,UAAEY,GAAY,EAAK,SAAEC,EAAW,IAAI,OAAEC,EAAM,SAAEC,EAAQ,QAAEC,GAAmCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAG3FjB,EAAa,GAAGoB,QAAQC,KAAK,oBACjC,MAAMC,GAAehF,EAAAA,EAAAA,QAA8B,OAE5CiF,EAAgBC,IAAqB1G,EAAAA,EAAAA,UAASkF,IAC9CS,EAAWgB,IAAgB3G,EAAAA,EAAAA,UAAS8F,GAErCF,EAAeV,EAAauB,EAI5B5D,GAAQ3C,EAAAA,EAAAA,cAAY,KACxB,GAAIyF,EAAW,OACf,MAAMiB,EAAcH,IAAmBvB,EACjC2B,EAAmC,IAAnBJ,EAEtBE,GAAa,GAETE,GACFH,EAAkBxB,IAGhB0B,GAAeC,KACV,OAAPX,QAAO,IAAPA,GAAAA,IACF,GACC,CAAChB,EAAYgB,EAASP,EAAWc,IAE9BZ,GAAO3F,EAAAA,EAAAA,cAAY,KAClByF,IAEDa,EAAa7E,SACfmF,aAAaN,EAAa7E,SAE5BgF,GAAa,GACbD,EAAkBxB,GAAW,GAC5B,CAACS,EAAWT,IAET6B,GAAQ7G,EAAAA,EAAAA,cAAY,KACnByF,IAEDa,EAAa7E,SACfmF,aAAaN,EAAa7E,SAE5BgF,GAAa,GAAM,GAClB,CAAChB,IA+BJ,OA7BAqB,EAAAA,EAAAA,YAAU,KACJlB,IACK,OAAPI,QAAO,IAAPA,GAAAA,IACF,GACC,CAACJ,EAAWI,KAEfc,EAAAA,EAAAA,YAAU,KACR,IAAKrB,EAAW,OAChB,MAAMsB,EAAc/B,EAAauB,EAAiB,EAclD,OAZIA,EAAiB,GACfD,EAAa7E,SACfmF,aAAaN,EAAa7E,SAE5B6E,EAAa7E,QAAUuF,YAAW,KAChCR,GAAmBS,GAAUA,EAAQ,IAC/B,OAANnB,QAAM,IAANA,GAAAA,EAASiB,EAAY,GACpBlB,KAEHY,GAAa,GACL,OAARV,QAAQ,IAARA,GAAAA,KAEK,KACDO,EAAa7E,SACfmF,aAAaN,EAAa7E,QAC5B,CACD,GACA,CAAC8E,EAAgBd,EAAWI,EAAUb,EAAYe,EAAUD,IAExD,CAAES,iBAAgBb,eAAcD,YAAW9C,QAAOkE,QAAOlB,OAClE,CCxFmDuB,CAASlC,EAAY,CACpEe,SAAUX,IAGN+B,EAAYzB,EAAeV,EAAc,IAEzCoC,GAAgBpH,EAAAA,EAAAA,cAAYqF,UAChC,MAAMgC,EAAc,IAAI3D,MAElB,MAAE4D,SAAgB9B,EAAAA,EAAAA,KAAY,IAClCf,EAAe,CACbS,GAAIC,EACJG,oBAAqB,CACnBrB,WAAW,IAAIP,MAAO6D,cACtBrD,SAASsD,EAAAA,EAAAA,GAAWH,EAAarC,GAAYuC,mBAK9CD,GACH3E,GACF,GACC,CAAC8B,EAAgBU,EAAYH,EAAYrC,IAEtC8E,GAAezH,EAAAA,EAAAA,cAAYqF,UAC/B,IAAK/B,EAASgC,oBACZ,OAEF,MAAMC,EAAkB,CACtBtB,UAAWX,EAASgC,oBAAoBrB,UACxCC,SAAS,IAAIR,MAAO6D,gBAGhB,MAAED,SAAgB9B,EAAAA,EAAAA,KAAY,IAC3Bf,EAAe,CACpBS,GAAI5B,EAAS4B,GACbI,oBAAqB,KACrBzB,cAAe,IAAIP,EAASO,cAAe0B,OAI1C+B,GACH3B,GACF,GACC,CAAClB,EAAgBnB,EAAUqC,IAW9B,OATAmB,EAAAA,EAAAA,YAAU,IAED,KACDrB,GACFgC,GACF,GAED,CAAChC,EAAWgC,IAER,CACL7C,YACAC,YAEAmB,QAASoB,EACTM,OAAQD,EACR1B,SAAUX,EAEVK,YACA0B,WAIAQ,gBAAiBjC,EACjBpC,WACD,ECjGGsE,EAAuBpI,IAAiD,IAAhD,aAAEqI,GAAwCrI,EACtE,MAAMsI,EAAQC,KAAKC,MAAMH,EAAe,MAClCI,EAAUF,KAAKC,MAAOH,EAAe,KAAQ,IAC7CK,EAAmBL,EAAe,GAExC,OACEnH,EAAAA,EAAAA,MAAA,OAAKF,UAAU,qBAAoBD,SAAA,CAChCuH,EAAQ,IAAKpH,EAAAA,EAAAA,MAAA,QAAAH,SAAA,CAAOuH,EAAM,SAC1BG,EAAU,IAAKvH,EAAAA,EAAAA,MAAA,QAAAH,SAAA,CAAO0H,EAAQ,WAC/BvH,EAAAA,EAAAA,MAAA,QAAAH,SAAA,CAAO2H,EAAiB,YACpB,EAmDJC,EAAyCC,IAAqE,IAApE,SAAEjB,EAAQ,KAAEjF,EAAO,IAAG,QAAE8D,EAAO,OAAE0B,EAAM,UAAEjC,EAAS,SAAElF,GAAU6H,EAC5G,MACMC,GAAUnG,EADI,IACkB,EAChCoG,EAAgB,EAAIP,KAAKQ,GAAKF,EAE9BG,EAAmBT,KAAKU,IAAIH,EAAiBnB,EAAW,IAAOmB,EAAe,GAEpF,OACE5H,EAAAA,EAAAA,MAAA,OAAKF,UAAU,mCAAkCD,SAAA,EAC/CG,EAAAA,EAAAA,MAAA,OACEF,UAAU,WACVkI,MAAO,CAAEC,MAAOzG,EAAM0G,OAAQ1G,GAAO3B,SAAA,EAErCG,EAAAA,EAAAA,MAAA,OACEiI,MAAOzG,EACP0G,OAAQ1G,EAAK3B,SAAA,EAEbO,EAAAA,EAAAA,KAAA,UACEN,UAAU,eACVqI,KAAK,OACLC,YAnBU,GAoBVC,EAAGV,EACHW,GAAI9G,EAAO,EACX+G,GAAI/G,EAAO,KAEbpB,EAAAA,EAAAA,KAAA,UACEN,UAAU,iBACVqI,KAAK,OACLC,YA3BU,GA4BVC,EAAGV,EACHW,GAAI9G,EAAO,EACX+G,GAAI/G,EAAO,EACXwG,MAAO,CACLQ,gBAAiBZ,EACjBE,mBACAW,cAAe,QACfC,UAAW,iBACXC,gBAAiB,iBAIvBvI,EAAAA,EAAAA,KAAA,OAAKN,UAAU,oDAAmDD,SAAEA,QAEtEO,EAAAA,EAAAA,KAACH,EAAAA,GAAM,CACLsB,QAASwD,EAAYiC,EAAS1B,EAC9BxF,UAAU,yBAAwBD,SAEjCkF,GACC3E,EAAAA,EAAAA,KAACwI,EAAAA,EAAM,CACLpH,KAAM,GACN1B,UAAW,kBAGbM,EAAAA,EAAAA,KAACyI,EAAAA,EAAI,CACHrH,KAAM,GACN1B,UAAW,qBAIb,EC9HGgJ,EAAQ,CCIkEC,KACrF,MAAMC,GAAWpI,EAAAA,EAAAA,QAAe,GAC1BqI,GAAarI,EAAAA,EAAAA,QAAe,IAE5B,SAAEvB,EAAQ,wBAAE6J,GAA4B3E,IAa9C,OACEvE,EAAAA,EAAAA,MAAAmJ,EAAAA,SAAA,CAAAtJ,SAAA,EACEG,EAAAA,EAAAA,MAACoJ,EAAAA,GAAY,CAAAvJ,SAAA,EACXO,EAAAA,EAAAA,KAACiJ,EAAAA,GAAW,CAACvJ,UAAU,YAAWD,SAAC,wBACnCO,EAAAA,EAAAA,KAACkJ,EAAAA,GAAiB,CAACxJ,UAAU,qBAAoBD,SAAC,2CAEpDG,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iBAAgBD,SAAA,EAC7BG,EAAAA,EAAAA,MAAA,OAAKF,UAAU,8CAA6CD,SAAA,EAC1DO,EAAAA,EAAAA,KAACmJ,EAAAA,GAAW,CACVC,aAAcR,EAASjI,QACvB0I,SAAWzI,GAAWgI,EAASjI,QAAUC,EACzC+G,IAAK,GAAGlI,UAERO,EAAAA,EAAAA,KAAA,QAAMN,UAAU,UAASD,SAAC,aAE5BO,EAAAA,EAAAA,KAACmJ,EAAAA,GAAW,CACVC,aAAcP,EAAWlI,QACzB0I,SAAWzI,GAAWiI,EAAWlI,QAAUC,EAC3C0I,IAAK,EACL3B,IAAK,GAAGlI,UAERO,EAAAA,EAAAA,KAAA,QAAMN,UAAU,UAASD,SAAC,kBAI9BO,EAAAA,EAAAA,KAACH,EAAAA,GAAM,CACLsB,QArCcoI,KACpB,MAAMvC,EAAQ4B,EAASjI,QACjBwG,EAAU0B,EAAWlI,QAK3BmI,EAFyB,GAAR9B,EAAa,GAAe,GAAVG,GAGnClI,GAAU,EA8BJS,UAAU,WACV0B,KAAM,OACNJ,WAAW,EAAKvB,SACjB,cAIF,EFjCgE+J,KACrE,MAAM,UAAE7E,EAAS,SAAE0B,EAAQ,QAAEnB,EAAO,OAAE0B,EAAM,gBAAEC,EAAe,SAAErE,GAAakB,IAE5E,OACE9D,EAAAA,EAAAA,MAAAmJ,EAAAA,SAAA,CAAAtJ,SAAA,EACEG,EAAAA,EAAAA,MAACoJ,EAAAA,GAAY,CAAAvJ,SAAA,EACXO,EAAAA,EAAAA,KAACiJ,EAAAA,GAAW,CAACvJ,UAAU,YAAWD,SAAC,wBACnCG,EAAAA,EAAAA,MAACsJ,EAAAA,GAAiB,CAACxJ,UAAU,qBAAoBD,SAAA,CAAC,iBAC5CgK,EAAAA,EAAAA,IAAajH,EAASkH,MAAO,CAAEC,UAAW,aAIlD3J,EAAAA,EAAAA,KAAA,OAAKN,UAAU,kDAAiDD,UAC9DO,EAAAA,EAAAA,KAACqH,EAAU,CACT1C,UAAWA,EACX0B,SAAUA,EACVnB,QAASA,EACT0B,OAAQA,EACRxF,KAAM,IAAI3B,UAEVO,EAAAA,EAAAA,KAAC8G,EAAoB,CAACC,aAAcF,UAGvC,GC3CMlI,EAAa+J,EAAMtD,OEgBnBwE,GAA4BC,EAAAA,EAAAA,eAAiD,MAE7EC,EAA6BpL,IAA+D,IAA9D,SAAEe,EAAQ,SAAE+C,GAA4C9D,EACjG,MAAOuF,EAAsB6E,IAC3B9J,EAAAA,EAAAA,UAA6D,GAE/D,OACEgB,EAAAA,EAAAA,KAAC4J,EAA0BG,SAAQ,CACjCnJ,MAAO,CACLqD,uBACA6E,0BACAtG,cACG/D,EAAa,CAAEE,WAAW,KAC7Bc,SAEDA,GACkC,EAI5B0E,EAA+BA,KAC1C,MAAM6F,GAAUC,EAAAA,EAAAA,YAAWL,GAC3B,IAAKI,EACH,MAAM,IAAInL,MAAM,iFAElB,OAAOmL,CAAO,ECxCHE,EAAsEA,KACjF,MAAM,KAAEpL,GAASqF,IAEXgG,EAAYzB,EAAM5J,GAExB,OAAOkB,EAAAA,EAAAA,KAACmK,EAAS,GAAG,ECFTC,EAAwE1L,IAAmB,IAAlB,SAAE8D,GAAU9D,EAChG,OACEsB,EAAAA,EAAAA,KAAC8J,EAA0B,CAACtH,SAAUA,EAAS/C,UAC7CO,EAAAA,EAAAA,KAACkK,EAAkB,KACQ,ECyB3BG,EACM,WADNA,EAEW,gBAKJC,EAA0D5L,IAA6B,IAA5B,SAAE8D,EAAQ,SAAEC,GAAU/D,EAC5F,MAAO6L,EAAgBC,IAAqBxL,EAAAA,EAAAA,WAAS,IAC9CyL,EAAYC,IAAiB1L,EAAAA,EAAAA,WAAS,IACtC2L,EAAQC,IAAa5L,EAAAA,EAAAA,UAAkB,OAExC,eAAE6L,EAAc,eAAEC,EAAc,UAAEhH,GC1CXpF,KAA0C,IAAzC,SAAE8D,GAAiC9D,EACjE,MAAOqM,EAAgBC,IAAwBC,EAAAA,EAAAA,OACxCtH,EAAgBC,IAAwBC,EAAAA,EAAAA,MA6B/C,MAAO,CACLC,UA5BgBkH,EAAqBlH,WAAaF,EAAqBE,UA6BvEC,UA3BgBiH,EAAqBhH,SAAWJ,EAAqBI,QA6BrE6G,gBA3BqB3L,EAAAA,EAAAA,cACrBqF,gBACQG,EAAAA,EAAAA,KAAY,IAAMqG,EAAe3G,IAAI,GAE7C,CAAC2G,IAwBDD,gBArBqB5L,EAAAA,EAAAA,cACrBqF,gBACQG,EAAAA,EAAAA,KAAY,IAChBf,EAAe,CACbS,GAAIzE,EAAMyE,GACV8G,QAASvL,EAAMuL,QACfxB,MAAO/J,EAAM+J,MACbyB,MAAOxL,EAAMwL,MACbC,SAAUzL,EAAMyL,SAChBzI,QAAShD,EAAMgD,WAElB,GAEH,CAACgB,IASF,EDKqD0H,CAAgB,CACpE7I,aAGI8I,EAAiBxH,EAEjByH,EAAc/I,EAAS2I,QAAU/M,EAAAA,EAAeG,UAEtD,OACEqB,EAAAA,EAAAA,MAAA,OACEF,UAAU,qBACV,+BAAAuC,OAA8BO,EAASkH,OAAQjK,SAAA,CAE9CgL,IACCzK,EAAAA,EAAAA,KAACE,EAAa,CACZR,UAAU,SACVW,aAAcmC,EAASkH,MACvBvJ,SAAUA,IAAMuK,GAAc,GAC9BtK,OAASsJ,IACPoB,EAAe,CAAE1G,GAAI5B,EAAS4B,GAAIsF,UAClCgB,GAAc,EAAM,EAEtBpK,QAAS,CACPiB,OAAO,yBACPF,KAAK,uBACLH,KAAK,2BAKTuJ,IACA7K,EAAAA,EAAAA,MAAAmJ,EAAAA,SAAA,CAAAtJ,SAAA,EACEG,EAAAA,EAAAA,MAAA,OAAKF,UAAU,0CAAyCD,SAAA,EACtDO,EAAAA,EAAAA,KAACwL,EAAAA,GAAQ,CACPC,QAASF,EACT7L,UAAU,OACVyB,QAASA,IACP2J,EAAe,CACb1G,GAAI5B,EAAS4B,GACb+G,MAAOI,EAAcnN,EAAAA,EAAeC,SAAWD,EAAAA,EAAeG,YAGlE,0CAEFyB,EAAAA,EAAAA,KAAC0L,EAAAA,GAAU,CACT5L,QAAS,IACT6L,QAAS,iBACTjM,WAAWK,EAAAA,EAAAA,IACT,kIACAN,SAED+C,EAASkH,SAEZ9J,EAAAA,EAAAA,MAACgM,EAAAA,GAAM,CAAAnM,SAAA,EACLG,EAAAA,EAAAA,MAACiM,EAAAA,GAAY,CACXC,KAAMvB,EACNwB,aAAcvB,EAEdwB,OAAO,EAAMvM,SAAA,EAEbO,EAAAA,EAAAA,KAACiM,EAAAA,GAAmB,CAACC,SAAO,EAAAzM,UAC1BO,EAAAA,EAAAA,KAACH,EAAAA,GAAM,CACLC,QAAQ,UACRsB,KAAK,OACL,uCACA+K,SAAUb,EAAe7L,SAExB8K,GAAiBvK,EAAAA,EAAAA,KAACoM,EAAAA,EAAS,CAAC1M,UAAU,UAAYM,EAAAA,EAAAA,KAACqM,EAAAA,EAAW,CAAC3M,UAAU,cAG9EE,EAAAA,EAAAA,MAAC0M,EAAAA,GAAmB,CAClB5M,UAAU,YACV6M,MAAM,MACNC,kBAAmBA,IAAMhC,GAAkB,GAC3C,mCAAkC/K,SAAA,EAElCO,EAAAA,EAAAA,KAACyM,EAAAA,GAAgB,CACf,2CACAtL,QAASA,IACP2J,EAAe,CACb1G,GAAI5B,EAAS4B,GACbgH,UAAW5I,EAAS4I,WAGxB1L,WAAWK,EAAAA,EAAAA,IAAG,QAAS,CACrB,4BAA6ByC,EAAS4I,WAExCe,SAAUZ,EAAY9L,UAEtBO,EAAAA,EAAAA,KAAC0M,EAAAA,EAAG,CACFtL,KAAM,GACN1B,WAAWK,EAAAA,EAAAA,IAAG,4BACd4M,KAAK,cAIT3M,EAAAA,EAAAA,KAAC4M,EAAAA,GAAqB,KAEtB5M,EAAAA,EAAAA,KAAC6M,EAAAA,GAAa,CACZX,SAAO,EACP/K,QAASA,KACPyJ,EAAUP,EAAsB,EAChC5K,UAEFO,EAAAA,EAAAA,KAACyM,EAAAA,GAAgB,CACf/M,WAAWK,EAAAA,EAAAA,IAAG,SACdoM,SAAUZ,EACV,qDAAoD9L,UAEpDO,EAAAA,EAAAA,KAAC8M,EAAAA,EAAK,CACJ1L,KAAM,GACN1B,WAAWK,EAAAA,EAAAA,IAAG,4BACd4M,KAAK,gBAKX3M,EAAAA,EAAAA,KAAC4M,EAAAA,GAAqB,KAEtB5M,EAAAA,EAAAA,KAAC6M,EAAAA,GAAa,CACZX,SAAO,EACP/K,QAASA,KACPyJ,EAAUP,EAAiB,EAC3B5K,UAEFO,EAAAA,EAAAA,KAACyM,EAAAA,GAAgB,CACf/M,UAAU,QACVyM,SAAUZ,EACV,gDAA+C9L,UAE/CO,EAAAA,EAAAA,KAAC+M,EAAAA,EAAa,CACZ3L,KAAM,GACN1B,UAAU,2BACViN,KAAK,gBAKX3M,EAAAA,EAAAA,KAAC4M,EAAAA,GAAqB,KAEtB5M,EAAAA,EAAAA,KAACyM,EAAAA,GAAgB,CACf,4CACAtL,QAASA,IAAMuJ,GAAc,GAC7BhL,UAAU,QACVyM,SAAUZ,EAAY9L,UAEtBO,EAAAA,EAAAA,KAACgN,EAAAA,EAAM,CACL5L,KAAM,GACN1B,UAAU,2BACViN,KAAK,cAIT3M,EAAAA,EAAAA,KAAC4M,EAAAA,GAAqB,KAEtB5M,EAAAA,EAAAA,KAACyM,EAAAA,GAAgB,CACf,8CACAtL,QAASA,IAAM0J,EAAerI,EAAS4B,IACvC1E,UAAU,QAAOD,UAEjBO,EAAAA,EAAAA,KAACiN,EAAAA,EAAK,CACJ7L,KAAM,GACN1B,UAAU,+BACViN,KAAK,oBAMb/M,EAAAA,EAAAA,MAACsN,EAAAA,GAAa,CACZxN,UAAU,QACV,cAAY,uBAAsBD,SAAA,CAEjCkL,IAAWN,IACVzK,EAAAA,EAAAA,MAAAmJ,EAAAA,SAAA,CAAAtJ,SAAA,EACEG,EAAAA,EAAAA,MAACoJ,EAAAA,GAAY,CAAAvJ,SAAA,EACXO,EAAAA,EAAAA,KAACiJ,EAAAA,GAAW,CAACvJ,UAAU,YAAWD,SAAC,4BACnCO,EAAAA,EAAAA,KAACkJ,EAAAA,GAAiB,CAACxJ,UAAU,YAAWD,SAAC,4CAG3CO,EAAAA,EAAAA,KAACmN,EAAAA,GAAc,CACbrJ,UAAWA,EACXsJ,KAAM5K,EAASG,QAAU,IAAIC,KAAKJ,EAASG,cAAW0C,EAAU5F,SAE/D6H,IAA2B,IAA1B,iBAAE+F,GAAkB/F,EACpB,OACEtH,EAAAA,EAAAA,KAACsN,EAAAA,GAAW,CAACpB,SAAO,EAAAzM,UAClBO,EAAAA,EAAAA,KAACH,EAAAA,GAAM,CACLuB,KAAK,OACLD,QAASA,KACP,GAAIkM,EAAkB,CACpB,MAAM1K,EAAU0K,EAAiB5G,cACjCqE,EAAe,CAAE1G,GAAI5B,EAAS4B,GAAIzB,WACpC,GAEFjD,WAAWK,EAAAA,EAAAA,IAAG+D,GAAa,sBAC3BqI,UAAWkB,GAAoBvJ,EAC/B,gDAA+CrE,SAChD,UAGW,OAMvBkL,IAAWN,IAAyBrK,EAAAA,EAAAA,KAACoK,EAAmB,CAAC5H,SAAUA,cAKxE+I,IACAvL,EAAAA,EAAAA,KAACsC,EAAM,CACLE,SAAUA,EACVC,SAAUA,SAKd,E,cEnQH,MCCM8K,EAA4DA,KACvE,MAAM,UAAEC,EAAS,iBAAEC,EAAgB,cAAEC,EAAa,aAAEjN,GDFtBkN,MAC9B,MAAMC,GAAcC,EAAAA,EAAAA,MAEdC,GAAqBC,EAAAA,EAAAA,IAAqBH,GAE1CI,GAAyBC,EAAAA,EAAAA,GAAyBL,EAAY1C,QAAmB,CACrFgD,MAAON,EAAY1C,WAGdiD,EAAgBC,IAAwBC,EAAAA,EAAAA,MAEzC5N,GAAevB,EAAAA,EAAAA,cACnBqF,gBACQG,EAAAA,EAAAA,KAAY,IAChByJ,EAAe,CACbjD,QAASvL,EAAMuL,QACfxB,MAAO/J,EAAM+J,SAEhB,GAEH,CAACyE,IAeH,OAZIH,EAAuBhK,SACzBsK,EAAAA,GAAM9H,MAAM,iCAGVsH,EAAmB9J,SACrBsK,EAAAA,GAAM9H,MAAM,4BAGV4H,EAAqBpK,SACvBsK,EAAAA,GAAM9H,MAAM,2BAGP,CACLgH,UAAWM,EAAmBS,YAC9Bb,cAAeM,EAAuBO,YACtCd,iBAAkBK,EAAmBU,QACrC/N,eACD,ECtCoEkN,IAE9Dc,EAAYC,IAAiB1P,EAAAA,EAAAA,WAAS,GAE7C,OACEY,EAAAA,EAAAA,MAAA,OAAKF,UAAU,2CAA0CD,SAAA,EACvDG,EAAAA,EAAAA,MAAA,OAAKF,UAAU,+CAA8CD,SAAA,EAC3DO,EAAAA,EAAAA,KAAC0L,EAAAA,GAAU,CACT5L,QAAS,KACTJ,UAAU,wEACV,cAAY,sBAAqBD,UAEnB,OAAbiO,QAAa,IAAbA,OAAa,EAAbA,EAAenK,OAAQ,SAE1B3D,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAYD,SAAA,EACzBO,EAAAA,EAAAA,KAACH,EAAAA,GAAM,CACLuB,KAAM,OACNtB,QAAS,QACTJ,UAAU,qBACV,cAAY,uBAAsBD,UAElCO,EAAAA,EAAAA,KAAC2O,EAAAA,EAAU,CACTjP,UAAU,OACVyB,QAASsM,OAIbzN,EAAAA,EAAAA,KAACR,EAAS,CACR4B,KAAM,OACND,QAASA,IAAMuN,GAAeD,IAAgBA,IAC9CtC,SAAUsC,EACV,cAAY,8BAKjBjB,IACCxN,EAAAA,EAAAA,KAAA,OAAKN,UAAU,yBAAwBD,UACrCO,EAAAA,EAAAA,KAAA,MAAIN,UAAU,kBAAiBD,SACnB,OAAT+N,QAAS,IAATA,OAAS,EAATA,EACGoB,QACDC,MAAK,CAACC,EAAGC,IACDD,EAAE1D,UAAY,EAAI2D,EAAE3D,SAAW,EAAI,IAE3CrJ,KAAKS,IAEFxC,EAAAA,EAAAA,KAAA,MAAAP,UACEO,EAAAA,EAAAA,KAACsK,EAAY,CACX9H,SAAUA,EACVC,SAAuB,OAAbiL,QAAa,IAAbA,OAAa,EAAbA,EAAenK,QAHpBf,EAAS4B,UAY7BqK,IACCzO,EAAAA,EAAAA,KAACE,EAAa,CACZC,SAAUA,IAAMuO,GAAc,GAC9BtO,OAASsJ,IACPjJ,EAAa,CAAEiJ,MAAOA,EAAOwB,QAAsB,OAAbwC,QAAa,IAAbA,OAAa,EAAbA,EAAetJ,KACrDsK,GAAc,EAAM,EAEtBpO,QAAS,CACPiB,OAAO,8BACPF,KAAK,4BACLH,KAAK,iCAIP,EC5DG8N,EAAoEtQ,IAAwB,IAAvB,cAAEgP,GAAehP,EACjG,MAAO6L,EAAgBC,IAAqBxL,EAAAA,EAAAA,WAAS,IAC9CyL,EAAYC,IAAiB1L,EAAAA,EAAAA,WAAS,IAEvC,eAAE6L,EAAc,kBAAEoE,EAAiB,aAAExO,EAAY,UAAEqD,EAAS,WAAEoL,GCblCxQ,KAAoD,IAAnD,cAAEgP,GAA2ChP,EAChF,MAAM,QAAEwM,IAAYiE,EAAAA,EAAAA,IAAeC,EAAAA,IAC7BF,EAAahE,KAAyB,OAAbwC,QAAa,IAAbA,OAAa,EAAbA,EAAetJ,KAEvCiL,EAAqBC,IAA6BC,EAAAA,EAAAA,OAClDC,EAAqBC,IAA6BC,EAAAA,EAAAA,MAEnDC,GAAWC,EAAAA,EAAAA,MAiCjB,MAAO,CACLV,aACApL,UAjCgBwL,EAA0BxL,WAAa2L,EAA0B3L,UAkCjFC,UAhCgBuL,EAA0BtL,SAAWyL,EAA0BzL,QAiC/EiL,mBA/BwB/P,EAAAA,EAAAA,cACvB0O,IAEC+B,GAASE,EAAAA,EAAAA,IAAejC,GAAa,GAEvC,CAAC+B,IA2BD9E,gBAxBqB3L,EAAAA,EAAAA,cACrBqF,gBACQG,EAAAA,EAAAA,KAAY,IAAM2K,EAAoBjL,IAAI,GAElD,CAACiL,IAsBD5O,cAnBmBvB,EAAAA,EAAAA,cACnBqF,gBACQG,EAAAA,EAAAA,KAAY,IAChB8K,EAAoB,CAClBpL,GAAIzE,EAAMyE,GACVb,KAAM5D,EAAM4D,QAEf,GAEH,CAACiM,IAWF,EDnCkFM,CAAqB,CACtGpC,kBAGIpC,EAAiBxH,EAEjBiM,GAAajN,EAAAA,EAAAA,UAAQ,IACrB4K,GAAiBjD,GAEjBzK,EAAAA,EAAAA,KAACE,EAAa,CACZR,UAAU,SACVW,aAAcqN,EAAcnK,KAC5BpD,SAAUA,IAAMuK,GAAc,GAC9BtK,OAASmD,IACP9C,EAAa,CAAE2D,GAAIsJ,EAActJ,GAAIb,SACrCmH,GAAc,EAAM,EAEtBpK,QAAS,CACPiB,OAAO,qCAADU,OAAuCyL,EAActJ,IAC3D/C,KAAK,mCAADY,OAAqCyL,EAActJ,QAO7DpE,EAAAA,EAAAA,KAAC0L,EAAAA,GAAU,CACT5L,QAAS,IACTJ,WAAWK,EAAAA,EAAAA,IAAG,2DAA4DmP,GAAc,gBACxF/N,QAASA,IAAM8N,EAAkB,CAAE/D,QAASwC,EAAgBA,EAActJ,QAAKiB,IAAa5F,SAE3FiO,EAAgBA,EAAcnK,KAAO,SAGzC,CAAC2L,EAAYD,EAAmBxE,EAAYiD,EAAejN,IAE9D,OACEb,EAAAA,EAAAA,MAAA,OACEF,WAAWK,EAAAA,EAAAA,IAAG,oEACd,qCAAAkC,OAAoCyL,EAAgBA,EAAcnK,KAAO,OAAQ9D,SAAA,CAEhFsQ,EAEArC,IAAkBjD,IACjB7K,EAAAA,EAAAA,MAACiM,EAAAA,GAAY,CACXC,KAAMvB,EACNwB,aAAcvB,EAAkB/K,SAAA,EAEhCO,EAAAA,EAAAA,KAACiM,EAAAA,GAAmB,CAACC,SAAO,EAAAzM,UAC1BO,EAAAA,EAAAA,KAACH,EAAAA,GAAM,CACLC,QAAQ,UACRsB,KAAK,OACL,6CACA+K,SAAUb,EAAe7L,SAExB8K,GAAiBvK,EAAAA,EAAAA,KAACoM,EAAAA,EAAS,CAAC1M,UAAU,UAAYM,EAAAA,EAAAA,KAACqM,EAAAA,EAAW,CAAC3M,UAAU,cAG9EE,EAAAA,EAAAA,MAAC0M,EAAAA,GAAmB,CAClBC,MAAM,MACNC,kBAAmBA,IAAMhC,GAAkB,GAC3C9K,UAAU,YACV,yCAAwCD,SAAA,EAExCO,EAAAA,EAAAA,KAACyM,EAAAA,GAAgB,CACftL,QAASA,IAAMuJ,GAAc,GAC7B,4CAAAzI,OAA2CyL,EAAcnK,MACzD7D,UAAU,QAAOD,UAEjBO,EAAAA,EAAAA,KAACgN,EAAAA,EAAM,CACL5L,KAAM,GACN1B,UAAU,2BACViN,KAAK,cAGT3M,EAAAA,EAAAA,KAAC4M,EAAAA,GAAqB,KACtB5M,EAAAA,EAAAA,KAACyM,EAAAA,GAAgB,CACftL,QAASA,IAAM0J,EAAe6C,EAActJ,IAC5C,4CAAAnC,OAA2CyL,EAAcnK,MACzD7D,UAAU,QAAOD,UAEjBO,EAAAA,EAAAA,KAACiN,EAAAA,EAAK,CACJ7L,KAAM,GACN1B,UAAU,+BACViN,KAAK,qBAMX,EE/GGqD,EAAsEA,KACjF,MAAOvB,EAAYC,IAAiB1P,EAAAA,EAAAA,WAAS,IAEvC,aAAEyB,EAAY,eAAEwP,GCNaC,MACnC,MAAMC,GAA0BC,EAAAA,EAAAA,OAEzBC,EAAqBC,IAA6BC,EAAAA,EAAAA,MAEnD9P,GAAevB,EAAAA,EAAAA,cACnBqF,gBACQG,EAAAA,EAAAA,KAAY,IAChB2L,EAAoB,CAClB9M,KAAM5D,EAAM4D,QAEf,GAEH,CAAC8M,IAWH,OARIC,EAA0BtM,SAC5BsK,EAAAA,GAAM9H,MAAM,iCAGV2J,EAAwBnM,SAC1BsK,EAAAA,GAAM9H,MAAM,kCAGP,CACLyJ,eAAgBE,EAAwBK,KACxC/P,eACD,EDrBwCyP,GAEzC,OACEtQ,EAAAA,EAAAA,MAAA,OAAKF,UAAU,yDAAwDD,SAAA,EACrEO,EAAAA,EAAAA,KAAA,OAAKN,UAAU,gCAA+BD,UAC5CO,EAAAA,EAAAA,KAACR,EAAS,CACR4B,KAAM,OACND,QAASA,IAAMuN,GAAeD,IAAgBA,IAC9CtC,SAAUsC,EACV,cAAa,4BAA4BhP,SAC1C,eAKFwQ,IACCjQ,EAAAA,EAAAA,KAAA,OAAKN,UAAU,yBAAwBD,UACrCG,EAAAA,EAAAA,MAAA,MAAIF,UAAU,qCAAoCD,SAAA,EAChDO,EAAAA,EAAAA,KAAA,MAAAP,UACEO,EAAAA,EAAAA,KAACgP,EAAiB,KADZ,OAGPiB,GACCA,EAAelO,KAAK2L,IAClB1N,EAAAA,EAAAA,KAAA,MAAAP,UACEO,EAAAA,EAAAA,KAACgP,EAAiB,CAACtB,cAAeA,KAD3BA,EAActJ,WAQhCqK,IACCzO,EAAAA,EAAAA,KAACE,EAAa,CACZC,SAAUA,IAAMuO,GAAc,GAC9BtO,OAASmD,IACP9C,EAAa,CAAE8C,KAAMA,IACrBmL,GAAc,EAAM,EAEtBpO,QAAS,CACPiB,OAAO,+BACPF,KAAK,6BACLH,KAAK,kCAIP,EE3CGuP,EAAoDA,KAC/D,MAAM,UAAEC,GCOH,SAAyCC,EAAkBC,GAChE,MAAMC,EAAkBD,EAAYD,GAE9BG,GAAUC,EAAAA,EAAAA,IAAc,CAC5BC,MAAM,eAAD/O,OAAiB4O,EAAe,OAGjCI,EAAiBN,EAAc,GAAGO,cAAgBP,EAAcQ,UAAU,GAEhF,MAAO,CACL,CAACR,GAAgBS,OAAOC,OAAOR,GAAiBS,QAAQ,UAAW,KACnE,CAAC,UAADrP,OAAWgP,KAAoBH,EAC/B,CAAC,UAAD7O,OAAWgP,IAAmBH,EAElC,CDrBwBS,CAAwC,KAAMX,EAAAA,IAEpE,OACE5Q,EAAAA,EAAAA,KAAA,OACEN,UAAU,4CACV,cAAY,YAAWD,UAEvBO,EAAAA,EAAAA,KAAA,OAAKN,UAAU,0EAAyED,UACtFG,EAAAA,EAAAA,MAAC4R,EAAAA,GAAU,CACTC,UAAWf,EAAY,WAAa,aACpChR,UAAU,SACVgS,WAAY,wBAAwBjS,SAAA,EAEpCO,EAAAA,EAAAA,KAAC2R,EAAAA,GAAK,CACJC,QAAS,GACTlS,UAAU,gBAAeD,UAEzBO,EAAAA,EAAAA,KAACgQ,EAAkB,OAGrBhQ,EAAAA,EAAAA,KAAC6R,EAAAA,GAAiB,CAACnS,UAAU,QAAOD,UAClCO,EAAAA,EAAAA,KAAA,OACEN,WAAWK,EAAAA,EAAAA,IACT,mGACA2Q,EAAY,aAAe,cAC3BjR,SAEDiR,GAAY1Q,EAAAA,EAAAA,KAAC8R,EAAAA,EAAY,CAACpS,UAAU,kBAAoBM,EAAAA,EAAAA,KAAC+R,EAAAA,EAAgB,CAACrS,UAAU,sBAIzFM,EAAAA,EAAAA,KAAC2R,EAAAA,GAAK,CAACjS,UAAU,gBAAeD,UAC9BO,EAAAA,EAAAA,KAACuN,EAAa,YAIhB,C","sources":["types/Reminders.ts","hooks/useMultiStep.ts","views/Reminders/components/AddButton.tsx","views/Reminders/components/AddUpdateItem.tsx","views/Reminders/ReminderItem/Badges.tsx","hooks/useTimer.ts","views/Reminders/ReminderItem/FocusSessionTracker/FocusSessionWizard/Steps/useFocusSession.ts","views/Reminders/ReminderItem/FocusSessionTracker/FocusSessionWizard/Steps/FocusSession.tsx","views/Reminders/ReminderItem/FocusSessionTracker/FocusSessionWizard/Steps/index.ts","views/Reminders/ReminderItem/FocusSessionTracker/FocusSessionWizard/Steps/FocusSessionDuration.tsx","views/Reminders/ReminderItem/FocusSessionTracker/FocusSessionWizard/context.tsx","views/Reminders/ReminderItem/FocusSessionTracker/FocusSessionWizard/FocusSessionWizard.tsx","views/Reminders/ReminderItem/FocusSessionTracker/FocusSessionTracker.tsx","views/Reminders/ReminderItem/ReminderItem.tsx","views/Reminders/ReminderItem/useReminderItem.ts","views/Reminders/RemindersList/useRemindersList.ts","views/Reminders/RemindersList/RemindersList.tsx","views/Reminders/ReminderGroupItem/ReminderGroupItem.tsx","views/Reminders/ReminderGroupItem/useReminderGroupItem.ts","views/Reminders/ReminderGroupsList/ReminderGroupsList.tsx","views/Reminders/ReminderGroupsList/useReminderGroupsList.ts","views/Reminders/Reminders.tsx","hooks/useBreakpoint.ts"],"sourcesContent":["export const REMINDER_STATE = {\n  INACTIVE: \"INACTIVE\",\n  INPROGRESS: \"INPROGRESS\",\n  COMPLETED: \"COMPLETED\",\n  ARCHIVED: \"ARCHIVED\",\n} as const;\n\nexport type TReminderState = (typeof REMINDER_STATE)[keyof typeof REMINDER_STATE];\n\nexport type TReminderFocusSession = {\n  startTime: string;\n  endTime: string;\n};\n\nexport type TReminder = {\n  id: string;\n  title: string;\n  /**\n   * Current state of the reminder.\n   *\n   * @example \"IN_ACTIVE\" | \"IN_PROGRESS\" | \"COMPLETED\"\n   */\n  state: TReminderState;\n  /**\n   * Indicates if the reminder is pinned on top.\n   */\n  isPinned: boolean;\n  /**\n   * Date and time the reminder was created. (ISO 8601 format)\n   */\n  createdAt: string;\n  /**\n   * Date and time the reminder was last updated. (ISO 8601 format)\n   */\n  updatedAt: string;\n  /**\n   * Optional reminder group this reminder belongs to.\n   */\n  group: TReminderGroup | null;\n  /**\n   * Due date and time for the reminder. (ISO 8601 format)\n   *\n   * @example \"2021-09-30T00:00:00.000Z\"\n   */\n  dueDate: string | null;\n  currentFocusSession: {\n    /**\n     * date and time when focus session was started for this reminder. (ISO 8601 format)\n     */\n    startTime: string;\n    /**\n     * date and time the focus session stopped for this reminder. (ISO 8601 format)\n     */\n    endTime: string;\n  } | null;\n  /**\n   * Array to store history of multiple focus sessions for this reminder.\n   * Each session includes start time and end time.\n   */\n  focusSessions: TReminderFocusSession[];\n};\n\nexport type TReminderGroup = {\n  id: string;\n  name: string;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type TMessageResponsePaylaod = {\n  message: string;\n};\n\nexport type TDataResponsePayload<T> = {\n  data: T;\n};\n\n/**\n * Error\n */\nexport type THTTPError = {\n  message: string;\n};\n\n/**\n * Reminder\n */\nexport type TGetRemindersQueryParams = Partial<{\n  groupId: TReminderGroup[\"id\"];\n  state: TReminder[\"state\"];\n}>;\n\nexport type TGetRemindersResponsePayload = TDataResponsePayload<TReminder[]>;\n\nexport type TGetReminderRequestPayload = TReminder[\"id\"];\n\nexport type TGetReminderResponsePayload = TDataResponsePayload<TReminder>;\n\nexport type TCreateReminderRequestPayload = Pick<TReminder, \"title\"> & Partial<{ groupId: TReminderGroup[\"id\"] }>;\n\nexport type TCreateReminderResponsePayload = TDataResponsePayload<TReminder>;\n\nexport type TUpdateReminderRequestPayload = Pick<TReminder, \"id\"> &\n  Partial<\n    Pick<TReminder, \"title\" | \"state\" | \"isPinned\" | \"dueDate\" | \"currentFocusSession\" | \"focusSessions\"> & {\n      groupId: TReminderGroup[\"id\"];\n    }\n  >;\n\nexport type TUpdateReminderResponsePayload = TDataResponsePayload<TReminder>;\n\nexport type TDeleteReminderRequestPayload = TReminder[\"id\"];\n\nexport type TDeleteReminderResponsePayload = TMessageResponsePaylaod;\n\n/**\n * Reminder Group\n */\nexport type TGetReminderGroupsResponsePayload = TDataResponsePayload<TReminderGroup[]>;\n\nexport type TGetReminderGroupRequestPayload = TReminderGroup[\"id\"];\n\nexport type TGetReminderGroupResponsePayload = TDataResponsePayload<TReminderGroup>;\n\nexport type TCreateReminderGroupRequestPayload = Pick<TReminderGroup, \"name\">;\n\nexport type TCreateReminderGroupResponsePayload = TDataResponsePayload<TReminderGroup>;\n\nexport type TUpdateReminderGroupRequestPayload = Pick<TReminderGroup, \"id\"> & Partial<Pick<TReminderGroup, \"name\">>;\n\nexport type TUpdateReminderGroupResponsePayload = TDataResponsePayload<TReminderGroup>;\n\nexport type TDeleteReminderGroupRequestPayload = TReminderGroup[\"id\"];\n\nexport type TDeleteReminderGroupResponsePayload = TMessageResponsePaylaod;\n","import { useState, useCallback } from \"react\";\n\nexport type TUseMultiStepProps = {\n  /**\n   * Total number of steps in the multi-step process\n   * NOTE: steps are 0-indexed, so if totalSteps = 2 then the steps are 0, 1, 2\n   */\n  totalSteps: number;\n  /**\n   * Initial step to start with\n   * NOTE: steps are 0-indexed\n   */\n  initialStep?: number;\n};\n\nexport function useMultiStep({ totalSteps, initialStep = 0 }: TUseMultiStepProps) {\n  if (initialStep < 0 || initialStep > totalSteps) {\n    throw new Error(\"initialStep must be within the range of totalSteps\");\n  }\n\n  const [step, setStep] = useState(initialStep);\n\n  const nextStep = useCallback(() => {\n    setStep((prevStep) => {\n      if (prevStep >= totalSteps) {\n        return prevStep;\n      }\n      return prevStep + 1;\n    });\n  }, [totalSteps]);\n\n  const prevStep = useCallback(() => {\n    setStep((prevStep) => {\n      if (prevStep <= 0) {\n        return prevStep;\n      }\n      return prevStep - 1;\n    });\n  }, []);\n\n  const setStepTo = useCallback(\n    (newStep: number) => {\n      setStep((prevStep) => {\n        if (newStep >= 0 && newStep <= totalSteps) {\n          return newStep;\n        }\n        return prevStep;\n      });\n    },\n    [totalSteps]\n  );\n\n  return {\n    step,\n    nextStep,\n    prevStep,\n    setStepTo,\n    isFirstStep: step === 0,\n    isLastStep: step === totalSteps,\n  };\n}\n","import { FC } from \"react\";\nimport { Plus } from \"lucide-react\";\n\nimport { cn } from \"shared\";\n\nimport { Button, TButtonProps } from \"components\";\n\nexport const AddButton: FC<TButtonProps> = ({ children, className, ...props }) => {\n  return (\n    <Button\n      variant={\"ghost\"}\n      className={cn(\"gap-1 border border-accent-dark hover:bg-accent-dark hover:text-primary\", className)}\n      {...props}\n    >\n      <Plus className=\"icon\" />\n      {children}\n    </Button>\n  );\n};\n","import { FC, PropsWithChildren, useCallback, useRef } from \"react\";\n\nimport { Check, X } from \"lucide-react\";\n\nimport { cn } from \"shared\";\n\nimport { Button, Input } from \"components\";\n\nexport type TAddUpdateItemProps = {\n  className?: string;\n  onSave?: (value: string) => void;\n  onCancel?: () => void;\n  defaultValue?: string;\n  testIds?: {\n    save?: string;\n    cancel?: string;\n    text?: string;\n  };\n};\n\nexport const AddUpdateItem: FC<PropsWithChildren<TAddUpdateItemProps>> = ({\n  className,\n  onCancel,\n  onSave,\n  defaultValue = \"\",\n  testIds,\n}) => {\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const handleOnSave = useCallback(() => {\n    if (inputRef.current?.value) {\n      onSave?.(inputRef.current.value);\n    }\n  }, [onSave]);\n\n  const handleOnCancel = useCallback(() => {\n    onCancel?.();\n  }, [onCancel]);\n\n  return (\n    <div className={cn(\"mt-2 flex items-center justify-between\", className)}>\n      <Input\n        className=\"ml-1 mr-2\"\n        defaultValue={defaultValue}\n        ref={inputRef}\n        autoFocus\n        required\n        data-testid={testIds?.text}\n      />\n      <div className=\"flex items-center gap-1\">\n        <Button\n          onClick={handleOnSave}\n          size=\"icon\"\n          variant={\"outline\"}\n          data-testid={testIds?.save}\n          className=\"group\"\n        >\n          <Check className=\"icon group-hover:text-primary\" />\n        </Button>\n        <Button\n          onClick={handleOnCancel}\n          size=\"icon\"\n          variant={\"outline\"}\n          data-testid={testIds?.cancel}\n          className=\"group\"\n        >\n          <X className=\"icon group-hover:text-destructive\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n","import { FC, PropsWithChildren, useMemo } from \"react\";\nimport { format, intervalToDuration, differenceInMilliseconds } from \"date-fns\";\n\nimport { Badge } from \"components\";\n\nimport { TReminder } from \"types\";\n\nexport type TBadgesProps = {\n  reminder: TReminder;\n\n  listName?: string;\n};\n\nfunction formatTimeSpent(milliseconds: number): string {\n  const duration = intervalToDuration({ start: 0, end: milliseconds });\n\n  type TDuration = keyof typeof duration;\n\n  const units: TDuration[] = [\"hours\", \"minutes\"];\n\n  const format = units\n    .map((unit) => {\n      const value = duration[unit];\n\n      if (value && value > 0) {\n        return `${value}${unit.charAt(0)}`;\n      }\n\n      return \"\";\n    })\n    .filter(Boolean)\n    .join(\"\");\n\n  return format || \"0m\";\n}\n\nexport const Badges: FC<PropsWithChildren<TBadgesProps>> = ({ reminder, listName }) => {\n  const isOverdue = reminder.dueDate && new Date(reminder.dueDate) < new Date();\n\n  const totalDurationMs = useMemo(\n    () =>\n      reminder.focusSessions.reduce((acc, curr) => {\n        const start = new Date(curr.startTime);\n        const end = new Date(curr.endTime);\n        const duration = differenceInMilliseconds(end, start);\n\n        return acc + duration;\n      }, 0),\n    [reminder.focusSessions]\n  );\n  return (\n    <div className=\"ml-6 mr-10 flex flex-wrap gap-2\">\n      {!listName && reminder.group?.name && <Badge variant=\"default\">{reminder.group.name}</Badge>}\n\n      {reminder.dueDate && (\n        <Badge variant={isOverdue ? \"destructive\" : \"default\"}>Due: {format(new Date(reminder.dueDate), \"PPp\")}</Badge>\n      )}\n\n      {totalDurationMs > 0 && <Badge variant=\"default\">Time spent: {formatTimeSpent(totalDurationMs)}</Badge>}\n    </div>\n  );\n};\n","import { useEffect, useState, useCallback, useRef } from \"react\";\n\n/**\n * Configuration options for the useTimer hook.\n */\nexport type TUseTimerConfig = {\n  /**\n   * Determines whether the timer should start automatically.\n   * @defaultValue `false`\n   */\n  autoStart?: boolean;\n\n  /**\n   * The interval in milliseconds at which the remaining ticks should update.\n   * @defaultValue `1000`\n   */\n  interval?: number;\n\n  /**\n   * A callback function that will be called when the timer ticks with the remaining ticks as an argument.\n   */\n  onTick?: (remainingTick: number) => void;\n\n  /**\n   * A callback function that will be called when the timer finishes.\n   */\n  onFinish?: () => void;\n\n  /**\n   * A callback function that will be called when the timer starts.\n   */\n  onStart?: () => void;\n};\n\nexport type TUseTimerProps = {\n  totalTicks: number;\n  config: TUseTimerConfig;\n};\n\n/**\n * Custom hook for a timer. Use to control the number of ticks remaining, tick completion duration, handle timer completion and start events.\n * @param totalTicks - The inital total number of ticks.\n * @param {UseTimerConfig} options - Optional configuration for the timer.\n * @returns {Object} - An object containing the remaining ticks, timer controllers and timer running state.\n */\nexport const useTimer = (\n  totalTicks: TUseTimerProps[\"totalTicks\"],\n  { autoStart = false, interval = 1000, onTick, onFinish, onStart }: TUseTimerProps[\"config\"] = {}\n) => {\n  // eslint-disable-next-line no-console\n  if (totalTicks < 1) console.warn(\"total ticks is 0\");\n  const timeoutIdRef = useRef<NodeJS.Timeout | null>(null);\n\n  const [remainingTicks, setRemainingTicks] = useState(totalTicks);\n  const [isRunning, setIsRunning] = useState(autoStart);\n\n  const elapsedTicks = totalTicks - remainingTicks;\n\n  // const savedCallback = useRef<typeof onTick>();\n\n  const start = useCallback(() => {\n    if (isRunning) return;\n    const isFirstTick = remainingTicks === totalTicks;\n    const hasTimerEnded = remainingTicks === 0;\n    // timer not running\n    setIsRunning(true);\n    // restart the timer\n    if (hasTimerEnded) {\n      setRemainingTicks(totalTicks);\n    }\n    // call the onStart callback if the timer is starting or restarting\n    if (isFirstTick || hasTimerEnded) {\n      onStart?.();\n    }\n  }, [totalTicks, onStart, isRunning, remainingTicks]);\n\n  const stop = useCallback(() => {\n    if (!isRunning) return;\n    // timer is running\n    if (timeoutIdRef.current) {\n      clearTimeout(timeoutIdRef.current);\n    }\n    setIsRunning(false);\n    setRemainingTicks(totalTicks);\n  }, [isRunning, totalTicks]);\n\n  const pause = useCallback(() => {\n    if (!isRunning) return;\n    // timer is running\n    if (timeoutIdRef.current) {\n      clearTimeout(timeoutIdRef.current);\n    }\n    setIsRunning(false);\n  }, [isRunning]);\n\n  useEffect(() => {\n    if (autoStart) {\n      onStart?.();\n    }\n  }, [autoStart, onStart]);\n\n  useEffect(() => {\n    if (!isRunning) return;\n    const currentTick = totalTicks - remainingTicks + 1;\n    // timer is running\n    if (remainingTicks > 0) {\n      if (timeoutIdRef.current) {\n        clearTimeout(timeoutIdRef.current);\n      }\n      timeoutIdRef.current = setTimeout(() => {\n        setRemainingTicks((ticks) => ticks - 1);\n        onTick?.(currentTick);\n      }, interval);\n    } else {\n      setIsRunning(false);\n      onFinish?.();\n    }\n    return () => {\n      if (timeoutIdRef.current) {\n        clearTimeout(timeoutIdRef.current);\n      }\n    };\n  }, [remainingTicks, isRunning, interval, totalTicks, onFinish, onTick]);\n\n  return { remainingTicks, elapsedTicks, isRunning, start, pause, stop };\n};\n","import { useCallback, useEffect } from \"react\";\n\nimport { addSeconds } from \"date-fns\";\n\nimport { handleAsync, useUpdateReminderMutation } from \"shared\";\n\nimport { useTimer } from \"hooks/useTimer\";\n\nimport { useFocusSessionWizardContext } from \"../context\";\n\nexport type TUseFocusSessionProps = Record<string, never>;\n\nexport const useFocusSession = () => {\n  const [updateReminder, updateReminderResult] = useUpdateReminderMutation();\n\n  const isLoading = updateReminderResult.isLoading;\n\n  const isErrored = updateReminderResult.isError;\n\n  const { reminder, focusSessionDuration: totalTicks } = useFocusSessionWizardContext();\n\n  const { id: reminderId } = reminder;\n\n  const handleOnFinish = useCallback(async () => {\n    if (!reminder.currentFocusSession) return;\n\n    const newFocusSession = reminder.currentFocusSession;\n\n    await handleAsync(() =>\n      updateReminder({\n        id: reminder.id,\n        currentFocusSession: null,\n        focusSessions: [...reminder.focusSessions, newFocusSession],\n      })\n    );\n  }, [updateReminder, reminder]);\n\n  const { isRunning, elapsedTicks, start, stop } = useTimer(totalTicks, {\n    onFinish: handleOnFinish,\n  });\n\n  const progress = (elapsedTicks / totalTicks) * 100;\n\n  const handleOnStart = useCallback(async () => {\n    const currentDate = new Date();\n\n    const { error } = await handleAsync(() =>\n      updateReminder({\n        id: reminderId,\n        currentFocusSession: {\n          startTime: new Date().toISOString(),\n          endTime: addSeconds(currentDate, totalTicks).toISOString(),\n        },\n      })\n    );\n\n    if (!error) {\n      start();\n    }\n  }, [updateReminder, reminderId, totalTicks, start]);\n\n  const handleOnStop = useCallback(async () => {\n    if (!reminder.currentFocusSession) {\n      return;\n    }\n    const newFocusSession = {\n      startTime: reminder.currentFocusSession.startTime,\n      endTime: new Date().toISOString(),\n    };\n\n    const { error } = await handleAsync(() => {\n      return updateReminder({\n        id: reminder.id,\n        currentFocusSession: null,\n        focusSessions: [...reminder.focusSessions, newFocusSession],\n      });\n    });\n\n    if (!error) {\n      stop();\n    }\n  }, [updateReminder, reminder, stop]);\n\n  useEffect(() => {\n    // on unmount save the current focus session\n    return () => {\n      if (isRunning) {\n        handleOnStop();\n      }\n    };\n  }, [isRunning, handleOnStop]);\n\n  return {\n    isLoading,\n    isErrored,\n\n    onStart: handleOnStart,\n    onStop: handleOnStop,\n    onFinish: handleOnFinish,\n\n    isRunning,\n    progress,\n    /**\n     * duration of the focus session in seconds\n     */\n    elapsedDuration: elapsedTicks,\n    reminder,\n  };\n};\n","import { FC, PropsWithChildren } from \"react\";\n\nimport { Play, Square } from \"lucide-react\";\n\nimport { truncateText } from \"shared\";\n\nimport { DialogDescription, DialogHeader, DialogTitle, Button } from \"components\";\n\nimport { useFocusSession } from \"./useFocusSession\";\n\nconst FormattedFocusedTime = ({ totalSeconds }: { totalSeconds: number }) => {\n  const hours = Math.floor(totalSeconds / 3600);\n  const minutes = Math.floor((totalSeconds % 3600) / 60);\n  const remainingSeconds = totalSeconds % 60;\n\n  return (\n    <div className=\"flex gap-2 text-sm\">\n      {hours > 0 && <span>{hours} hr</span>}\n      {minutes > 0 && <span>{minutes} min</span>}\n      <span>{remainingSeconds} sec</span>\n    </div>\n  );\n};\n\nexport type TFocusSessionProps = Record<string, never>;\n\nexport const FocusSession: FC<PropsWithChildren<TFocusSessionProps>> = () => {\n  const { isRunning, progress, onStart, onStop, elapsedDuration, reminder } = useFocusSession();\n\n  return (\n    <>\n      <DialogHeader>\n        <DialogTitle className=\"text-left\">Ready, set, focus!</DialogTitle>\n        <DialogDescription className=\"max-w-xs text-left\">\n          🎯 {truncateText(reminder.title, { maxLength: 100 })}\n        </DialogDescription>\n      </DialogHeader>\n\n      <div className=\"flex flex-col items-center justify-center gap-2\">\n        <FocusTimer\n          isRunning={isRunning}\n          progress={progress}\n          onStart={onStart}\n          onStop={onStop}\n          size={240}\n        >\n          <FormattedFocusedTime totalSeconds={elapsedDuration} />\n        </FocusTimer>\n      </div>\n    </>\n  );\n};\n\nexport type TFocusTimerProps = {\n  /**\n   * Progress in range [0-100]\n   */\n  progress: number;\n  /**\n   * Size of the svg\n   */\n  size?: number;\n  /**\n   * Whether the timer is running\n   */\n  isRunning: boolean;\n  onStart?: () => void;\n  onStop?: () => void;\n  children?: React.ReactNode;\n};\n\nconst FocusTimer: React.FC<TFocusTimerProps> = ({ progress, size = 144, onStart, onStop, isRunning, children }) => {\n  const strokeWidth = 16;\n  const radius = (size - strokeWidth) / 2;\n  const circumference = 2 * Math.PI * radius;\n\n  const strokeDashoffset = Math.max(circumference - (progress / 100) * circumference, 0);\n\n  return (\n    <div className=\"flex flex-col items-center gap-4\">\n      <div\n        className=\"relative\"\n        style={{ width: size, height: size }}\n      >\n        <svg\n          width={size}\n          height={size}\n        >\n          <circle\n            className=\"stroke-muted\"\n            fill=\"none\"\n            strokeWidth={strokeWidth}\n            r={radius}\n            cx={size / 2}\n            cy={size / 2}\n          />\n          <circle\n            className=\"stroke-primary\"\n            fill=\"none\"\n            strokeWidth={strokeWidth}\n            r={radius}\n            cx={size / 2}\n            cy={size / 2}\n            style={{\n              strokeDasharray: circumference,\n              strokeDashoffset,\n              strokeLinecap: \"round\",\n              transform: \"rotate(-90deg)\",\n              transformOrigin: \"50% 50%\",\n            }}\n          />\n        </svg>\n        <div className=\"absolute inset-0 flex items-center justify-center\">{children}</div>\n      </div>\n      <Button\n        onClick={isRunning ? onStop : onStart}\n        className=\"h-max rounded-full p-3\"\n      >\n        {isRunning ? (\n          <Square\n            size={16}\n            className={\"fill-current\"}\n          />\n        ) : (\n          <Play\n            size={16}\n            className={\"fill-current\"}\n          />\n        )}\n      </Button>\n    </div>\n  );\n};\n","import { FocusSession } from \"./FocusSession\";\n\nimport { FocusSessionDuration } from \"./FocusSessionDuration\";\n\nexport const Steps = [FocusSessionDuration, FocusSession];\n\nexport const totalSteps = Steps.length;\n","import { FC, PropsWithChildren, useRef } from \"react\";\n\nimport { DialogDescription, DialogHeader, DialogTitle, Button, ValueSetter } from \"components\";\n\nimport { useFocusSessionWizardContext } from \"../context\";\n\nexport type TFocusSessionDurationProps = Record<string, never>;\n\nexport const FocusSessionDuration: FC<PropsWithChildren<TFocusSessionDurationProps>> = () => {\n  const hoursRef = useRef<number>(0);\n  const minutesRef = useRef<number>(1);\n\n  const { nextStep, setFocusSessionDuration } = useFocusSessionWizardContext();\n\n  const handleOnClick = () => {\n    const hours = hoursRef.current;\n    const minutes = minutesRef.current;\n\n    // NOTE: total time in seconds\n    const duration = hours * 60 * 60 + minutes * 60;\n\n    setFocusSessionDuration(duration);\n    nextStep();\n  };\n\n  return (\n    <>\n      <DialogHeader>\n        <DialogTitle className=\"text-left\">Ready, set, focus!</DialogTitle>\n        <DialogDescription className=\"max-w-xs text-left\">Set duration of your focus session</DialogDescription>\n      </DialogHeader>\n      <div className=\"flex flex-col \">\n        <div className=\"mb-4 flex items-center justify-center gap-4\">\n          <ValueSetter\n            initialValue={hoursRef.current}\n            onChange={(value) => (hoursRef.current = value)}\n            max={12}\n          >\n            <span className=\"text-sm\">hours</span>\n          </ValueSetter>\n          <ValueSetter\n            initialValue={minutesRef.current}\n            onChange={(value) => (minutesRef.current = value)}\n            min={1}\n            max={59}\n          >\n            <span className=\"text-sm\">minutes</span>\n          </ValueSetter>\n        </div>\n\n        <Button\n          onClick={handleOnClick}\n          className=\"self-end\"\n          size={\"full\"}\n          autoFocus={true}\n        >\n          Next\n        </Button>\n      </div>\n    </>\n  );\n};\n","import { createContext, useContext, useState } from \"react\";\n\nimport { TReminder } from \"types\";\n\nimport { useMultiStep } from \"hooks\";\n\nimport { totalSteps } from \"./Steps\";\n\nexport type TFocusSessionWizardContext = {\n  /**\n   * focus session duration in seconds\n   */\n  focusSessionDuration: number;\n  setFocusSessionDuration: (seconds: number) => void;\n  reminder: TReminder;\n} & ReturnType<typeof useMultiStep>;\n\ntype TFocusSessionWizardProviderProps = {\n  children: React.ReactNode;\n  reminder: TReminder;\n};\n\nexport const FocusSessionWizardContext = createContext<TFocusSessionWizardContext | null>(null);\n\nexport const FocusSessionWizardProvider = ({ children, reminder }: TFocusSessionWizardProviderProps) => {\n  const [focusSessionDuration, setFocusSessionDuration] =\n    useState<TFocusSessionWizardContext[\"focusSessionDuration\"]>(0);\n\n  return (\n    <FocusSessionWizardContext.Provider\n      value={{\n        focusSessionDuration,\n        setFocusSessionDuration,\n        reminder,\n        ...useMultiStep({ totalSteps }),\n      }}\n    >\n      {children}\n    </FocusSessionWizardContext.Provider>\n  );\n};\n\nexport const useFocusSessionWizardContext = () => {\n  const context = useContext(FocusSessionWizardContext);\n  if (!context) {\n    throw new Error(\"useFocusSessionWizardContext must be used within a FocusSessionWizardProvider\");\n  }\n  return context;\n};\n","import { FC, PropsWithChildren } from \"react\";\n\nimport { useFocusSessionWizardContext } from \"./context\";\nimport { Steps } from \"./Steps\";\n\nexport type TFocusSessionWizardProps = Record<string, never>;\n\nexport const FocusSessionWizard: FC<PropsWithChildren<TFocusSessionWizardProps>> = () => {\n  const { step } = useFocusSessionWizardContext();\n\n  const Component = Steps[step];\n\n  return <Component />;\n};\n","import { FC, PropsWithChildren } from \"react\";\n\nimport { TReminder } from \"types\";\n\nimport { FocusSessionWizard, FocusSessionWizardProvider } from \"./FocusSessionWizard\";\n\nexport type TFocusSessionTrackerProps = {\n  reminder: TReminder;\n};\n\nexport const FocusSessionTracker: FC<PropsWithChildren<TFocusSessionTrackerProps>> = ({ reminder }) => {\n  return (\n    <FocusSessionWizardProvider reminder={reminder}>\n      <FocusSessionWizard />\n    </FocusSessionWizardProvider>\n  );\n};\n","import { FC, PropsWithChildren, useState } from \"react\";\n\nimport { ChevronDown, ChevronUp, Pencil, Trash, Pin, CalendarClock, Timer } from \"lucide-react\";\n\nimport { TReminder, REMINDER_STATE } from \"types\";\n\nimport {\n  Button,\n  Checkbox,\n  Typography,\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DateTimePicker,\n  Dialog,\n  DialogTrigger,\n  DialogContent,\n  DialogTitle,\n  DialogDescription,\n  DialogHeader,\n  DialogClose,\n} from \"components\";\n\nimport { cn } from \"shared\";\n\nimport { AddUpdateItem } from \"../components\";\n\nimport { useReminderItem } from \"./useReminderItem\";\n\nimport { Badges } from \"./Badges\";\nimport { FocusSessionTracker } from \"./FocusSessionTracker\";\n\nexport type TReminderItemProps = {\n  reminder: TReminder;\n  listName?: string;\n};\n\nconst DIALOGS = {\n  DUE_DATE: \"DUE_DATE\",\n  FOCUS_SESSION: \"FOCUS_SESSION\",\n} as const;\n\ntype TDialog = (typeof DIALOGS)[keyof typeof DIALOGS] | null;\n\nexport const ReminderItem: FC<PropsWithChildren<TReminderItemProps>> = ({ reminder, listName }) => {\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n  const [isUpdating, setIsUpdating] = useState(false);\n  const [dialog, setDialog] = useState<TDialog>(null);\n\n  const { handleOnDelete, handleOnUpdate, isLoading } = useReminderItem({\n    reminder,\n  });\n\n  const isMenuDisabled = isLoading;\n\n  const isCompleted = reminder.state === REMINDER_STATE.COMPLETED;\n\n  return (\n    <div\n      className=\"flex flex-col py-2\"\n      data-testid={`reminder-item-${reminder.title}`}\n    >\n      {isUpdating && (\n        <AddUpdateItem\n          className=\"flex-1\"\n          defaultValue={reminder.title}\n          onCancel={() => setIsUpdating(false)}\n          onSave={(title) => {\n            handleOnUpdate({ id: reminder.id, title });\n            setIsUpdating(false);\n          }}\n          testIds={{\n            cancel: `reminder-update-cancel`,\n            save: `reminder-update-save`,\n            text: `reminder-update-text`,\n          }}\n        />\n      )}\n\n      {!isUpdating && (\n        <>\n          <div className=\"flex items-center justify-between gap-2\">\n            <Checkbox\n              checked={isCompleted}\n              className=\"peer\"\n              onClick={() =>\n                handleOnUpdate({\n                  id: reminder.id,\n                  state: isCompleted ? REMINDER_STATE.INACTIVE : REMINDER_STATE.COMPLETED,\n                })\n              }\n              data-testid={`reminder-item-checkbox`}\n            />\n            <Typography\n              variant={\"p\"}\n              affects={\"withoutPMargin\"}\n              className={cn(\n                \"flex-1 overflow-x-scroll text-nowrap py-2 peer-aria-[checked=true]:text-muted-foreground peer-aria-[checked=true]:line-through\"\n              )}\n            >\n              {reminder.title}\n            </Typography>\n            <Dialog>\n              <DropdownMenu\n                open={isDropdownOpen}\n                onOpenChange={setIsDropdownOpen}\n                // NOTE: https://github.com/radix-ui/primitives/issues/1241#issuecomment-1580887090\n                modal={false}\n              >\n                <DropdownMenuTrigger asChild>\n                  <Button\n                    variant=\"outline\"\n                    size=\"icon\"\n                    data-testid={`reminder-item-menu-btn`}\n                    disabled={isMenuDisabled}\n                  >\n                    {isDropdownOpen ? <ChevronUp className=\"icon\" /> : <ChevronDown className=\"icon\" />}\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent\n                  className=\"min-w-min\"\n                  align=\"end\"\n                  onInteractOutside={() => setIsDropdownOpen(false)}\n                  data-testid={`reminder-item-menu`}\n                >\n                  <DropdownMenuItem\n                    data-testid={`reminder-item-menuitem-pin`}\n                    onClick={() =>\n                      handleOnUpdate({\n                        id: reminder.id,\n                        isPinned: !reminder.isPinned,\n                      })\n                    }\n                    className={cn(\"group\", {\n                      \"bg-primary text-secondary\": reminder.isPinned,\n                    })}\n                    disabled={isCompleted}\n                  >\n                    <Pin\n                      size={20}\n                      className={cn(\"group-hover:text-primary\")}\n                      role=\"button\"\n                    />\n                  </DropdownMenuItem>\n\n                  <DropdownMenuSeparator />\n\n                  <DialogTrigger\n                    asChild\n                    onClick={() => {\n                      setDialog(DIALOGS.FOCUS_SESSION);\n                    }}\n                  >\n                    <DropdownMenuItem\n                      className={cn(\"group\")}\n                      disabled={isCompleted}\n                      data-testid={`reminder-item-menuitem-focus-session`}\n                    >\n                      <Timer\n                        size={20}\n                        className={cn(\"group-hover:text-primary\")}\n                        role=\"button\"\n                      />\n                    </DropdownMenuItem>\n                  </DialogTrigger>\n\n                  <DropdownMenuSeparator />\n\n                  <DialogTrigger\n                    asChild\n                    onClick={() => {\n                      setDialog(DIALOGS.DUE_DATE);\n                    }}\n                  >\n                    <DropdownMenuItem\n                      className=\"group\"\n                      disabled={isCompleted}\n                      data-testid={`reminder-item-menuitem-due-date`}\n                    >\n                      <CalendarClock\n                        size={20}\n                        className=\"group-hover:text-primary\"\n                        role=\"button\"\n                      />\n                    </DropdownMenuItem>\n                  </DialogTrigger>\n\n                  <DropdownMenuSeparator />\n\n                  <DropdownMenuItem\n                    data-testid={`reminder-item-menuitem-edit`}\n                    onClick={() => setIsUpdating(true)}\n                    className=\"group\"\n                    disabled={isCompleted}\n                  >\n                    <Pencil\n                      size={20}\n                      className=\"group-hover:text-primary\"\n                      role=\"button\"\n                    />\n                  </DropdownMenuItem>\n\n                  <DropdownMenuSeparator />\n\n                  <DropdownMenuItem\n                    data-testid={`reminder-item-menuitem-delete`}\n                    onClick={() => handleOnDelete(reminder.id)}\n                    className=\"group\"\n                  >\n                    <Trash\n                      size={20}\n                      className=\"group-hover:text-destructive\"\n                      role=\"button\"\n                    />\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n\n              <DialogContent\n                className=\"w-max\"\n                data-testid=\"reminder-item-dialog\"\n              >\n                {dialog === DIALOGS.DUE_DATE && (\n                  <>\n                    <DialogHeader>\n                      <DialogTitle className=\"text-left\">Schedule your reminder</DialogTitle>\n                      <DialogDescription className=\"text-left\">Select reminder's due date and time</DialogDescription>\n                    </DialogHeader>\n\n                    <DateTimePicker\n                      isLoading={isLoading}\n                      date={reminder.dueDate ? new Date(reminder.dueDate) : undefined}\n                    >\n                      {({ selectedDateTime }) => {\n                        return (\n                          <DialogClose asChild>\n                            <Button\n                              size=\"full\"\n                              onClick={() => {\n                                if (selectedDateTime) {\n                                  const dueDate = selectedDateTime.toISOString();\n                                  handleOnUpdate({ id: reminder.id, dueDate });\n                                }\n                              }}\n                              className={cn(isLoading && \"cursor-not-allowed\")}\n                              disabled={!selectedDateTime || isLoading}\n                              data-testid={`reminder-item-save-due-date-btn`}\n                            >\n                              Save\n                            </Button>\n                          </DialogClose>\n                        );\n                      }}\n                    </DateTimePicker>\n                  </>\n                )}\n                {dialog === DIALOGS.FOCUS_SESSION && <FocusSessionTracker reminder={reminder} />}\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          {!isCompleted && (\n            <Badges\n              reminder={reminder}\n              listName={listName}\n            />\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n","import { useCallback } from \"react\";\n\nimport { useDeleteReminderMutation, handleAsync, useUpdateReminderMutation } from \"shared\";\nimport { TReminder } from \"types\";\n\nexport type TUseReminderItemProps = {\n  reminder: TReminder;\n};\n\nexport const useReminderItem = ({ reminder }: TUseReminderItemProps) => {\n  const [deleteReminder, deleteReminderResult] = useDeleteReminderMutation();\n  const [updateReminder, updateReminderResult] = useUpdateReminderMutation();\n\n  const isLoading = deleteReminderResult.isLoading || updateReminderResult.isLoading;\n\n  const isErrored = deleteReminderResult.isError || updateReminderResult.isError;\n\n  const handleOnDelete = useCallback(\n    async (id: Parameters<typeof deleteReminder>[0]) => {\n      await handleAsync(() => deleteReminder(id));\n    },\n    [deleteReminder]\n  );\n\n  const handleOnUpdate = useCallback(\n    async (props: Parameters<typeof updateReminder>[0]) => {\n      await handleAsync(() =>\n        updateReminder({\n          id: props.id,\n          groupId: props.groupId,\n          title: props.title,\n          state: props.state,\n          isPinned: props.isPinned,\n          dueDate: props.dueDate,\n        })\n      );\n    },\n    [updateReminder]\n  );\n\n  return {\n    isLoading,\n    isErrored,\n\n    handleOnDelete,\n    handleOnUpdate,\n  };\n};\n","import { useCallback } from \"react\";\n\nimport { toast } from \"sonner\";\n\nimport {\n  useGetRemindersQuery,\n  useSelectQueryParams,\n  useGetReminderGroupQuery,\n  useCreateReminderMutation,\n  handleAsync,\n} from \"shared\";\n\nexport const useRemindersList = () => {\n  const queryParams = useSelectQueryParams();\n\n  const getRemindersResult = useGetRemindersQuery(queryParams);\n\n  const getReminderGroupResult = useGetReminderGroupQuery(queryParams.groupId as string, {\n    skip: !queryParams.groupId,\n  });\n\n  const [createReminder, createReminderResult] = useCreateReminderMutation();\n\n  const handleOnSave = useCallback(\n    async (props: Parameters<typeof createReminder>[0]) => {\n      await handleAsync(() =>\n        createReminder({\n          groupId: props.groupId,\n          title: props.title,\n        })\n      );\n    },\n    [createReminder]\n  );\n\n  if (getReminderGroupResult.isError) {\n    toast.error(\"Error fetching reminder group\");\n  }\n\n  if (getRemindersResult.isError) {\n    toast.error(\"Error fetching reminders\");\n  }\n\n  if (createReminderResult.isError) {\n    toast.error(\"Error creating reminder\");\n  }\n\n  return {\n    reminders: getRemindersResult.currentData,\n    reminderGroup: getReminderGroupResult.currentData,\n    refetchReminders: getRemindersResult.refetch,\n    handleOnSave,\n  };\n};\n","import { FC, PropsWithChildren, useState } from \"react\";\n\nimport { RefreshCcw } from \"lucide-react\";\n\nimport { Button, Typography } from \"components\";\n\nimport { ReminderItem } from \"../ReminderItem\";\nimport { AddButton, AddUpdateItem } from \"../components\";\n\nimport { useRemindersList } from \"./useRemindersList\";\n\nexport type TRemindersListProps = Record<string, never>;\n\nexport const RemindersList: FC<PropsWithChildren<TRemindersListProps>> = () => {\n  const { reminders, refetchReminders, reminderGroup, handleOnSave } = useRemindersList();\n\n  const [isCreating, setIsCreating] = useState(false);\n\n  return (\n    <div className=\"flex flex-1 flex-col overflow-hidden p-4\">\n      <div className=\"mb-2 flex items-center justify-between gap-2\">\n        <Typography\n          variant={\"h4\"}\n          className=\"flex items-center justify-between overflow-x-scroll text-nowrap py-2 \"\n          data-testid=\"reminder-list-title\"\n        >\n          {reminderGroup?.name || \"All\"}\n        </Typography>\n        <div className=\"flex gap-2\">\n          <Button\n            size={\"icon\"}\n            variant={\"ghost\"}\n            className=\"hover:text-primary\"\n            data-testid=\"reminder-refetch-btn\"\n          >\n            <RefreshCcw\n              className=\"icon\"\n              onClick={refetchReminders}\n            />\n          </Button>\n\n          <AddButton\n            size={\"icon\"}\n            onClick={() => setIsCreating((isCreating) => !isCreating)}\n            disabled={isCreating}\n            data-testid=\"reminder-create-btn\"\n          />\n        </div>\n      </div>\n\n      {reminders && (\n        <div className=\"flex-1 overflow-scroll\">\n          <ul className=\"divide divide-y\">\n            {reminders\n              ?.slice()\n              .sort((a, b) => {\n                return a.isPinned ? -1 : b.isPinned ? 1 : 0;\n              })\n              .map((reminder) => {\n                return (\n                  <li key={reminder.id}>\n                    <ReminderItem\n                      reminder={reminder}\n                      listName={reminderGroup?.name}\n                    />\n                  </li>\n                );\n              })}\n          </ul>\n        </div>\n      )}\n\n      {isCreating && (\n        <AddUpdateItem\n          onCancel={() => setIsCreating(false)}\n          onSave={(title) => {\n            handleOnSave({ title: title, groupId: reminderGroup?.id });\n            setIsCreating(false);\n          }}\n          testIds={{\n            cancel: `reminder-item-create-cancel`,\n            save: `reminder-item-create-save`,\n            text: `reminder-item-create-text`,\n          }}\n        />\n      )}\n    </div>\n  );\n};\n","import { FC, PropsWithChildren, useMemo, useState } from \"react\";\n\nimport { ChevronDown, ChevronUp, Pencil, Trash } from \"lucide-react\";\n\nimport { TReminderGroup } from \"types\";\n\nimport {\n  Button,\n  Typography,\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n} from \"components\";\n\nimport { cn } from \"shared\";\n\nimport { AddUpdateItem } from \"../components\";\n\nimport { useReminderGroupItem } from \"./useReminderGroupItem\";\n\nexport type TReminderGroupItemProps = {\n  reminderGroup?: TReminderGroup;\n};\n\nexport const ReminderGroupItem: FC<PropsWithChildren<TReminderGroupItemProps>> = ({ reminderGroup }) => {\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n  const [isUpdating, setIsUpdating] = useState(false);\n\n  const { handleOnDelete, handleOnItemClick, handleOnSave, isLoading, isSelected } = useReminderGroupItem({\n    reminderGroup,\n  });\n\n  const isMenuDisabled = isLoading;\n\n  const renderItem = useMemo(() => {\n    if (reminderGroup && isUpdating) {\n      return (\n        <AddUpdateItem\n          className=\"flex-1\"\n          defaultValue={reminderGroup.name}\n          onCancel={() => setIsUpdating(false)}\n          onSave={(name) => {\n            handleOnSave({ id: reminderGroup.id, name });\n            setIsUpdating(false);\n          }}\n          testIds={{\n            cancel: `reminder-group-item-update-cancel-${reminderGroup.id}`,\n            save: `reminder-group-item-update-save-${reminderGroup.id}`,\n          }}\n        />\n      );\n    }\n\n    return (\n      <Typography\n        variant={\"p\"}\n        className={cn(\"flex-1 cursor-pointer overflow-x-scroll text-nowrap py-2\", isSelected && \"text-primary\")}\n        onClick={() => handleOnItemClick({ groupId: reminderGroup ? reminderGroup.id : undefined })}\n      >\n        {reminderGroup ? reminderGroup.name : \"All\"}\n      </Typography>\n    );\n  }, [isSelected, handleOnItemClick, isUpdating, reminderGroup, handleOnSave]);\n\n  return (\n    <div\n      className={cn(\"flex cursor-pointer items-center justify-between gap-2 px-1 py-2\")}\n      data-testid={`reminder-group-item-${reminderGroup ? reminderGroup.name : \"all\"}`}\n    >\n      {renderItem}\n\n      {reminderGroup && !isUpdating && (\n        <DropdownMenu\n          open={isDropdownOpen}\n          onOpenChange={setIsDropdownOpen}\n        >\n          <DropdownMenuTrigger asChild>\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              data-testid={`reminder-group-item-menu-btn`}\n              disabled={isMenuDisabled}\n            >\n              {isDropdownOpen ? <ChevronUp className=\"icon\" /> : <ChevronDown className=\"icon\" />}\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent\n            align=\"end\"\n            onInteractOutside={() => setIsDropdownOpen(false)}\n            className=\"min-w-min\"\n            data-testid={`reminder-group-item-menu`}\n          >\n            <DropdownMenuItem\n              onClick={() => setIsUpdating(true)}\n              data-testid={`reminder-group-item-update-${reminderGroup.name}`}\n              className=\"group\"\n            >\n              <Pencil\n                size={20}\n                className=\"group-hover:text-primary\"\n                role=\"button\"\n              />\n            </DropdownMenuItem>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem\n              onClick={() => handleOnDelete(reminderGroup.id)}\n              data-testid={`reminder-group-item-delete-${reminderGroup.name}`}\n              className=\"group\"\n            >\n              <Trash\n                size={20}\n                className=\"group-hover:text-destructive\"\n                role=\"button\"\n              />\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      )}\n    </div>\n  );\n};\n","import { useCallback } from \"react\";\n\nimport {\n  useAppDispatch,\n  setQueryParams,\n  useAppSelector,\n  selectQueryParams,\n  useDeleteReminderGroupMutation,\n  handleAsync,\n  useUpdateReminderGroupMutation,\n} from \"shared\";\nimport { TReminderGroup } from \"types\";\n\nexport type TUseReminderGroupItemProps = {\n  reminderGroup?: TReminderGroup;\n};\n\nexport const useReminderGroupItem = ({ reminderGroup }: TUseReminderGroupItemProps) => {\n  const { groupId } = useAppSelector(selectQueryParams);\n  const isSelected = groupId === reminderGroup?.id;\n\n  const [deleteReminderGroup, deleteReminderGroupResult] = useDeleteReminderGroupMutation();\n  const [updateReminderGroup, updateReminderGroupResult] = useUpdateReminderGroupMutation();\n\n  const dispatch = useAppDispatch();\n\n  const isLoading = deleteReminderGroupResult.isLoading || updateReminderGroupResult.isLoading;\n\n  const isErrored = deleteReminderGroupResult.isError || updateReminderGroupResult.isError;\n\n  const handleOnItemClick = useCallback(\n    (queryParams: Parameters<typeof setQueryParams>[0]) => {\n      // update the query params value in store, causing a re-fetch of the reminders\n      dispatch(setQueryParams(queryParams));\n    },\n    [dispatch]\n  );\n\n  const handleOnDelete = useCallback(\n    async (id: Parameters<typeof deleteReminderGroup>[0]) => {\n      await handleAsync(() => deleteReminderGroup(id));\n    },\n    [deleteReminderGroup]\n  );\n\n  const handleOnSave = useCallback(\n    async (props: Parameters<typeof updateReminderGroup>[0]) => {\n      await handleAsync(() =>\n        updateReminderGroup({\n          id: props.id,\n          name: props.name,\n        })\n      );\n    },\n    [updateReminderGroup]\n  );\n\n  return {\n    isSelected,\n    isLoading,\n    isErrored,\n    handleOnItemClick,\n    handleOnDelete,\n\n    handleOnSave,\n  };\n};\n","import { FC, PropsWithChildren, useState } from \"react\";\n\nimport { ReminderGroupItem } from \"../ReminderGroupItem\";\nimport { AddButton, AddUpdateItem } from \"../components\";\n\nimport { useReminderGroupsList } from \"./useReminderGroupsList\";\n\nexport type TReminderGroupsListProps = Record<string, never>;\n\nexport const ReminderGroupsList: FC<PropsWithChildren<TReminderGroupsListProps>> = () => {\n  const [isCreating, setIsCreating] = useState(false);\n\n  const { handleOnSave, reminderGroups } = useReminderGroupsList();\n\n  return (\n    <div className=\"flex min-w-[200px] flex-1 flex-col overflow-hidden p-4\">\n      <div className=\"mb-2 mt-1 flex justify-center\">\n        <AddButton\n          size={\"full\"}\n          onClick={() => setIsCreating((isCreating) => !isCreating)}\n          disabled={isCreating}\n          data-testid={\"reminder-group-create-btn\"}\n        >\n          Add List\n        </AddButton>\n      </div>\n\n      {reminderGroups && (\n        <div className=\"flex-1 overflow-scroll\">\n          <ul className=\"divide divide-y divide-accent-dark\">\n            <li key=\"all\">\n              <ReminderGroupItem />\n            </li>\n            {reminderGroups &&\n              reminderGroups.map((reminderGroup) => (\n                <li key={reminderGroup.id}>\n                  <ReminderGroupItem reminderGroup={reminderGroup} />\n                </li>\n              ))}\n          </ul>\n        </div>\n      )}\n\n      {isCreating && (\n        <AddUpdateItem\n          onCancel={() => setIsCreating(false)}\n          onSave={(name) => {\n            handleOnSave({ name: name });\n            setIsCreating(false);\n          }}\n          testIds={{\n            cancel: `reminder-group-create-cancel`,\n            save: `reminder-group-create-save`,\n            text: `reminder-group-create-text`,\n          }}\n        />\n      )}\n    </div>\n  );\n};\n","import { useCallback } from \"react\";\n\nimport { toast } from \"sonner\";\n\nimport { useGetReminderGroupsQuery, useCreateReminderGroupMutation, handleAsync } from \"shared\";\n\nexport const useReminderGroupsList = () => {\n  const getReminderGroupsResult = useGetReminderGroupsQuery();\n\n  const [createReminderGroup, createReminderGroupResult] = useCreateReminderGroupMutation();\n\n  const handleOnSave = useCallback(\n    async (props: Parameters<typeof createReminderGroup>[0]) => {\n      await handleAsync(() =>\n        createReminderGroup({\n          name: props.name,\n        })\n      );\n    },\n    [createReminderGroup]\n  );\n\n  if (createReminderGroupResult.isError) {\n    toast.error(\"Error creating reminder group\");\n  }\n\n  if (getReminderGroupsResult.isError) {\n    toast.error(\"Error fetching reminder groups\");\n  }\n\n  return {\n    reminderGroups: getReminderGroupsResult.data,\n    handleOnSave,\n  };\n};\n","import { FC, PropsWithChildren } from \"react\";\n\nimport { Panel, PanelGroup, PanelResizeHandle } from \"react-resizable-panels\";\nimport { EllipsisVertical, EllipsisIcon } from \"lucide-react\";\n\nimport { useBreakpoint } from \"hooks\";\nimport { cn, BREAKPOINTS } from \"shared\";\n\nimport { RemindersList } from \"./RemindersList\";\n\nimport { ReminderGroupsList } from \"./ReminderGroupsList\";\n\nexport type TRemindersProps = Record<string, never>;\n\nexport const Reminders: FC<PropsWithChildren<TRemindersProps>> = () => {\n  const { isBelowMd } = useBreakpoint<keyof typeof BREAKPOINTS>(\"md\", BREAKPOINTS);\n\n  return (\n    <div\n      className=\"mx-auto h-full max-w-screen-lg p-2 md:p-8\"\n      data-testid=\"reminders\"\n    >\n      <div className=\"flex h-full flex-col rounded border-2 border-primary shadow-lg lg:h-3/4\">\n        <PanelGroup\n          direction={isBelowMd ? \"vertical\" : \"horizontal\"}\n          className=\"flex-1\"\n          autoSaveId={\"reminders-panel-group\"}\n        >\n          <Panel\n            maxSize={50}\n            className=\"flex flex-col\"\n          >\n            <ReminderGroupsList />\n          </Panel>\n\n          <PanelResizeHandle className=\"group\">\n            <div\n              className={cn(\n                \"flex h-full w-full items-center border-primary group-hover:bg-secondary group-hover:text-primary\",\n                isBelowMd ? \"border-b-2\" : \"border-r-2\"\n              )}\n            >\n              {isBelowMd ? <EllipsisIcon className=\"icon mx-auto\" /> : <EllipsisVertical className=\"icon mx-auto\" />}\n            </div>\n          </PanelResizeHandle>\n\n          <Panel className=\"flex flex-col\">\n            <RemindersList />\n          </Panel>\n        </PanelGroup>\n      </div>\n    </div>\n  );\n};\n","import { useMediaQuery } from \"react-responsive\";\n\ntype TKeyAbove<K extends string> = `isAbove${Capitalize<K>}`;\ntype TKeyBelow<K extends string> = `isBelow${Capitalize<K>}`;\n\n/**\n * Custom hook that returns breakpoint information based on the provided breakpoint key and breakpoints object.\n * @param breakpointKey - The key representing the desired breakpoint. Eg. \"sm\"\n * @param BREAKPOINTS - An object containing key-value pairs of breakpoints. Eg. { sm: \"576px\", md: \"768px\" }\n * @returns An object containing the breakpoint value, and boolean flags indicating if the viewport is above or below the specified breakpoint.\n *\n * @example\n * const BREAKPOINTS = { sm: \"576px\", md: \"768px\" };\n * const { isBelowMd, isAboveMd, md } = useBreakpoint<keyof typeof BREAKPOINTS>(\"md\", BREAKPOINTS);\n *\n * if (isBelowMd) {\n *  // Do something\n * }\n * if (isAboveMd) {\n *  // Do something\n * }\n */\nexport function useBreakpoint<K extends string>(breakpointKey: K, BREAKPOINTS: Record<K, string>) {\n  const breakpointValue = BREAKPOINTS[breakpointKey];\n\n  const isBelow = useMediaQuery({\n    query: `(max-width: ${breakpointValue})`,\n  });\n\n  const capitalizedKey = breakpointKey[0].toUpperCase() + breakpointKey.substring(1);\n\n  return {\n    [breakpointKey]: Number(String(breakpointValue).replace(/[^0-9]/g, \"\")),\n    [`isAbove${capitalizedKey}`]: !isBelow,\n    [`isBelow${capitalizedKey}`]: isBelow,\n  } as Record<K, number> & Record<TKeyAbove<K> | TKeyBelow<K>, boolean>;\n}\n"],"names":["REMINDER_STATE","INACTIVE","INPROGRESS","COMPLETED","ARCHIVED","useMultiStep","_ref","totalSteps","initialStep","Error","step","setStep","useState","nextStep","useCallback","prevStep","setStepTo","newStep","isFirstStep","isLastStep","AddButton","children","className","props","_jsxs","Button","variant","cn","_jsx","Plus","AddUpdateItem","onCancel","onSave","defaultValue","testIds","inputRef","useRef","handleOnSave","_inputRef$current","current","value","handleOnCancel","Input","ref","autoFocus","required","text","onClick","size","save","Check","cancel","X","formatTimeSpent","milliseconds","duration","intervalToDuration","start","end","map","unit","concat","charAt","filter","Boolean","join","Badges","_reminder$group","reminder","listName","isOverdue","dueDate","Date","totalDurationMs","useMemo","focusSessions","reduce","acc","curr","startTime","endTime","differenceInMilliseconds","group","name","Badge","format","useFocusSession","updateReminder","updateReminderResult","useUpdateReminderMutation","isLoading","isErrored","isError","focusSessionDuration","totalTicks","useFocusSessionWizardContext","id","reminderId","handleOnFinish","async","currentFocusSession","newFocusSession","handleAsync","isRunning","elapsedTicks","stop","autoStart","interval","onTick","onFinish","onStart","arguments","length","undefined","console","warn","timeoutIdRef","remainingTicks","setRemainingTicks","setIsRunning","isFirstTick","hasTimerEnded","clearTimeout","pause","useEffect","currentTick","setTimeout","ticks","useTimer","progress","handleOnStart","currentDate","error","toISOString","addSeconds","handleOnStop","onStop","elapsedDuration","FormattedFocusedTime","totalSeconds","hours","Math","floor","minutes","remainingSeconds","FocusTimer","_ref2","radius","circumference","PI","strokeDashoffset","max","style","width","height","fill","strokeWidth","r","cx","cy","strokeDasharray","strokeLinecap","transform","transformOrigin","Square","Play","Steps","FocusSessionDuration","hoursRef","minutesRef","setFocusSessionDuration","_Fragment","DialogHeader","DialogTitle","DialogDescription","ValueSetter","initialValue","onChange","min","handleOnClick","FocusSession","truncateText","title","maxLength","FocusSessionWizardContext","createContext","FocusSessionWizardProvider","Provider","context","useContext","FocusSessionWizard","Component","FocusSessionTracker","DIALOGS","ReminderItem","isDropdownOpen","setIsDropdownOpen","isUpdating","setIsUpdating","dialog","setDialog","handleOnDelete","handleOnUpdate","deleteReminder","deleteReminderResult","useDeleteReminderMutation","groupId","state","isPinned","useReminderItem","isMenuDisabled","isCompleted","Checkbox","checked","Typography","affects","Dialog","DropdownMenu","open","onOpenChange","modal","DropdownMenuTrigger","asChild","disabled","ChevronUp","ChevronDown","DropdownMenuContent","align","onInteractOutside","DropdownMenuItem","Pin","role","DropdownMenuSeparator","DialogTrigger","Timer","CalendarClock","Pencil","Trash","DialogContent","DateTimePicker","date","selectedDateTime","DialogClose","RemindersList","reminders","refetchReminders","reminderGroup","useRemindersList","queryParams","useSelectQueryParams","getRemindersResult","useGetRemindersQuery","getReminderGroupResult","useGetReminderGroupQuery","skip","createReminder","createReminderResult","useCreateReminderMutation","toast","currentData","refetch","isCreating","setIsCreating","RefreshCcw","slice","sort","a","b","ReminderGroupItem","handleOnItemClick","isSelected","useAppSelector","selectQueryParams","deleteReminderGroup","deleteReminderGroupResult","useDeleteReminderGroupMutation","updateReminderGroup","updateReminderGroupResult","useUpdateReminderGroupMutation","dispatch","useAppDispatch","setQueryParams","useReminderGroupItem","renderItem","ReminderGroupsList","reminderGroups","useReminderGroupsList","getReminderGroupsResult","useGetReminderGroupsQuery","createReminderGroup","createReminderGroupResult","useCreateReminderGroupMutation","data","Reminders","isBelowMd","breakpointKey","BREAKPOINTS","breakpointValue","isBelow","useMediaQuery","query","capitalizedKey","toUpperCase","substring","Number","String","replace","useBreakpoint","PanelGroup","direction","autoSaveId","Panel","maxSize","PanelResizeHandle","EllipsisIcon","EllipsisVertical"],"sourceRoot":""}