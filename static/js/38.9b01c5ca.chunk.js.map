{"version":3,"file":"static/js/38.9b01c5ca.chunk.js","mappings":"+KAmBO,MAAMA,EAAyB,WAA6E,IAAnEC,EAA2DC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC7G,MAAMG,EAAU,CAAC,MAAO,MAAO,QAAS,OAAQ,UAuBhD,OArBeC,EAAAA,EAAAA,IAAa,CAC1BC,QAASN,EAAOM,UAAW,EAC3BC,eAAqB,OAANP,QAAM,IAANA,OAAM,EAANA,EAAQO,iBAAiB,EACxCC,aAAmB,OAANR,QAAM,IAANA,OAAM,EAANA,EAAQQ,cAAe,cACpCC,MAAAA,GACEC,KAAKC,OAASX,EAAOW,QAAU,EAE/B,IAAK,MAAMC,IAAU,EAACC,EAAAA,EAAAA,IAAU,MAC9B,IAAK,MAAMC,KAAUV,EAEnBM,KAAKI,GAAQ,GAADC,OAAIH,EAAM,MAAKI,MAAOC,EAAGC,KACnC,MAAOC,EAAQC,EAASC,SAAcC,OAAOC,+BAA+BL,GAE5E,OAAO,IAAIM,EAAAA,GAAeL,EAAQC,EAASC,EAAK,IAKtDX,KAAKe,aACP,GAGJ,C","sources":["services/mocker/mirage/proxyServer.ts"],"sourcesContent":["import { Response as MirageResponse, createServer, Request as MirageRequest } from \"miragejs\";\n\nimport { urlPrefix } from \"shared\";\n\nimport { TRunMirageServerConfig } from \"./server\";\n\nexport type TMirageRequest = Request & MirageRequest;\n\nexport type THandleProxyMirageServerRequest = (\n  request: TMirageRequest\n) => Promise<ReturnType<MirageResponse[\"toRackResponse\"]>>;\n\ndeclare global {\n  // eslint-disable-next-line\n  interface Window {\n    handleProxyMirageServerRequest: THandleProxyMirageServerRequest;\n  }\n}\n\nexport const startProxyMirageServer = function (config: Omit<TRunMirageServerConfig, \"withDefaultScenario\"> = {}) {\n  const methods = [\"get\", \"put\", \"patch\", \"post\", \"delete\"];\n\n  const server = createServer({\n    logging: config.logging || true,\n    trackRequests: config?.trackRequests || false,\n    environment: config?.environment || \"development\",\n    routes() {\n      this.timing = config.timing || 0;\n\n      for (const domain of [urlPrefix(\"/\")]) {\n        for (const method of methods) {\n          // @ts-ignore\n          this[method](`${domain}*`, async (_, request: TMirageRequest) => {\n            const [status, headers, body] = await window.handleProxyMirageServerRequest(request);\n\n            return new MirageResponse(status, headers, body);\n          });\n        }\n      }\n\n      this.passthrough();\n    },\n  });\n  return server;\n};\n"],"names":["startProxyMirageServer","config","arguments","length","undefined","methods","createServer","logging","trackRequests","environment","routes","this","timing","domain","urlPrefix","method","concat","async","_","request","status","headers","body","window","handleProxyMirageServerRequest","MirageResponse","passthrough"],"sourceRoot":""}