{"version":3,"file":"static/js/321.770beebf.chunk.js","mappings":"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","sources":["services/mocker/msw/db.ts","services/mocker/msw/controllers/reminder.ts","services/mocker/msw/controllers/reminderGroup.ts","services/mocker/msw/server.ts","services/mocker/msw/handlers.ts","services/mocker/utils.ts","types/Reminders.ts"],"sourcesContent":["import { factory, nullable, oneOf, primaryKey, drop } from \"@mswjs/data\";\nimport { NullableProperty } from \"@mswjs/data/lib/nullable\";\n\nimport { uuid } from \"shared\";\n\nimport { REMINDER_STATE } from \"types\";\n\nexport const db = factory({\n  reminder: {\n    id: primaryKey(uuid),\n    title: () => {\n      return `Reminder ${uuid({ simple: true })}`;\n    },\n\n    isPinned: () => false,\n    state: () => REMINDER_STATE.INACTIVE,\n    group: nullable(oneOf(\"reminderGroup\")),\n    createdAt: () => new Date().toISOString(),\n    updatedAt: () => new Date().toISOString(),\n    dueDate: nullable<string>(() => null),\n    focusSessions: () => [],\n    // FIX: nullable(Object) returning {} instead of null\n    currentFocusSession: nullable<any>(\n      {\n        startTime: () => String,\n        endTime: () => String,\n      },\n      { defaultsToNull: true }\n    ) as unknown as NullableProperty<any>,\n  },\n\n  reminderGroup: {\n    id: primaryKey(uuid),\n    name: () => `Reminder Group ${uuid({ simple: true })}`,\n    createdAt: () => new Date().toISOString(),\n    updatedAt: () => new Date().toISOString(),\n  },\n});\n\nexport type TDb = typeof db;\n\nexport const dropDb = (db: TDb) => {\n  drop(db);\n};\n","import { HttpResponse, http } from \"msw\";\n\nimport {\n  TCreateReminderRequestPayload,\n  TCreateReminderResponsePayload,\n  TDeleteReminderRequestPayload,\n  TDeleteReminderResponsePayload,\n  TReminder,\n  THTTPError,\n  TUpdateReminderRequestPayload,\n  TUpdateReminderResponsePayload,\n} from \"types\";\n\nimport { getUrlSearchParams, urlPrefix } from \"shared\";\n\nimport { TSetupController } from \"./types\";\n\nexport const setupRemindersController: TSetupController = ({ db }) => {\n  const getReminders = http.get(urlPrefix(\"/reminders\"), ({ request }) => {\n    const reminders = db.reminder.getAll();\n\n    const searchParams = getUrlSearchParams(request.url);\n\n    let data: TReminder[] = reminders;\n\n    if (searchParams[\"groupId\"]) {\n      data = data.filter((reminder) => reminder?.group?.id === searchParams[\"groupId\"]);\n    }\n\n    if (searchParams[\"state\"]) {\n      data = data.filter((reminder) => reminder.state === searchParams[\"state\"]);\n    }\n\n    return HttpResponse.json({ data }, { status: 200 });\n  });\n\n  const createReminder = http.post<never, TCreateReminderRequestPayload, TCreateReminderResponsePayload | THTTPError>(\n    urlPrefix(\"/reminders\"),\n    async ({ request }) => {\n      const { title, groupId } = await request.json();\n\n      const group = db.reminderGroup.getAll().find((group) => group.id === groupId);\n\n      if (groupId && !group) {\n        return HttpResponse.json({ message: `Reminder Group with id ${groupId} not found!` }, { status: 404 });\n      }\n\n      const newReminder = db.reminder.create({ title, group });\n\n      return HttpResponse.json({ data: newReminder }, { status: 201 });\n    }\n  );\n\n  const deleteReminder = http.delete<{ id: TDeleteReminderRequestPayload }, never, TDeleteReminderResponsePayload>(\n    urlPrefix(\"/reminders/:id\"),\n    ({ params }) => {\n      const reminder = db.reminder.findFirst({\n        where: {\n          id: {\n            equals: params.id,\n          },\n        },\n      });\n\n      if (!reminder) {\n        return HttpResponse.json({ message: `Reminder with id ${params.id} not found!` }, { status: 404 });\n      }\n\n      db.reminder.delete({\n        where: {\n          id: {\n            equals: params.id,\n          },\n        },\n      });\n\n      return HttpResponse.json({ message: `Reminder with id ${params.id} deleted!` }, { status: 200 });\n    }\n  );\n\n  const updateReminder = http.patch<\n    { id: TUpdateReminderRequestPayload[\"id\"] },\n    TUpdateReminderRequestPayload,\n    TUpdateReminderResponsePayload | THTTPError\n  >(urlPrefix(\"/reminders/:id\"), async ({ request, params }) => {\n    const { groupId, ...requestBody } = await request.json();\n\n    const reminder = db.reminder.findFirst({\n      where: {\n        id: {\n          equals: params.id,\n        },\n      },\n    });\n\n    if (!reminder) {\n      return HttpResponse.json({ message: `Reminder with id ${params.id} not found!` }, { status: 404 });\n    }\n\n    const group = db.reminderGroup.findFirst({\n      where: {\n        id: {\n          equals: groupId,\n        },\n      },\n    });\n\n    if (groupId && !group) {\n      return HttpResponse.json({ message: `Reminder Group with id ${groupId} not found!` }, { status: 404 });\n    }\n\n    const updatedReminder = db.reminder.update({\n      where: {\n        id: {\n          equals: params.id,\n        },\n      },\n      data: {\n        ...(requestBody as any),\n      },\n    }) as TReminder;\n\n    return HttpResponse.json({ data: updatedReminder }, { status: 200 });\n  });\n\n  return [getReminders, createReminder, deleteReminder, updateReminder];\n};\n","import { HttpResponse, http } from \"msw\";\n\nimport {\n  TCreateReminderGroupRequestPayload,\n  TCreateReminderGroupResponsePayload,\n  TDeleteReminderGroupRequestPayload,\n  TDeleteReminderGroupResponsePayload,\n  TUpdateReminderGroupRequestPayload,\n  TUpdateReminderGroupResponsePayload,\n  TGetReminderGroupRequestPayload,\n  TGetReminderGroupResponsePayload,\n  TReminderGroup,\n  THTTPError,\n} from \"types\";\n\nimport { urlPrefix } from \"shared\";\n\nimport { TSetupController } from \"./types\";\n\nexport const setupReminderGroupsController: TSetupController = ({ db }) => {\n  const getReminderGroups = http.get(urlPrefix(\"/reminder-groups\"), () => {\n    return HttpResponse.json({ data: db.reminderGroup.getAll() }, { status: 200 });\n  });\n\n  const getReminderGroup = http.get<\n    { id: TGetReminderGroupRequestPayload },\n    never,\n    TGetReminderGroupResponsePayload | THTTPError\n  >(urlPrefix(\"/reminder-groups/:id\"), ({ params }) => {\n    const reminderGroup = db.reminderGroup.findFirst({\n      where: {\n        id: {\n          equals: params.id,\n        },\n      },\n    });\n\n    if (!reminderGroup) {\n      return HttpResponse.json({ message: `Reminder Group with id ${params.id} not found!` }, { status: 404 });\n    }\n\n    return HttpResponse.json({ data: reminderGroup }, { status: 200 });\n  });\n\n  const createReminderGroup = http.post<\n    never,\n    TCreateReminderGroupRequestPayload,\n    TCreateReminderGroupResponsePayload | THTTPError\n  >(urlPrefix(\"/reminder-groups\"), async ({ request }) => {\n    const requestBody = await request.json();\n\n    const reminderGroup = db.reminderGroup.create({\n      ...requestBody,\n    });\n\n    return HttpResponse.json({ data: reminderGroup }, { status: 201 });\n  });\n\n  const deleteReminderGroup = http.delete<\n    { id: TDeleteReminderGroupRequestPayload },\n    never,\n    TDeleteReminderGroupResponsePayload | THTTPError\n  >(urlPrefix(\"/reminder-groups/:id\"), ({ params }) => {\n    const reminderGroup = db.reminderGroup.findFirst({\n      where: {\n        id: {\n          equals: params.id,\n        },\n      },\n    });\n\n    if (!reminderGroup) {\n      return HttpResponse.json({ message: `Reminder Group with id ${params.id} not found!` }, { status: 404 });\n    }\n\n    db.reminderGroup.delete({\n      where: {\n        id: {\n          equals: params.id,\n        },\n      },\n    });\n\n    return HttpResponse.json({ message: `Reminder Group with id ${params.id} deleted!` }, { status: 200 });\n  });\n\n  const updateReminderGroup = http.patch<\n    { id: TUpdateReminderGroupRequestPayload[\"id\"] },\n    TUpdateReminderGroupRequestPayload,\n    TUpdateReminderGroupResponsePayload | THTTPError\n  >(urlPrefix(\"/reminder-groups/:id\"), async ({ request, params }) => {\n    const requestBody = await request.json();\n\n    const reminderGroup = db.reminderGroup.findFirst({\n      where: {\n        id: {\n          equals: params.id,\n        },\n      },\n    });\n\n    if (!reminderGroup) {\n      return HttpResponse.json({ message: `Reminder Group with id ${params.id} not found!` }, { status: 404 });\n    }\n\n    const updatedReminder = db.reminderGroup.update({\n      where: {\n        id: {\n          equals: params.id,\n        },\n      },\n      data: {\n        ...requestBody,\n      },\n    }) as TReminderGroup;\n\n    return HttpResponse.json({ data: updatedReminder }, { status: 200 });\n  });\n\n  return [getReminderGroups, getReminderGroup, createReminderGroup, deleteReminderGroup, updateReminderGroup];\n};\n","import { setupWorker } from \"msw/browser\";\n\nimport { generateRandomFocusSessions } from \"../utils\";\n\nimport { TScenariosBuilder } from \"../types\";\n\nimport { db, TDb } from \"./db\";\n\nimport { setupHandlers } from \"./handlers\";\n\nconst PUBLIC_URL = process.env.REACT_APP_PUBLIC_URL;\n\nexport const handlers = setupHandlers({ db });\n\nexport const startMswWorker = async () => {\n  const worker = setupWorker(...handlers);\n\n  return await worker.start({\n    onUnhandledRequest: \"bypass\",\n    serviceWorker: {\n      url: `${PUBLIC_URL}mockServiceWorker.js`,\n    },\n  });\n};\n\nexport const runServer = async (config?: { withDefaultScenario?: boolean }) => {\n  if (config?.withDefaultScenario) {\n    buildScenarios(db)\n      .withReminders(5)\n      .withReminderGroups({ reminderGroups: [\"Work\", \"Home\", \"Personal\"], remindersPerGroup: 2 })\n      .withFocusSessions();\n  }\n\n  return await startMswWorker();\n};\n\nexport const buildScenarios = (db: TDb) => {\n  const builder: TScenariosBuilder = {\n    withReminders: (n = 10) => {\n      for (let i = 0; i < n; i++) {\n        db.reminder.create();\n      }\n\n      return builder;\n    },\n    withReminderGroups: ({ reminderGroups = [\"Work\", \"Home\", \"Personal\"], remindersPerGroup = 10 }) => {\n      reminderGroups.forEach((groupName) => {\n        const group = db.reminderGroup.create({ name: groupName });\n\n        for (let i = 0; i < remindersPerGroup; i++) {\n          db.reminder.create({ group });\n        }\n      });\n\n      return builder;\n    },\n\n    withFocusSessions: () => {\n      db.reminder.getAll().forEach((reminder) => {\n        const n = Math.floor(Math.random() * (10 - 0 + 1)) + 0;\n\n        const focusSessions = generateRandomFocusSessions(n) as never[];\n\n        db.reminder.update({\n          where: {\n            id: {\n              equals: reminder.id,\n            },\n          },\n          data: {\n            ...reminder,\n            focusSessions,\n          },\n        });\n      });\n\n      return builder;\n    },\n  };\n  return builder;\n};\n","import { setupReminderGroupsController, setupRemindersController, TSetupController } from \"./controllers\";\n\nexport const setupHandlers = (config: Parameters<TSetupController>[0]) => [\n  ...setupReminderGroupsController(config),\n  ...setupRemindersController(config),\n];\n","import { subDays, addMinutes } from \"date-fns\";\n\nimport { TReminder } from \"types\";\n\nimport { generateUniqueRandomNumbers } from \"shared\";\n\nexport function generateRandomFocusSessions(\n  numberOfEntries: number,\n  maxDaysInPast: number = 30\n): TReminder[\"focusSessions\"] {\n  const now = new Date();\n  const history: TReminder[\"focusSessions\"] = [];\n\n  const randomPastDays = generateUniqueRandomNumbers(numberOfEntries, 1, maxDaysInPast);\n\n  for (let i = 0; i < numberOfEntries; i++) {\n    // Generate a random start date within the last maxDaysInPast days\n    const startDate = subDays(now, randomPastDays[i]);\n\n    // Add a random number of minutes (0 to 120) to get the end time\n    const randomMinutes = Math.floor(Math.random() * 121);\n    const endDate = addMinutes(startDate, randomMinutes);\n\n    // Ensure the end time is not in the future\n    const adjustedEndDate = endDate > now ? now : endDate;\n\n    const entry: TReminder[\"focusSessions\"][number] = {\n      startTime: startDate.toISOString(),\n      endTime: adjustedEndDate.toISOString(),\n    };\n\n    history.push(entry);\n  }\n\n  // Sort the history by start time, most recent last\n  return history.sort((a, b) => new Date(a.startTime).getTime() - new Date(b.startTime).getTime());\n}\n","export const REMINDER_STATE = {\n  INACTIVE: \"INACTIVE\",\n  INPROGRESS: \"INPROGRESS\",\n  COMPLETED: \"COMPLETED\",\n  ARCHIVED: \"ARCHIVED\",\n} as const;\n\nexport type TReminderState = (typeof REMINDER_STATE)[keyof typeof REMINDER_STATE];\n\nexport type TReminderFocusSession = {\n  startTime: string;\n  endTime: string;\n};\n\nexport type TReminder = {\n  id: string;\n  title: string;\n  /**\n   * Current state of the reminder.\n   *\n   * @example \"IN_ACTIVE\" | \"IN_PROGRESS\" | \"COMPLETED\"\n   */\n  state: TReminderState;\n  /**\n   * Indicates if the reminder is pinned on top.\n   */\n  isPinned: boolean;\n  /**\n   * Date and time the reminder was created. (ISO 8601 format)\n   */\n  createdAt: string;\n  /**\n   * Date and time the reminder was last updated. (ISO 8601 format)\n   */\n  updatedAt: string;\n  /**\n   * Optional reminder group this reminder belongs to.\n   */\n  group: TReminderGroup | null;\n  /**\n   * Due date and time for the reminder. (ISO 8601 format)\n   *\n   * @example \"2021-09-30T00:00:00.000Z\"\n   */\n  dueDate: string | null;\n  currentFocusSession: {\n    /**\n     * date and time when focus session was started for this reminder. (ISO 8601 format)\n     */\n    startTime: string;\n    /**\n     * date and time the focus session stopped for this reminder. (ISO 8601 format)\n     */\n    endTime: string;\n  } | null;\n  /**\n   * Array to store history of multiple focus sessions for this reminder.\n   * Each session includes start time and end time.\n   */\n  focusSessions: TReminderFocusSession[];\n};\n\nexport type TReminderGroup = {\n  id: string;\n  name: string;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type TMessageResponsePaylaod = {\n  message: string;\n};\n\nexport type TDataResponsePayload<T> = {\n  data: T;\n};\n\n/**\n * Error\n */\nexport type THTTPError = {\n  message: string;\n};\n\n/**\n * Reminder\n */\nexport type TGetRemindersQueryParams = Partial<{\n  groupId: TReminderGroup[\"id\"];\n  state: TReminder[\"state\"];\n}>;\n\nexport type TGetRemindersResponsePayload = TDataResponsePayload<TReminder[]>;\n\nexport type TGetReminderRequestPayload = TReminder[\"id\"];\n\nexport type TGetReminderResponsePayload = TDataResponsePayload<TReminder>;\n\nexport type TCreateReminderRequestPayload = Pick<TReminder, \"title\"> & Partial<{ groupId: TReminderGroup[\"id\"] }>;\n\nexport type TCreateReminderResponsePayload = TDataResponsePayload<TReminder>;\n\nexport type TUpdateReminderRequestPayload = Pick<TReminder, \"id\"> &\n  Partial<\n    Pick<TReminder, \"title\" | \"state\" | \"isPinned\" | \"dueDate\" | \"currentFocusSession\" | \"focusSessions\"> & {\n      groupId: TReminderGroup[\"id\"];\n    }\n  >;\n\nexport type TUpdateReminderResponsePayload = TDataResponsePayload<TReminder>;\n\nexport type TDeleteReminderRequestPayload = TReminder[\"id\"];\n\nexport type TDeleteReminderResponsePayload = TMessageResponsePaylaod;\n\n/**\n * Reminder Group\n */\nexport type TGetReminderGroupsResponsePayload = TDataResponsePayload<TReminderGroup[]>;\n\nexport type TGetReminderGroupRequestPayload = TReminderGroup[\"id\"];\n\nexport type TGetReminderGroupResponsePayload = TDataResponsePayload<TReminderGroup>;\n\nexport type TCreateReminderGroupRequestPayload = Pick<TReminderGroup, \"name\">;\n\nexport type TCreateReminderGroupResponsePayload = TDataResponsePayload<TReminderGroup>;\n\nexport type TUpdateReminderGroupRequestPayload = Pick<TReminderGroup, \"id\"> & Partial<Pick<TReminderGroup, \"name\">>;\n\nexport type TUpdateReminderGroupResponsePayload = TDataResponsePayload<TReminderGroup>;\n\nexport type TDeleteReminderGroupRequestPayload = TReminderGroup[\"id\"];\n\nexport type TDeleteReminderGroupResponsePayload = TMessageResponsePaylaod;\n"],"names":["db","factory","reminder","id","primaryKey","uuid","title","concat","simple","isPinned","state","REMINDER_STATE","INACTIVE","group","nullable","oneOf","createdAt","Date","toISOString","updatedAt","dueDate","focusSessions","currentFocusSession","startTime","String","endTime","defaultsToNull","reminderGroup","name","setupRemindersController","_ref","http","get","urlPrefix","_ref2","request","reminders","getAll","searchParams","getUrlSearchParams","url","data","filter","_reminder$group","HttpResponse","json","status","post","async","_ref3","groupId","find","message","newReminder","create","delete","_ref4","params","findFirst","where","equals","patch","_ref5","requestBody","updatedReminder","update","setupReminderGroupsController","handlers","config","runServer","withDefaultScenario","buildScenarios","withReminders","withReminderGroups","reminderGroups","remindersPerGroup","withFocusSessions","worker","setupWorker","start","onUnhandledRequest","serviceWorker","process","startMswWorker","builder","n","arguments","length","undefined","i","forEach","groupName","Math","floor","random","generateRandomFocusSessions","numberOfEntries","maxDaysInPast","now","history","randomPastDays","generateUniqueRandomNumbers","startDate","subDays","randomMinutes","endDate","addMinutes","adjustedEndDate","entry","push","sort","a","b","getTime","INPROGRESS","COMPLETED","ARCHIVED"],"sourceRoot":""}