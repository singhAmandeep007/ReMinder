{"version":3,"file":"static/js/967.326a1bcf.chunk.js","mappings":"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","sources":["views/Reminders/components/DeleteButton.tsx","views/Reminders/ReminderItem.tsx","views/Reminders/RemindersList.tsx","views/Reminders/ReminderGroupItem.tsx","views/Reminders/ReminderGroupList.tsx","views/Reminders/Reminders.tsx"],"sourcesContent":["import { FC } from \"react\";\nimport { Trash } from \"lucide-react\";\n\nimport { cn } from \"shared\";\n\nimport { Button, TButtonProps } from \"components\";\n\nexport const DeleteButton: FC<TButtonProps> = ({ children, className, ...props }) => {\n  return (\n    <Button\n      size=\"icon\"\n      variant={\"ghost\"}\n      className={cn(\"shrink-0 opacity-30 hover:bg-accent-dark hover:text-destructive hover:opacity-100\", className)}\n      {...props}\n    >\n      <Trash className=\"icon\" />\n      {children}\n    </Button>\n  );\n};\n","import { FC, PropsWithChildren } from \"react\";\n\nimport { TReminder } from \"types\";\nimport { Typography } from \"components\";\n\nimport { useDeleteReminderMutation } from \"shared\";\n\nimport { DeleteButton } from \"./components\";\n\nexport type TReminderItemProps = {\n  reminder: TReminder;\n};\n\nexport const ReminderItem: FC<PropsWithChildren<TReminderItemProps>> = ({ reminder }) => {\n  const [deleteReminder] = useDeleteReminderMutation();\n\n  return (\n    <div\n      className=\"flex items-center justify-between gap-2 py-2\"\n      data-testid={`reminder-item-${reminder.id}`}\n    >\n      <Typography\n        variant={\"p\"}\n        className=\"overflow-x-scroll text-nowrap py-2\"\n      >\n        {reminder.title}\n      </Typography>\n      <DeleteButton\n        data-testid={`delete-reminder-item-${reminder.id}`}\n        onClick={() => deleteReminder(reminder.id)}\n      />\n    </div>\n  );\n};\n","import { FC, PropsWithChildren } from \"react\";\n\nimport { RefreshCcw } from \"lucide-react\";\n\nimport { Button, Typography } from \"components\";\n\nimport { useGetRemindersQuery, useSelectQueryParams, useGetReminderGroupQuery } from \"shared\";\n\nimport { ReminderItem } from \"./ReminderItem\";\n\nexport type TRemindersListProps = Record<string, never>;\n\nexport const RemindersList: FC<PropsWithChildren<TRemindersListProps>> = () => {\n  const queryParams = useSelectQueryParams();\n\n  const { currentData: reminders, refetch } = useGetRemindersQuery(queryParams);\n\n  const { currentData: reminderGroup } = useGetReminderGroupQuery(queryParams.groupId as string, {\n    skip: !queryParams.groupId,\n  });\n\n  return (\n    <div className=\"flex flex-1 flex-col overflow-hidden p-4\">\n      <div className=\"mb-2 flex items-center justify-between gap-2\">\n        <Typography\n          variant={\"h4\"}\n          className=\"flex items-center justify-between overflow-x-scroll text-nowrap py-2 \"\n          data-testid=\"active-list-title\"\n        >\n          {reminderGroup?.name || \"All\"}\n        </Typography>\n        <div className=\"flex gap-2\">\n          <Button\n            size={\"icon\"}\n            variant={\"ghost\"}\n            className=\"hover:text-primary\"\n            data-testid=\"refresh-reminder-list\"\n          >\n            <RefreshCcw\n              className=\"icon\"\n              onClick={refetch}\n            />\n          </Button>\n        </div>\n      </div>\n      {reminders && (\n        <div className=\"flex-1 overflow-scroll\">\n          <ul className=\"divide divide-y\">\n            {reminders.map((reminder) => {\n              return (\n                <li key={reminder.id}>\n                  <ReminderItem reminder={reminder} />\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { FC, PropsWithChildren, useCallback } from \"react\";\n\nimport { TReminderGroup } from \"types\";\n\nimport { Typography } from \"components\";\n\nimport {\n  useAppDispatch,\n  setQueryParams,\n  useAppSelector,\n  selectQueryParams,\n  cn,\n  useDeleteReminderGroupMutation,\n  handleAsync,\n} from \"shared\";\n\nimport { DeleteButton } from \"./components\";\n\nexport type TReminderGroupItemProps = {\n  reminderGroup?: TReminderGroup;\n};\n\nexport const ReminderGroupItem: FC<PropsWithChildren<TReminderGroupItemProps>> = ({ reminderGroup }) => {\n  const dispatch = useAppDispatch();\n\n  const { groupId } = useAppSelector(selectQueryParams);\n\n  const [deleteReminderGroup, result] = useDeleteReminderGroupMutation();\n\n  const isSelected = groupId === reminderGroup?.id;\n\n  const className = cn(\"py-2 flex items-center justify-between cursor-pointer gap-2\");\n\n  const titleClassName = cn(\"text-nowrap overflow-x-scroll py-2\", isSelected && \"text-primary\");\n\n  const handleOnItemClick = useCallback(\n    (queryParams: Parameters<typeof setQueryParams>[0]) => {\n      dispatch(setQueryParams(queryParams));\n    },\n    [dispatch]\n  );\n\n  const handleOnDelete = useCallback(\n    async (id: Parameters<typeof deleteReminderGroup>[0]) => {\n      await handleAsync(() => deleteReminderGroup(id));\n    },\n    [deleteReminderGroup]\n  );\n\n  if (!reminderGroup) {\n    return (\n      <div\n        className={className}\n        data-testid=\"reminder-group-item-all\"\n        onClick={() => handleOnItemClick({ groupId: undefined })}\n      >\n        <Typography\n          variant={\"p\"}\n          className={titleClassName}\n        >\n          All\n        </Typography>\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={className}\n      data-testid={`reminder-group-item-${reminderGroup.id}`}\n    >\n      <Typography\n        variant={\"p\"}\n        className={titleClassName}\n        onClick={() => handleOnItemClick({ groupId: reminderGroup.id })}\n      >\n        {reminderGroup.name}\n      </Typography>\n\n      <DeleteButton\n        data-testid={`delete-reminder-group-item-${reminderGroup.id}`}\n        onClick={() => handleOnDelete(reminderGroup.id)}\n        disabled={result.isLoading}\n      />\n    </div>\n  );\n};\n","import { FC, PropsWithChildren } from \"react\";\n\nimport { Plus } from \"lucide-react\";\n\nimport { useGetReminderGroupsQuery } from \"shared\";\n\nimport { Button } from \"components\";\n\nimport { ReminderGroupItem } from \"./ReminderGroupItem\";\n\nexport type TReminderGroupListProps = Record<string, never>;\n\nexport const ReminderGroupList: FC<PropsWithChildren<TReminderGroupListProps>> = () => {\n  const { data: reminderGroups } = useGetReminderGroupsQuery();\n\n  return (\n    <div className=\"flex min-w-[200px] flex-1 flex-col overflow-hidden bg-secondary p-4\">\n      <div className=\"mb-2 mt-1 flex justify-center\">\n        <Button\n          className=\"gap-1 border border-accent-dark hover:bg-accent-dark hover:text-primary\"\n          variant={\"ghost\"}\n        >\n          <Plus className=\"icon\" />\n          Add list\n        </Button>\n      </div>\n      <div className=\"flex-1 overflow-scroll\">\n        <ul className=\"divide divide-y divide-accent-dark\">\n          <li key=\"all\">\n            <ReminderGroupItem />\n          </li>\n          {reminderGroups &&\n            reminderGroups.map((reminderGroup) => {\n              return (\n                <li key={reminderGroup.id}>\n                  <ReminderGroupItem reminderGroup={reminderGroup} />\n                </li>\n              );\n            })}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import { FC, PropsWithChildren } from \"react\";\n\nimport { Panel, PanelGroup, PanelResizeHandle } from \"react-resizable-panels\";\nimport { EllipsisVertical, EllipsisIcon } from \"lucide-react\";\n\nimport { useBreakpoint } from \"hooks\";\nimport { cn } from \"shared\";\nimport { Typography } from \"components\";\n\nimport { RemindersList } from \"./RemindersList\";\n\nimport { ReminderGroupList } from \"./ReminderGroupList\";\n\nexport type TRemindersProps = Record<string, never>;\n\nexport const Reminders: FC<PropsWithChildren<TRemindersProps>> = () => {\n  const { isBelowMd } = useBreakpoint(\"md\");\n\n  return (\n    <div className=\"mx-auto h-full max-w-screen-md p-8\">\n      <div className=\"flex h-full flex-col rounded border-2 border-primary shadow-lg lg:h-3/4\">\n        <nav className=\"flex h-[--navbar-height] border-b-2 border-primary\">\n          <ul className=\"flex flex-1 items-center justify-between px-4\">\n            <li>\n              <Typography\n                variant={\"h2\"}\n                className=\"pb-0\"\n              >\n                Reminders\n              </Typography>\n            </li>\n          </ul>\n        </nav>\n\n        <PanelGroup\n          direction={isBelowMd ? \"vertical\" : \"horizontal\"}\n          className=\"flex-1\"\n          autoSaveId={\"reminders-panel-group\"}\n        >\n          <Panel\n            maxSize={50}\n            className=\"flex flex-col\"\n          >\n            <ReminderGroupList />\n          </Panel>\n\n          <PanelResizeHandle className=\"group\">\n            <div\n              className={cn(\n                \"flex h-full w-8 items-center border-primary bg-secondary\",\n                isBelowMd ? \"h-8 w-full border-b-2\" : \"border-r-2\"\n              )}\n            >\n              <span\n                className={cn(\n                  \"mx-auto rounded group-hover:bg-primary group-hover:text-secondary\",\n                  isBelowMd ? \"px-1\" : \"py-1\"\n                )}\n              >\n                {isBelowMd ? <EllipsisIcon className=\"icon\" /> : <EllipsisVertical className={\"icon\"} />}\n              </span>\n            </div>\n          </PanelResizeHandle>\n\n          <Panel className=\"flex flex-col\">\n            <RemindersList />\n          </Panel>\n        </PanelGroup>\n      </div>\n    </div>\n  );\n};\n"],"names":["DeleteButton","_ref","children","className","props","_jsxs","Button","size","variant","cn","_jsx","Trash","ReminderItem","reminder","deleteReminder","useDeleteReminderMutation","concat","id","Typography","title","onClick","RemindersList","queryParams","useSelectQueryParams","currentData","reminders","refetch","useGetRemindersQuery","reminderGroup","useGetReminderGroupQuery","groupId","skip","name","RefreshCcw","map","ReminderGroupItem","dispatch","useAppDispatch","useAppSelector","selectQueryParams","deleteReminderGroup","result","useDeleteReminderGroupMutation","isSelected","titleClassName","handleOnItemClick","useCallback","setQueryParams","handleOnDelete","async","handleAsync","disabled","isLoading","undefined","ReminderGroupList","data","reminderGroups","useGetReminderGroupsQuery","Plus","Reminders","isBelowMd","useBreakpoint","PanelGroup","direction","autoSaveId","Panel","maxSize","PanelResizeHandle","EllipsisIcon","EllipsisVertical"],"sourceRoot":""}