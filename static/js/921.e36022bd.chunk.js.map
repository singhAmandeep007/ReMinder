{"version":3,"file":"static/js/921.e36022bd.chunk.js","mappings":"2LAMO,MAAMA,GAAKC,EAAAA,EAAAA,SAAQ,CACxBC,SAAU,CACRC,IAAIC,EAAAA,EAAAA,YAAWC,EAAAA,IACfC,MAAOA,IACC,YAANC,QAAmBF,EAAAA,EAAAA,IAAK,CAAEG,QAAQ,KAGpCC,SAAUA,KAAM,EAChBC,MAAOA,IAAMC,EAAAA,EAAeC,SAC5BC,OAAOC,EAAAA,EAAAA,OAAM,iBACbC,UAAWA,KAAM,IAAIC,MAAOC,cAC5BC,UAAWA,KAAM,IAAIF,MAAOC,cAC5BE,SAASC,EAAAA,EAAAA,UAASC,SAGpBC,cAAe,CACbnB,IAAIC,EAAAA,EAAAA,YAAWC,EAAAA,IACfkB,KAAMA,IAAA,kBAAAhB,QAAwBF,EAAAA,EAAAA,IAAK,CAAEG,QAAQ,KAC7CO,UAAWA,KAAM,IAAIC,MAAOC,cAC5BC,UAAWA,KAAM,IAAIF,MAAOC,iBAMnBO,EAAkBxB,IAC7B,MAAMyB,EAAU,CACdC,cAAe,WAAqB,IAApBC,EAASC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GAC1B,IAAK,IAAIG,EAAI,EAAGA,EAAIJ,EAAGI,IACrB/B,EAAGE,SAAS8B,SAGd,OAAOP,CACT,EACAQ,mBAAoBC,IAMb,IANc,eACnBC,EAAiB,CAAC,OAAQ,OAAQ,YAAW,kBAC7CC,EAAoB,IAIrBF,EASC,OARAC,EAAeE,SAASC,IACtB,MAAMzB,EAAQb,EAAGsB,cAAcU,OAAO,CAAET,KAAMe,IAE9C,IAAK,IAAIP,EAAI,EAAGA,EAAIK,EAAmBL,IACrC/B,EAAGE,SAAS8B,OAAO,CAAEnB,SACvB,IAGKY,CAAO,GAGlB,OAAOA,CAAO,C,kCC1DT,MAAMd,EAAiB,CAC5BC,SAAU,WACV2B,WAAY,aACZC,UAAW,YACXC,SAAU,W","sources":["services/mocker/msw/db.ts","types/Reminders.ts"],"sourcesContent":["import { factory, nullable, oneOf, primaryKey } from \"@mswjs/data\";\n\nimport { uuid } from \"shared\";\n\nimport { REMINDER_STATE } from \"types\";\n\nexport const db = factory({\n  reminder: {\n    id: primaryKey(uuid),\n    title: () => {\n      return `Reminder ${uuid({ simple: true })}`;\n    },\n\n    isPinned: () => false,\n    state: () => REMINDER_STATE.INACTIVE,\n    group: oneOf(\"reminderGroup\"),\n    createdAt: () => new Date().toISOString(),\n    updatedAt: () => new Date().toISOString(),\n    dueDate: nullable(String),\n  },\n\n  reminderGroup: {\n    id: primaryKey(uuid),\n    name: () => `Reminder Group ${uuid({ simple: true })}`,\n    createdAt: () => new Date().toISOString(),\n    updatedAt: () => new Date().toISOString(),\n  },\n});\n\nexport type TDb = typeof db;\n\nexport const buildScenarios = (db: TDb) => {\n  const builder = {\n    withReminders: (n: number = 10) => {\n      for (let i = 0; i < n; i++) {\n        db.reminder.create();\n      }\n\n      return builder;\n    },\n    withReminderGroups: ({\n      reminderGroups = [\"Work\", \"Home\", \"Personal\"],\n      remindersPerGroup = 10,\n    }: {\n      reminderGroups?: string[];\n      remindersPerGroup?: number;\n    }) => {\n      reminderGroups.forEach((groupName) => {\n        const group = db.reminderGroup.create({ name: groupName });\n\n        for (let i = 0; i < remindersPerGroup; i++) {\n          db.reminder.create({ group });\n        }\n      });\n\n      return builder;\n    },\n  };\n  return builder;\n};\n","export const REMINDER_STATE = {\n  INACTIVE: \"INACTIVE\",\n  INPROGRESS: \"INPROGRESS\",\n  COMPLETED: \"COMPLETED\",\n  ARCHIVED: \"ARCHIVED\",\n} as const;\n\nexport type TReminderState = (typeof REMINDER_STATE)[keyof typeof REMINDER_STATE];\n\nexport type TReminder = {\n  id: string;\n  title: string;\n  /**\n   * Current state of the reminder.\n   *\n   * @example \"IN_ACTIVE\" | \"IN_PROGRESS\" | \"COMPLETED\"\n   */\n  state: TReminderState;\n  /**\n   * Indicates if the reminder is pinned on top.\n   */\n  isPinned: boolean;\n  /**\n   * Date and time the reminder was created. (ISO 8601 format)\n   */\n  createdAt: string;\n  /**\n   * Date and time the reminder was last updated. (ISO 8601 format)\n   */\n  updatedAt: string;\n  /**\n   * Optional reminder group this reminder belongs to.\n   */\n  group?: TReminderGroup;\n  /**\n   * Optional due date and time for the reminder. (ISO 8601 format)\n   *\n   * @example \"2021-09-30T00:00:00.000Z\"\n   */\n  dueDate?: string | null;\n};\n\nexport type TReminderGroup = {\n  id: string;\n  name: string;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type TMessageResponsePaylaod = {\n  message: string;\n};\n\nexport type TDataResponsePayload<T> = {\n  data: T;\n};\n\n/**\n * Error\n */\nexport type THTTPError = {\n  message: string;\n};\n\n/**\n * Reminder\n */\nexport type TGetRemindersQueryParams = Partial<{\n  groupId: TReminderGroup[\"id\"];\n  state: TReminder[\"state\"];\n}>;\n\nexport type TGetRemindersResponsePayload = TDataResponsePayload<TReminder[]>;\n\nexport type TGetReminderRequestPayload = TReminder[\"id\"];\n\nexport type TGetReminderResponsePayload = TDataResponsePayload<TReminder>;\n\nexport type TCreateReminderRequestPayload = Pick<TReminder, \"title\"> & Partial<{ groupId: TReminderGroup[\"id\"] }>;\n\nexport type TCreateReminderResponsePayload = TDataResponsePayload<TReminder>;\n\nexport type TUpdateReminderRequestPayload = Pick<TReminder, \"id\"> &\n  Partial<Pick<TReminder, \"title\" | \"state\" | \"isPinned\" | \"dueDate\"> & { groupId: TReminderGroup[\"id\"] }>;\n\nexport type TUpdateReminderResponsePayload = TDataResponsePayload<TReminder>;\n\nexport type TDeleteReminderRequestPayload = TReminder[\"id\"];\n\nexport type TDeleteReminderResponsePayload = TMessageResponsePaylaod;\n\n/**\n * Reminder Group\n */\nexport type TGetReminderGroupsResponsePayload = TDataResponsePayload<TReminderGroup[]>;\n\nexport type TGetReminderGroupRequestPayload = TReminderGroup[\"id\"];\n\nexport type TGetReminderGroupResponsePayload = TDataResponsePayload<TReminderGroup>;\n\nexport type TCreateReminderGroupRequestPayload = Pick<TReminderGroup, \"name\">;\n\nexport type TCreateReminderGroupResponsePayload = TDataResponsePayload<TReminderGroup>;\n\nexport type TUpdateReminderGroupRequestPayload = Pick<TReminderGroup, \"id\"> & Partial<Pick<TReminderGroup, \"name\">>;\n\nexport type TUpdateReminderGroupResponsePayload = TDataResponsePayload<TReminderGroup>;\n\nexport type TDeleteReminderGroupRequestPayload = TReminderGroup[\"id\"];\n\nexport type TDeleteReminderGroupResponsePayload = TMessageResponsePaylaod;\n"],"names":["db","factory","reminder","id","primaryKey","uuid","title","concat","simple","isPinned","state","REMINDER_STATE","INACTIVE","group","oneOf","createdAt","Date","toISOString","updatedAt","dueDate","nullable","String","reminderGroup","name","buildScenarios","builder","withReminders","n","arguments","length","undefined","i","create","withReminderGroups","_ref","reminderGroups","remindersPerGroup","forEach","groupName","INPROGRESS","COMPLETED","ARCHIVED"],"sourceRoot":""}