{"version":3,"file":"static/js/456.429db67d.chunk.js","mappings":"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","sources":["types/Reminders.ts","hooks/useMultiStep.ts","hooks/useIDB/consts.ts","hooks/useIDB/idb.ts","hooks/useIDB/useIDB.ts","hooks/useBrowserNotification.ts","config/breakpoints.ts","views/Reminders/components/AddButton.tsx","views/Reminders/components/AddUpdateItem.tsx","views/Reminders/ReminderItem/Badges.tsx","hooks/useTimer.ts","views/Reminders/ReminderItem/FocusSessionTracker/FocusSessionWizard/Steps/useFocusSession.ts","views/Reminders/ReminderItem/FocusSessionTracker/FocusSessionWizard/Steps/FocusSession.tsx","views/Reminders/ReminderItem/FocusSessionTracker/FocusSessionWizard/Steps/index.ts","views/Reminders/ReminderItem/FocusSessionTracker/FocusSessionWizard/Steps/FocusSessionDuration.tsx","views/Reminders/ReminderItem/FocusSessionTracker/FocusSessionWizard/context.tsx","views/Reminders/ReminderItem/FocusSessionTracker/FocusSessionWizard/FocusSessionWizard.tsx","views/Reminders/ReminderItem/FocusSessionTracker/FocusSessionTracker.tsx","views/Reminders/ReminderItem/ReminderItem.tsx","views/Reminders/ReminderItem/useReminderItem.ts","views/Reminders/RemindersList/useRemindersList.ts","views/Reminders/RemindersList/RemindersList.tsx","views/Reminders/RemindersList/useRemindersNotification.ts","views/Reminders/ReminderGroupItem/ReminderGroupItem.tsx","views/Reminders/ReminderGroupItem/useReminderGroupItem.ts","views/Reminders/ReminderGroupsList/ReminderGroupsList.tsx","views/Reminders/ReminderGroupsList/useReminderGroupsList.ts","views/Reminders/Reminders.tsx","hooks/useBreakpoint.ts"],"sourcesContent":["export const REMINDER_STATE = {\n  INACTIVE: \"INACTIVE\",\n  INPROGRESS: \"INPROGRESS\",\n  COMPLETED: \"COMPLETED\",\n  ARCHIVED: \"ARCHIVED\",\n} as const;\n\nexport type TReminderState = (typeof REMINDER_STATE)[keyof typeof REMINDER_STATE];\n\nexport type TReminderFocusSession = {\n  startTime: string;\n  endTime: string;\n};\n\nexport type TReminder = {\n  id: string;\n  title: string;\n  /**\n   * Current state of the reminder.\n   *\n   * @example \"IN_ACTIVE\" | \"IN_PROGRESS\" | \"COMPLETED\"\n   */\n  state: TReminderState;\n  /**\n   * Indicates if the reminder is pinned on top.\n   */\n  isPinned: boolean;\n  /**\n   * Date and time the reminder was created. (ISO 8601 format)\n   */\n  createdAt: string;\n  /**\n   * Date and time the reminder was last updated. (ISO 8601 format)\n   */\n  updatedAt: string;\n  /**\n   * Optional reminder group this reminder belongs to.\n   */\n  group: TReminderGroup | null;\n  /**\n   * Due date and time for the reminder. (ISO 8601 format)\n   *\n   * @example \"2021-09-30T00:00:00.000Z\"\n   */\n  dueDate: string | null;\n  /**\n   * Number of times to repeat the reminder.\n   *\n   * @default 1\n   */\n  repeatTimes: number | null;\n  /**\n   * Interval to repeat the reminder. (in milliseconds)\n   *\n   * @default 300000 (5 minutes)\n   */\n  repeatInterval: number | null;\n\n  /**\n   * Current focus session for this reminder.\n   */\n  currentFocusSession: {\n    /**\n     * date and time when focus session was started for this reminder. (ISO 8601 format)\n     */\n    startTime: string;\n    /**\n     * date and time the focus session stopped for this reminder. (ISO 8601 format)\n     */\n    endTime: string;\n  } | null;\n  /**\n   * Array to store history of multiple focus sessions for this reminder.\n   * Each session includes start time and end time.\n   */\n  focusSessions: TReminderFocusSession[];\n};\n\nexport type TReminderGroup = {\n  id: string;\n  name: string;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type TMessageResponsePayload = {\n  message: string;\n};\n\nexport type TDataResponsePayload<T> = {\n  data: T;\n};\n\n/**\n * Error\n */\nexport type THTTPError = {\n  message: string;\n};\n\n/**\n * Reminder\n */\nexport type TGetRemindersRequestQueryParams = Partial<{\n  groupId: TReminderGroup[\"id\"];\n  state: TReminder[\"state\"];\n}>;\n\nexport type TGetRemindersResponsePayload = TDataResponsePayload<TReminder[]>;\n\nexport type TGetReminderRequestPathParams = TReminder[\"id\"];\n\nexport type TGetReminderResponsePayload = TDataResponsePayload<TReminder>;\n\nexport type TCreateReminderRequestPayload = Pick<TReminder, \"title\"> & Partial<{ groupId: TReminderGroup[\"id\"] }>;\n\nexport type TCreateReminderResponsePayload = TDataResponsePayload<TReminder>;\n\nexport type TUpdateReminderRequestPayload = Pick<TReminder, \"id\"> &\n  Partial<\n    Pick<\n      TReminder,\n      | \"title\"\n      | \"state\"\n      | \"isPinned\"\n      | \"dueDate\"\n      | \"currentFocusSession\"\n      | \"focusSessions\"\n      | \"repeatTimes\"\n      | \"repeatInterval\"\n    > & {\n      groupId: TReminderGroup[\"id\"];\n    }\n  >;\n\nexport type TUpdateReminderResponsePayload = TDataResponsePayload<TReminder>;\n\nexport type TDeleteReminderRequestPathParams = TReminder[\"id\"];\n\nexport type TDeleteReminderResponsePayload = TMessageResponsePayload;\n\n/**\n * Reminder Group\n */\nexport type TGetReminderGroupsResponsePayload = TDataResponsePayload<TReminderGroup[]>;\n\nexport type TGetReminderGroupRequestPathParams = TReminderGroup[\"id\"];\n\nexport type TGetReminderGroupResponsePayload = TDataResponsePayload<TReminderGroup>;\n\nexport type TCreateReminderGroupRequestPayload = Pick<TReminderGroup, \"name\">;\n\nexport type TCreateReminderGroupResponsePayload = TDataResponsePayload<TReminderGroup>;\n\nexport type TUpdateReminderGroupRequestPayload = Pick<TReminderGroup, \"id\"> & Partial<Pick<TReminderGroup, \"name\">>;\n\nexport type TUpdateReminderGroupResponsePayload = TDataResponsePayload<TReminderGroup>;\n\nexport type TDeleteReminderGroupRequestPathParams = TReminderGroup[\"id\"];\n\nexport type TDeleteReminderGroupResponsePayload = TMessageResponsePayload;\n","import { useState, useCallback } from \"react\";\n\nexport type TUseMultiStepProps = {\n  /**\n   * Total number of steps in the multi-step process\n   * NOTE: steps are 0-indexed, so if totalSteps = 2 then the steps are 0, 1, 2\n   */\n  totalSteps: number;\n  /**\n   * Initial step to start with\n   * NOTE: steps are 0-indexed\n   */\n  initialStep?: number;\n};\n\nexport function useMultiStep({ totalSteps, initialStep = 0 }: TUseMultiStepProps) {\n  if (initialStep < 0 || initialStep > totalSteps) {\n    throw new Error(\"initialStep must be within the range of totalSteps\");\n  }\n\n  const [step, setStep] = useState(initialStep);\n\n  const nextStep = useCallback(() => {\n    setStep((prevStep) => {\n      if (prevStep >= totalSteps) {\n        return prevStep;\n      }\n      return prevStep + 1;\n    });\n  }, [totalSteps]);\n\n  const prevStep = useCallback(() => {\n    setStep((prevStep) => {\n      if (prevStep <= 0) {\n        return prevStep;\n      }\n      return prevStep - 1;\n    });\n  }, []);\n\n  const setStepTo = useCallback(\n    (newStep: number) => {\n      setStep((prevStep) => {\n        if (newStep >= 0 && newStep <= totalSteps) {\n          return newStep;\n        }\n        return prevStep;\n      });\n    },\n    [totalSteps]\n  );\n\n  return {\n    step,\n    nextStep,\n    prevStep,\n    setStepTo,\n    isFirstStep: step === 0,\n    isLastStep: step === totalSteps,\n  };\n}\n","export const IDB_KEY = \"__ReMinder-IDB__\";\n","import { waitUntil } from \"utils\";\n\nimport { IDB_KEY } from \"./consts\";\n\nimport { TIDBConfig, TCustomWindow } from \"./types\";\n\ndeclare let window: TCustomWindow;\n\nfunction validateStore(db: IDBDatabase, storeName: string) {\n  return db.objectStoreNames.contains(storeName);\n}\n\nexport function validateBeforeTransaction(db: IDBDatabase, storeName: string, reject: Function) {\n  if (!db) {\n    reject(new Error(\"Queried before opening connection\"));\n  }\n  if (!validateStore(db, storeName)) {\n    reject(new Error(`Store ${storeName} in ${db.name} not found`));\n  }\n}\n\nexport function createTransaction(\n  db: IDBDatabase,\n  dbMode: IDBTransactionMode,\n  currentStore: string,\n  resolve?: (value?: any) => void,\n  reject?: (value?: any) => void,\n  abort?: IDBTransaction[\"onabort\"]\n): IDBTransaction {\n  const tx: IDBTransaction = db.transaction(currentStore, dbMode);\n\n  if (reject) tx.onerror = reject;\n  if (resolve) tx.oncomplete = resolve;\n  if (abort) tx.onabort = abort;\n\n  return tx;\n}\n\nexport async function getConnection(config?: TIDBConfig): Promise<IDBDatabase> {\n  const idbInstance = typeof window !== \"undefined\" ? window.indexedDB : null;\n  let _config = config;\n\n  if (!config && idbInstance) {\n    await waitUntil(() => window?.[IDB_KEY]?.[\"init\"] === 1);\n    _config = window[IDB_KEY]?.[\"config\"];\n  }\n\n  return new Promise<IDBDatabase>((resolve, reject) => {\n    if (idbInstance && _config) {\n      const request: IDBOpenDBRequest = idbInstance.open(_config.databaseName, _config.version);\n\n      request.onsuccess = (e) => {\n        const db = (e.target as IDBOpenDBRequest).result;\n        resolve(db);\n      };\n\n      request.onerror = (e) => {\n        reject((e.target as IDBOpenDBRequest).error);\n      };\n\n      request.onupgradeneeded = (e: IDBVersionChangeEvent) => {\n        const db = (e.target as IDBOpenDBRequest).result;\n        const transaction = (e.target as IDBOpenDBRequest).transaction;\n\n        if (_config && _config.stores) {\n          _config.stores.forEach((s) => {\n            if (!db.objectStoreNames.contains(s.name)) {\n              const store = db.createObjectStore(s.name, s.id);\n              s.indices.forEach((c) => {\n                store.createIndex(c.name, c.keyPath, c.options);\n              });\n            } else {\n              const store = transaction?.objectStore(s.name);\n              if (store) {\n                s.indices.forEach((c) => {\n                  if (!store.indexNames.contains(c.name)) {\n                    store.createIndex(c.name, c.keyPath, c.options);\n                  }\n                });\n              }\n            }\n          });\n        }\n\n        // onsuccess event will be triggered after the upgrade is complete\n      };\n    } else {\n      reject(new Error(\"Failed to connect to IndexedDB\"));\n    }\n  });\n}\n\nexport function getActions<T>(currentStore: string) {\n  return {\n    getByID(id: string | number) {\n      return new Promise<T>((resolve, reject) => {\n        getConnection()\n          .then((db) => {\n            validateBeforeTransaction(db, currentStore, reject);\n            const tx = createTransaction(db, \"readonly\", currentStore, resolve, reject);\n            const objectStore = tx.objectStore(currentStore);\n            const request = objectStore.get(id);\n\n            request.onsuccess = (e: any) => {\n              resolve(e.target.result);\n            };\n            request.onerror = () => reject(request.error);\n          })\n          .catch(reject);\n      });\n    },\n\n    getOneByKey(keyPath: string, value: string | number) {\n      return new Promise<T | undefined>((resolve, reject) => {\n        getConnection()\n          .then((db) => {\n            validateBeforeTransaction(db, currentStore, reject);\n            const tx = createTransaction(db, \"readonly\", currentStore, resolve, reject);\n            const objectStore = tx.objectStore(currentStore);\n            const index = objectStore.index(keyPath);\n            const request = index.get(value);\n\n            request.onsuccess = (e: any) => {\n              resolve(e.target.result);\n            };\n            request.onerror = () => reject(request.error);\n          })\n          .catch(reject);\n      });\n    },\n\n    getManyByKey(keyPath: string, value: string | number) {\n      return new Promise<T[]>((resolve, reject) => {\n        getConnection()\n          .then((db) => {\n            validateBeforeTransaction(db, currentStore, reject);\n            const tx = createTransaction(db, \"readonly\", currentStore, resolve, reject);\n            const objectStore = tx.objectStore(currentStore);\n            const index = objectStore.index(keyPath);\n            const request = index.getAll(value);\n\n            request.onsuccess = (e: any) => {\n              resolve(e.target.result);\n            };\n            request.onerror = () => reject(request.error);\n          })\n          .catch(reject);\n      });\n    },\n\n    getAll() {\n      return new Promise<T[]>((resolve, reject) => {\n        getConnection()\n          .then((db) => {\n            validateBeforeTransaction(db, currentStore, reject);\n            const tx = createTransaction(db, \"readonly\", currentStore, resolve, reject);\n            const objectStore = tx.objectStore(currentStore);\n            const request = objectStore.getAll();\n\n            request.onsuccess = (e: any) => {\n              resolve(e.target.result);\n            };\n            request.onerror = () => reject(request.error);\n          })\n          .catch(reject);\n      });\n    },\n\n    add(value: T, key?: any) {\n      return new Promise<Event>((resolve, reject) => {\n        getConnection()\n          .then((db) => {\n            validateBeforeTransaction(db, currentStore, reject);\n            const tx = createTransaction(db, \"readwrite\", currentStore, resolve, reject);\n            const objectStore = tx.objectStore(currentStore);\n            const request = objectStore.add(value, key);\n\n            request.onsuccess = (e: any) => {\n              resolve(e.target.result);\n            };\n            request.onerror = () => reject(request.error);\n          })\n          .catch(reject);\n      });\n    },\n\n    update(value: T, key?: any) {\n      return new Promise<any>((resolve, reject) => {\n        getConnection()\n          .then((db) => {\n            validateBeforeTransaction(db, currentStore, reject);\n            const tx = createTransaction(db, \"readwrite\", currentStore, resolve, reject);\n            const objectStore = tx.objectStore(currentStore);\n            const request = objectStore.put(value, key);\n\n            request.onsuccess = (e: any) => {\n              resolve(e.target.result);\n            };\n            request.onerror = () => reject(request.error);\n          })\n          .catch(reject);\n      });\n    },\n\n    deleteByID(id: any) {\n      return new Promise<any>((resolve, reject) => {\n        getConnection()\n          .then((db) => {\n            validateBeforeTransaction(db, currentStore, reject);\n            const tx = createTransaction(db, \"readwrite\", currentStore, resolve, reject);\n            const objectStore = tx.objectStore(currentStore);\n            const request = objectStore.delete(id);\n\n            request.onsuccess = (e: any) => {\n              resolve(e.target.result);\n            };\n            request.onerror = () => reject(request.error);\n          })\n          .catch(reject);\n      });\n    },\n\n    deleteAll() {\n      return new Promise<any>((resolve, reject) => {\n        getConnection()\n          .then((db) => {\n            validateBeforeTransaction(db, currentStore, reject);\n            const tx = createTransaction(db, \"readwrite\", currentStore, resolve, reject);\n            const objectStore = tx.objectStore(currentStore);\n            const request = objectStore.clear();\n\n            request.onsuccess = (e: any) => {\n              resolve(e.target.result);\n            };\n            request.onerror = () => reject(request.error);\n          })\n          .catch(reject);\n      });\n    },\n  };\n}\n","import { useMemo } from \"react\";\n\nimport { IDB_KEY } from \"./consts\";\n\nimport { getActions, getConnection } from \"./idb\";\n\nimport { TIDBConfig, TCustomWindow } from \"./types\";\n\ndeclare let window: TCustomWindow;\n\nexport async function setupIndexedDB(config: TIDBConfig) {\n  return new Promise<IDBDatabase>(async (resolve, reject) => {\n    try {\n      const db = await getConnection(config);\n\n      window[IDB_KEY] = { init: 1, config };\n      resolve(db);\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n\nexport function useIndexedDBStore<T>(storeName: string) {\n  const _actions = useMemo(() => getActions<T>(storeName), [storeName]);\n  return _actions;\n}\n","import { useEffect } from \"react\";\n\nimport { setupIndexedDB, TIDBConfig, useIndexedDBStore } from \"./useIDB\";\n\n/**\n * IndexedDB Notification Entity\n */\ntype TBrowserNotificationRecord = {\n  /**\n   * Notification ID (unique)\n   */\n  id: string;\n  /**\n   * Last notified timestamp\n   */\n  lastNotified: number;\n  /**\n   * Number of times notified\n   */\n  notificationCount: number;\n};\n\n/**\n * Browser Notification Entity\n */\nexport type TBrowserNotification = {\n  /**\n   * Notification ID (unique)\n   */\n  id: string;\n  /**\n   * Notification due date\n   */\n  dueDate: Date;\n  /**\n   * Notification title\n   */\n  title: string;\n  /**\n   * Number of times to repeat the notification\n   *\n   * @default 1\n   *\n   * min: 1\n   */\n  repeatTimes?: number;\n  /**\n   * Interval to repeat the notification\n   *\n   * @default 300000 (5 minutes)\n   *\n   * min: 300000 (5 minutes)\n   */\n  repeatInterval?: number;\n  /**\n   * Notification options\n   * https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/notifications/NotificationOptions\n   */\n  options?: NotificationOptions;\n};\n\n/**\n * Browser Notification Hook Props\n */\ntype TUseBrowserNotificationProps = {\n  /**\n   * Array of notifications entities to be notified\n   */\n  notifications: Array<TBrowserNotification>;\n  /**\n   * Will keep on checking for notifications entities ready to be notified/shown after this interval.\n   *\n   * Interval to check the notifications\n   * @default 10000 (10 seconds)\n   *\n   * min: 1000 (1 second)\n   */\n  checkInterval?: number;\n};\n\nexport const DB_NAME = \"browser-notifications-db\";\nexport const STORE_NAME = \"notificationRecords\";\n\nconst checkBrowserNotificationSupport = (): boolean => {\n  return \"Notification\" in window;\n};\n\nconst requestBrowserNotificationPermission = async (): Promise<boolean> => {\n  if (!checkBrowserNotificationSupport()) {\n    // eslint-disable-next-line no-console\n    console.log(\"Browser does not support notifications.\");\n    return false;\n  }\n\n  const permission = await Notification.requestPermission();\n  return permission === \"granted\";\n};\n\nconst showNotification = async (title: string, options: NotificationOptions) => {\n  const isPermissionGranted = await requestBrowserNotificationPermission();\n\n  if (!isPermissionGranted) {\n    return;\n  }\n\n  new Notification(title, options);\n};\n\n// IndexedDB Configuration\nconst IDB_CONFIG: TIDBConfig = {\n  databaseName: DB_NAME,\n  version: 1,\n  stores: [\n    {\n      name: STORE_NAME,\n      id: { keyPath: \"id\" },\n      indices: [\n        { name: \"lastNotified\", keyPath: \"lastNotified\" },\n        { name: \"notificationCount\", keyPath: \"notificationCount\" },\n      ],\n    },\n  ],\n};\n\nexport const useBrowserNotification = ({ notifications, checkInterval = 10000 }: TUseBrowserNotificationProps) => {\n  if (checkInterval < 1000) {\n    throw new Error(\"checkInterval must be equal or greater than 1 second (1000ms)\");\n  }\n\n  useEffect(() => {\n    setupIndexedDB(IDB_CONFIG).catch(\n      // eslint-disable-next-line no-console\n      (e) => console.log(\"IndexedDB not supported\", e)\n    );\n  }, []);\n\n  const { add, getByID, update } = useIndexedDBStore<TBrowserNotificationRecord>(STORE_NAME);\n\n  useEffect(() => {\n    const showNotifications = async (notifications: TBrowserNotification[]) => {\n      const now = new Date().getTime();\n\n      for (const notification of notifications) {\n        const record = await getByID(notification.id);\n        const repeatTimes = notification.repeatTimes ?? 1;\n        const repeatInterval = notification.repeatInterval ?? 60000 * 5;\n\n        // if due date has elapsed\n        if (notification.dueDate.getTime() < now) {\n          // if record already exists in idb\n          if (record) {\n            // if number of times to notify is greater than number of times already notified\n            if (repeatTimes > record.notificationCount) {\n              // if repeat interval has elapsed since last notification was shown\n              if (repeatInterval < now - record.lastNotified) {\n                showNotification(notification.title, notification.options ?? {});\n                // update record\n                await update({\n                  id: notification.id,\n                  lastNotified: now,\n                  notificationCount: record.notificationCount + 1,\n                });\n              }\n            }\n          } else {\n            // if record does not exist in idb, notification is shown for the first time\n            showNotification(notification.title, notification.options ?? {});\n\n            await add({\n              id: notification.id,\n              lastNotified: now,\n              notificationCount: 1,\n            });\n          }\n        }\n      }\n    };\n\n    function init() {\n      const intervalId = setInterval(() => showNotifications(notifications), checkInterval);\n\n      return () => {\n        clearInterval(intervalId);\n      };\n    }\n\n    const unsubscribe = init();\n\n    // cleanup\n    return () => {\n      unsubscribe();\n    };\n  }, [add, update, getByID, notifications, checkInterval]);\n};\n","import {screens} from \"tailwindcss/defaultTheme\"\n\nexport const BREAKPOINTS: typeof screens= {\n  'sm': '640px',\n  'md': '768px',\n  'lg': '1024px',\n  'xl': '1280px',\n  '2xl': '1536px',\n} as const;\n","import { FC } from \"react\";\nimport { Plus } from \"lucide-react\";\n\nimport { cn } from \"utils\";\n\nimport { Button, TButtonProps } from \"components\";\n\nexport const AddButton: FC<TButtonProps> = ({ children, className, ...props }) => {\n  return (\n    <Button\n      variant={\"ghost\"}\n      className={cn(\"gap-1 border border-accent-dark hover:bg-accent-dark hover:text-primary\", className)}\n      {...props}\n    >\n      <Plus className=\"icon\" />\n      {children}\n    </Button>\n  );\n};\n","import { FC, useCallback, useRef } from \"react\";\n\nimport { Check, X } from \"lucide-react\";\n\nimport { cn } from \"utils\";\n\nimport { Button, Input } from \"components\";\n\nexport type TAddUpdateItemProps = {\n  className?: string;\n  onSave?: (value: string) => void;\n  onCancel?: () => void;\n  defaultValue?: string;\n  testIds?: {\n    save?: string;\n    cancel?: string;\n    text?: string;\n  };\n};\n\nexport const AddUpdateItem: FC<TAddUpdateItemProps> = ({ className, onCancel, onSave, defaultValue = \"\", testIds }) => {\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const handleOnSave = useCallback(() => {\n    if (inputRef.current?.value) {\n      onSave?.(inputRef.current.value);\n    }\n  }, [onSave]);\n\n  const handleOnCancel = useCallback(() => {\n    onCancel?.();\n  }, [onCancel]);\n\n  return (\n    <div className={cn(\"mt-2 flex items-center justify-between\", className)}>\n      <Input\n        className=\"ml-1 mr-2\"\n        defaultValue={defaultValue}\n        ref={inputRef}\n        autoFocus\n        required\n        data-testid={testIds?.text}\n      />\n      <div className=\"flex items-center gap-1\">\n        <Button\n          onClick={handleOnSave}\n          size=\"icon\"\n          variant={\"outline\"}\n          data-testid={testIds?.save}\n          className=\"group\"\n        >\n          <Check className=\"icon group-hover:text-primary\" />\n        </Button>\n        <Button\n          onClick={handleOnCancel}\n          size=\"icon\"\n          variant={\"outline\"}\n          data-testid={testIds?.cancel}\n          className=\"group\"\n        >\n          <X className=\"icon group-hover:text-destructive\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n","import { FC, useMemo } from \"react\";\nimport { format, intervalToDuration, differenceInMilliseconds } from \"date-fns\";\n\nimport { Badge } from \"components\";\n\nimport { TReminder } from \"types\";\n\nexport type TBadgesProps = {\n  reminder: TReminder;\n\n  listName?: string;\n};\n\nfunction formatTimeSpent(milliseconds: number): string {\n  const duration = intervalToDuration({ start: 0, end: milliseconds });\n\n  type TDuration = keyof typeof duration;\n\n  const units: TDuration[] = [\"hours\", \"minutes\"];\n\n  const format = units\n    .map((unit) => {\n      const value = duration[unit];\n\n      if (value && value > 0) {\n        return `${value}${unit.charAt(0)}`;\n      }\n\n      return \"\";\n    })\n    .filter(Boolean)\n    .join(\"\");\n\n  return format || \"0m\";\n}\n\nexport const Badges: FC<TBadgesProps> = ({ reminder, listName }) => {\n  const isOverdue = reminder.dueDate && new Date(reminder.dueDate) < new Date();\n\n  const totalDurationMs = useMemo(\n    () =>\n      reminder.focusSessions.reduce((acc, curr) => {\n        const start = new Date(curr.startTime);\n        const end = new Date(curr.endTime);\n        const duration = differenceInMilliseconds(end, start);\n\n        return acc + duration;\n      }, 0),\n    [reminder.focusSessions]\n  );\n  return (\n    <div className=\"ml-6 mr-10 flex flex-wrap gap-2\">\n      {!listName && reminder.group?.name && <Badge variant=\"default\">{reminder.group.name}</Badge>}\n\n      {reminder.dueDate && (\n        <Badge variant={isOverdue ? \"destructive\" : \"default\"}>Due: {format(new Date(reminder.dueDate), \"PPp\")}</Badge>\n      )}\n\n      {totalDurationMs > 0 && <Badge variant=\"default\">Time spent: {formatTimeSpent(totalDurationMs)}</Badge>}\n    </div>\n  );\n};\n","import { useEffect, useState, useCallback, useRef } from \"react\";\n\n/**\n * Configuration options for the useTimer hook.\n */\nexport type TUseTimerConfig = {\n  /**\n   * Determines whether the timer should start automatically.\n   * @defaultValue `false`\n   */\n  autoStart?: boolean;\n\n  /**\n   * The interval in milliseconds at which the remaining ticks should update.\n   * @defaultValue `1000`\n   */\n  interval?: number;\n\n  /**\n   * A callback function that will be called when the timer ticks with the remaining ticks as an argument.\n   */\n  onTick?: (remainingTick: number) => void;\n\n  /**\n   * A callback function that will be called when the timer finishes.\n   */\n  onFinish?: () => void;\n\n  /**\n   * A callback function that will be called when the timer starts.\n   */\n  onStart?: () => void;\n};\n\nexport type TUseTimerProps = {\n  totalTicks: number;\n  config: TUseTimerConfig;\n};\n\n/**\n * Custom hook for a timer. Use to control the number of ticks remaining, tick completion duration, handle timer completion and start events.\n * @param totalTicks - The inital total number of ticks.\n * @param {UseTimerConfig} options - Optional configuration for the timer.\n * @returns {Object} - An object containing the remaining ticks, timer controllers and timer running state.\n */\nexport const useTimer = (\n  totalTicks: TUseTimerProps[\"totalTicks\"],\n  { autoStart = false, interval = 1000, onTick, onFinish, onStart }: TUseTimerProps[\"config\"] = {}\n) => {\n  // eslint-disable-next-line no-console\n  if (totalTicks < 1) console.warn(\"total ticks is 0\");\n  const timeoutIdRef = useRef<NodeJS.Timeout | null>(null);\n\n  const [remainingTicks, setRemainingTicks] = useState(totalTicks);\n  const [isRunning, setIsRunning] = useState(autoStart);\n\n  const elapsedTicks = totalTicks - remainingTicks;\n\n  // const savedCallback = useRef<typeof onTick>();\n\n  const start = useCallback(() => {\n    if (isRunning) return;\n    const isFirstTick = remainingTicks === totalTicks;\n    const hasTimerEnded = remainingTicks === 0;\n    // timer not running\n    setIsRunning(true);\n    // restart the timer\n    if (hasTimerEnded) {\n      setRemainingTicks(totalTicks);\n    }\n    // call the onStart callback if the timer is starting or restarting\n    if (isFirstTick || hasTimerEnded) {\n      onStart?.();\n    }\n  }, [totalTicks, onStart, isRunning, remainingTicks]);\n\n  const stop = useCallback(() => {\n    if (!isRunning) return;\n    // timer is running\n    if (timeoutIdRef.current) {\n      clearTimeout(timeoutIdRef.current);\n    }\n    setIsRunning(false);\n    setRemainingTicks(totalTicks);\n  }, [isRunning, totalTicks]);\n\n  const pause = useCallback(() => {\n    if (!isRunning) return;\n    // timer is running\n    if (timeoutIdRef.current) {\n      clearTimeout(timeoutIdRef.current);\n    }\n    setIsRunning(false);\n  }, [isRunning]);\n\n  useEffect(() => {\n    if (autoStart) {\n      onStart?.();\n    }\n  }, [autoStart, onStart]);\n\n  useEffect(() => {\n    if (!isRunning) return;\n    const currentTick = totalTicks - remainingTicks + 1;\n    // timer is running\n    if (remainingTicks > 0) {\n      if (timeoutIdRef.current) {\n        clearTimeout(timeoutIdRef.current);\n      }\n      timeoutIdRef.current = setTimeout(() => {\n        setRemainingTicks((ticks) => ticks - 1);\n        onTick?.(currentTick);\n      }, interval);\n    } else {\n      setIsRunning(false);\n      onFinish?.();\n    }\n    return () => {\n      if (timeoutIdRef.current) {\n        clearTimeout(timeoutIdRef.current);\n      }\n    };\n  }, [remainingTicks, isRunning, interval, totalTicks, onFinish, onTick]);\n\n  return { remainingTicks, elapsedTicks, isRunning, start, pause, stop };\n};\n","import { useCallback, useEffect } from \"react\";\n\nimport { addSeconds } from \"date-fns\";\n\nimport { useUpdateReminderMutation } from \"store\";\n\nimport { handleAsync } from \"utils\";\n\nimport { useTimer } from \"hooks/useTimer\";\n\nimport { useFocusSessionWizardContext } from \"../context\";\n\nexport type TUseFocusSessionProps = Record<string, never>;\n\nexport const useFocusSession = () => {\n  const [updateReminder, updateReminderResult] = useUpdateReminderMutation();\n\n  const isLoading = updateReminderResult.isLoading;\n\n  const isErrored = updateReminderResult.isError;\n\n  const { reminder, focusSessionDuration: totalTicks } = useFocusSessionWizardContext();\n\n  const { id: reminderId } = reminder;\n\n  const handleOnFinish = useCallback(async () => {\n    if (!reminder.currentFocusSession) return;\n\n    const newFocusSession = reminder.currentFocusSession;\n\n    await handleAsync(() =>\n      updateReminder({\n        id: reminder.id,\n        currentFocusSession: null,\n        focusSessions: [...reminder.focusSessions, newFocusSession],\n      })\n    );\n  }, [updateReminder, reminder]);\n\n  const { isRunning, elapsedTicks, start, stop } = useTimer(totalTicks, {\n    onFinish: handleOnFinish,\n  });\n\n  const progress = (elapsedTicks / totalTicks) * 100;\n\n  const handleOnStart = useCallback(async () => {\n    const currentDate = new Date();\n\n    const { error } = await handleAsync(() =>\n      updateReminder({\n        id: reminderId,\n        currentFocusSession: {\n          startTime: new Date().toISOString(),\n          endTime: addSeconds(currentDate, totalTicks).toISOString(),\n        },\n      })\n    );\n\n    if (!error) {\n      start();\n    }\n  }, [updateReminder, reminderId, totalTicks, start]);\n\n  const handleOnStop = useCallback(async () => {\n    if (!reminder.currentFocusSession) {\n      return;\n    }\n    const newFocusSession = {\n      startTime: reminder.currentFocusSession.startTime,\n      endTime: new Date().toISOString(),\n    };\n\n    const { error } = await handleAsync(() => {\n      return updateReminder({\n        id: reminder.id,\n        currentFocusSession: null,\n        focusSessions: [...reminder.focusSessions, newFocusSession],\n      });\n    });\n\n    if (!error) {\n      stop();\n    }\n  }, [updateReminder, reminder, stop]);\n\n  useEffect(() => {\n    // on unmount save the current focus session\n    return () => {\n      if (isRunning) {\n        handleOnStop();\n      }\n    };\n  }, [isRunning, handleOnStop]);\n\n  return {\n    isLoading,\n    isErrored,\n\n    onStart: handleOnStart,\n    onStop: handleOnStop,\n    onFinish: handleOnFinish,\n\n    isRunning,\n    progress,\n    /**\n     * duration of the focus session in seconds\n     */\n    elapsedDuration: elapsedTicks,\n    reminder,\n  };\n};\n","import { FC } from \"react\";\n\nimport { Play, Square } from \"lucide-react\";\n\nimport { truncateText } from \"utils\";\n\nimport { DialogDescription, DialogHeader, DialogTitle, Button } from \"components\";\n\nimport { useFocusSession } from \"./useFocusSession\";\n\nconst FormattedFocusedTime = ({ totalSeconds }: { totalSeconds: number }) => {\n  const hours = Math.floor(totalSeconds / 3600);\n  const minutes = Math.floor((totalSeconds % 3600) / 60);\n  const remainingSeconds = totalSeconds % 60;\n\n  return (\n    <div className=\"flex gap-2 text-sm\">\n      {hours > 0 && <span>{hours} hr</span>}\n      {minutes > 0 && <span>{minutes} min</span>}\n      <span>{remainingSeconds} sec</span>\n    </div>\n  );\n};\n\nexport type TFocusSessionProps = Record<string, never>;\n\nexport const FocusSession: FC<TFocusSessionProps> = () => {\n  const { isRunning, progress, onStart, onStop, elapsedDuration, reminder } = useFocusSession();\n\n  return (\n    <>\n      <DialogHeader>\n        <DialogTitle className=\"text-left\">Ready, set, focus!</DialogTitle>\n        <DialogDescription className=\"max-w-xs text-left\">\n          🎯 {truncateText(reminder.title, { maxLength: 100 })}\n        </DialogDescription>\n      </DialogHeader>\n\n      <div className=\"flex flex-col items-center justify-center gap-2\">\n        <FocusTimer\n          isRunning={isRunning}\n          progress={progress}\n          onStart={onStart}\n          onStop={onStop}\n          size={240}\n        >\n          <FormattedFocusedTime totalSeconds={elapsedDuration} />\n        </FocusTimer>\n      </div>\n    </>\n  );\n};\n\nexport type TFocusTimerProps = {\n  /**\n   * Progress in range [0-100]\n   */\n  progress: number;\n  /**\n   * Size of the svg\n   */\n  size?: number;\n  /**\n   * Whether the timer is running\n   */\n  isRunning: boolean;\n  onStart?: () => void;\n  onStop?: () => void;\n  children?: React.ReactNode;\n};\n\nconst FocusTimer: React.FC<TFocusTimerProps> = ({ progress, size = 144, onStart, onStop, isRunning, children }) => {\n  const strokeWidth = 16;\n  const radius = (size - strokeWidth) / 2;\n  const circumference = 2 * Math.PI * radius;\n\n  const strokeDashoffset = Math.max(circumference - (progress / 100) * circumference, 0);\n\n  return (\n    <div className=\"flex flex-col items-center gap-4\">\n      <div\n        className=\"relative\"\n        style={{ width: size, height: size }}\n      >\n        <svg\n          width={size}\n          height={size}\n        >\n          <circle\n            className=\"stroke-muted\"\n            fill=\"none\"\n            strokeWidth={strokeWidth}\n            r={radius}\n            cx={size / 2}\n            cy={size / 2}\n          />\n          <circle\n            className=\"stroke-primary\"\n            fill=\"none\"\n            strokeWidth={strokeWidth}\n            r={radius}\n            cx={size / 2}\n            cy={size / 2}\n            style={{\n              strokeDasharray: circumference,\n              strokeDashoffset,\n              strokeLinecap: \"round\",\n              transform: \"rotate(-90deg)\",\n              transformOrigin: \"50% 50%\",\n            }}\n          />\n        </svg>\n        <div className=\"absolute inset-0 flex items-center justify-center\">{children}</div>\n      </div>\n      <Button\n        onClick={isRunning ? onStop : onStart}\n        className=\"h-max rounded-full p-3\"\n      >\n        {isRunning ? (\n          <Square\n            size={16}\n            className={\"!pointer-events-none fill-current\"}\n          />\n        ) : (\n          <Play\n            size={16}\n            className={\"!pointer-events-none fill-current\"}\n          />\n        )}\n      </Button>\n    </div>\n  );\n};\n","import { FocusSession } from \"./FocusSession\";\n\nimport { FocusSessionDuration } from \"./FocusSessionDuration\";\n\nexport const Steps = [FocusSessionDuration, FocusSession];\n\nexport const totalSteps = Steps.length;\n","import { FC, useRef } from \"react\";\n\nimport { DialogDescription, DialogHeader, DialogTitle, Button, ValueSetter } from \"components\";\n\nimport { useFocusSessionWizardContext } from \"../context\";\n\nexport type TFocusSessionDurationProps = Record<string, never>;\n\nexport const FocusSessionDuration: FC<TFocusSessionDurationProps> = () => {\n  const hoursRef = useRef<number>(0);\n  const minutesRef = useRef<number>(1);\n\n  const { nextStep, setFocusSessionDuration } = useFocusSessionWizardContext();\n\n  const handleOnClick = () => {\n    const hours = hoursRef.current;\n    const minutes = minutesRef.current;\n\n    // NOTE: total time in seconds\n    const duration = hours * 60 * 60 + minutes * 60;\n\n    setFocusSessionDuration(duration);\n    nextStep();\n  };\n\n  return (\n    <>\n      <DialogHeader>\n        <DialogTitle className=\"text-left\">Ready, set, focus!</DialogTitle>\n        <DialogDescription className=\"max-w-xs text-left\">Set duration of your focus session</DialogDescription>\n      </DialogHeader>\n      <div className=\"flex flex-col\">\n        <div className=\"mb-4 flex items-center justify-center gap-4\">\n          <ValueSetter\n            initialValue={hoursRef.current}\n            onChange={(value) => (hoursRef.current = value)}\n            max={12}\n          >\n            <span className=\"text-sm\">hours</span>\n          </ValueSetter>\n          <ValueSetter\n            initialValue={minutesRef.current}\n            onChange={(value) => (minutesRef.current = value)}\n            min={1}\n            max={59}\n          >\n            <span className=\"text-sm\">minutes</span>\n          </ValueSetter>\n        </div>\n\n        <Button\n          onClick={handleOnClick}\n          className=\"self-end\"\n          size={\"full\"}\n          autoFocus={true}\n        >\n          Next\n        </Button>\n      </div>\n    </>\n  );\n};\n","import { createContext, useContext, useState } from \"react\";\n\nimport { TReminder } from \"types\";\n\nimport { useMultiStep } from \"hooks\";\n\nimport { totalSteps } from \"./Steps\";\n\nexport type TFocusSessionWizardContext = {\n  /**\n   * focus session duration in seconds\n   */\n  focusSessionDuration: number;\n  setFocusSessionDuration: (seconds: number) => void;\n  reminder: TReminder;\n} & ReturnType<typeof useMultiStep>;\n\ntype TFocusSessionWizardProviderProps = {\n  children: React.ReactNode;\n  reminder: TReminder;\n};\n\nexport const FocusSessionWizardContext = createContext<TFocusSessionWizardContext | null>(null);\n\nexport const FocusSessionWizardProvider = ({ children, reminder }: TFocusSessionWizardProviderProps) => {\n  const [focusSessionDuration, setFocusSessionDuration] =\n    useState<TFocusSessionWizardContext[\"focusSessionDuration\"]>(0);\n\n  return (\n    <FocusSessionWizardContext.Provider\n      value={{\n        focusSessionDuration,\n        setFocusSessionDuration,\n        reminder,\n        ...useMultiStep({ totalSteps }),\n      }}\n    >\n      {children}\n    </FocusSessionWizardContext.Provider>\n  );\n};\n\nexport const useFocusSessionWizardContext = () => {\n  const context = useContext(FocusSessionWizardContext);\n  if (!context) {\n    throw new Error(\"useFocusSessionWizardContext must be used within a FocusSessionWizardProvider\");\n  }\n  return context;\n};\n","import { FC } from \"react\";\n\nimport { useFocusSessionWizardContext } from \"./context\";\nimport { Steps } from \"./Steps\";\n\nexport type TFocusSessionWizardProps = Record<string, never>;\n\nexport const FocusSessionWizard: FC<TFocusSessionWizardProps> = () => {\n  const { step } = useFocusSessionWizardContext();\n\n  const Component = Steps[step];\n\n  return <Component />;\n};\n","import { FC } from \"react\";\n\nimport { TReminder } from \"types\";\n\nimport { FocusSessionWizard, FocusSessionWizardProvider } from \"./FocusSessionWizard\";\n\nexport type TFocusSessionTrackerProps = {\n  reminder: TReminder;\n};\n\nexport const FocusSessionTracker: FC<TFocusSessionTrackerProps> = ({ reminder }) => {\n  return (\n    <FocusSessionWizardProvider reminder={reminder}>\n      <FocusSessionWizard />\n    </FocusSessionWizardProvider>\n  );\n};\n","import { FC, useRef, useState } from \"react\";\n\nimport { ChevronDown, ChevronUp, Pencil, Trash, Pin, CalendarClock, Timer } from \"lucide-react\";\n\nimport { TReminder, REMINDER_STATE } from \"types\";\n\nimport {\n  Button,\n  Checkbox,\n  Typography,\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DateTimePicker,\n  Dialog,\n  DialogTrigger,\n  DialogContent,\n  DialogTitle,\n  DialogDescription,\n  DialogHeader,\n  DialogClose,\n  ValueSetter,\n  Select,\n  SelectTrigger,\n  SelectValue,\n  SelectItem,\n  SelectGroup,\n  SelectContent,\n} from \"components\";\n\nimport { cn } from \"utils\";\n\nimport { AddUpdateItem } from \"../components\";\n\nimport { useReminderItem } from \"./useReminderItem\";\n\nimport { Badges } from \"./Badges\";\nimport { FocusSessionTracker } from \"./FocusSessionTracker\";\n\nexport type TReminderItemProps = {\n  reminder: TReminder;\n  listName?: string;\n};\n\nconst DIALOGS = {\n  DUE_DATE: \"DUE_DATE\",\n  FOCUS_SESSION: \"FOCUS_SESSION\",\n} as const;\n\ntype TDialog = (typeof DIALOGS)[keyof typeof DIALOGS] | null;\n\nexport const ReminderItem: FC<TReminderItemProps> = ({ reminder, listName }) => {\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n  const [isUpdating, setIsUpdating] = useState(false);\n  const [dialog, setDialog] = useState<TDialog>(null);\n\n  const repeatTimesRef = useRef<number>(reminder.repeatTimes || 1);\n  const repeatIntervalRef = useRef<string>((reminder.repeatInterval || 300000).toString());\n\n  const { handleOnDelete, handleOnUpdate, isLoading } = useReminderItem({\n    reminder,\n  });\n\n  const isMenuDisabled = isLoading;\n\n  const isCompleted = reminder.state === REMINDER_STATE.COMPLETED;\n\n  return (\n    <div\n      className=\"flex flex-col py-2\"\n      data-testid={`reminder-item-${reminder.title}`}\n    >\n      {isUpdating && (\n        <AddUpdateItem\n          className=\"flex-1\"\n          defaultValue={reminder.title}\n          onCancel={() => setIsUpdating(false)}\n          onSave={(title) => {\n            handleOnUpdate({ id: reminder.id, title });\n            setIsUpdating(false);\n          }}\n          testIds={{\n            cancel: `reminder-update-cancel`,\n            save: `reminder-update-save`,\n            text: `reminder-update-text`,\n          }}\n        />\n      )}\n\n      {!isUpdating && (\n        <>\n          <div className=\"flex items-center justify-between gap-2\">\n            <Checkbox\n              checked={isCompleted}\n              className=\"peer\"\n              onClick={() =>\n                handleOnUpdate({\n                  id: reminder.id,\n                  state: isCompleted ? REMINDER_STATE.INACTIVE : REMINDER_STATE.COMPLETED,\n                })\n              }\n              data-testid={`reminder-item-checkbox`}\n            />\n            <Typography\n              variant={\"p\"}\n              affects={\"withoutPMargin\"}\n              className={cn(\n                \"flex-1 overflow-x-scroll text-nowrap py-2 peer-aria-[checked=true]:text-muted-foreground peer-aria-[checked=true]:line-through\"\n              )}\n            >\n              {reminder.title}\n            </Typography>\n            <Dialog>\n              <DropdownMenu\n                open={isDropdownOpen}\n                onOpenChange={setIsDropdownOpen}\n                // NOTE: https://github.com/radix-ui/primitives/issues/1241#issuecomment-1580887090\n                modal={false}\n              >\n                <DropdownMenuTrigger asChild>\n                  <Button\n                    variant=\"outline\"\n                    size=\"icon\"\n                    data-testid={`reminder-item-menu-btn`}\n                    disabled={isMenuDisabled}\n                  >\n                    {isDropdownOpen ? <ChevronUp className=\"icon\" /> : <ChevronDown className=\"icon\" />}\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent\n                  className=\"min-w-min\"\n                  align=\"end\"\n                  onInteractOutside={() => setIsDropdownOpen(false)}\n                  data-testid={`reminder-item-menu`}\n                >\n                  <DropdownMenuItem\n                    data-testid={`reminder-item-menuitem-pin`}\n                    onClick={() =>\n                      handleOnUpdate({\n                        id: reminder.id,\n                        isPinned: !reminder.isPinned,\n                      })\n                    }\n                    className={cn(\"group\", {\n                      \"bg-primary text-secondary\": reminder.isPinned,\n                    })}\n                    disabled={isCompleted}\n                  >\n                    <Pin\n                      size={20}\n                      className={cn(\"group-hover:text-primary\")}\n                      role=\"button\"\n                    />\n                  </DropdownMenuItem>\n\n                  <DropdownMenuSeparator />\n\n                  <DialogTrigger\n                    asChild\n                    onClick={() => {\n                      setDialog(DIALOGS.FOCUS_SESSION);\n                    }}\n                  >\n                    <DropdownMenuItem\n                      className={cn(\"group\")}\n                      disabled={isCompleted}\n                      data-testid={`reminder-item-menuitem-focus-session`}\n                    >\n                      <Timer\n                        size={20}\n                        className={cn(\"group-hover:text-primary\")}\n                        role=\"button\"\n                      />\n                    </DropdownMenuItem>\n                  </DialogTrigger>\n\n                  <DropdownMenuSeparator />\n\n                  <DialogTrigger\n                    asChild\n                    onClick={() => {\n                      setDialog(DIALOGS.DUE_DATE);\n                    }}\n                  >\n                    <DropdownMenuItem\n                      className=\"group\"\n                      disabled={isCompleted}\n                      data-testid={`reminder-item-menuitem-due-date`}\n                    >\n                      <CalendarClock\n                        size={20}\n                        className=\"group-hover:text-primary\"\n                        role=\"button\"\n                      />\n                    </DropdownMenuItem>\n                  </DialogTrigger>\n\n                  <DropdownMenuSeparator />\n\n                  <DropdownMenuItem\n                    data-testid={`reminder-item-menuitem-edit`}\n                    onClick={() => setIsUpdating(true)}\n                    className=\"group\"\n                    disabled={isCompleted}\n                  >\n                    <Pencil\n                      size={20}\n                      className=\"group-hover:text-primary\"\n                      role=\"button\"\n                    />\n                  </DropdownMenuItem>\n\n                  <DropdownMenuSeparator />\n\n                  <DropdownMenuItem\n                    data-testid={`reminder-item-menuitem-delete`}\n                    onClick={() => handleOnDelete(reminder.id)}\n                    className=\"group\"\n                  >\n                    <Trash\n                      size={20}\n                      className=\"group-hover:text-destructive\"\n                      role=\"button\"\n                    />\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n\n              <DialogContent\n                className=\"w-max\"\n                data-testid=\"reminder-item-dialog\"\n              >\n                {dialog === DIALOGS.DUE_DATE && (\n                  <>\n                    <DialogHeader>\n                      <DialogTitle className=\"text-left\">Schedule your reminder</DialogTitle>\n                      <DialogDescription className=\"text-left\">Select reminder's due date and time</DialogDescription>\n                    </DialogHeader>\n\n                    <DateTimePicker\n                      isLoading={isLoading}\n                      date={reminder.dueDate ? new Date(reminder.dueDate) : undefined}\n                    >\n                      {({ selectedDateTime }) => {\n                        return (\n                          <>\n                            <div className=\"flex\">\n                              <ValueSetter\n                                initialValue={repeatTimesRef.current}\n                                onChange={(value) => (repeatTimesRef.current = value)}\n                                max={100}\n                                min={1}\n                                classNames={{\n                                  container: \"\",\n                                  value: \"text-xl\",\n                                  controls: \"h-7 w-7\",\n                                }}\n                              >\n                                <span className=\"text-xs\">Repeat Times</span>\n                              </ValueSetter>\n\n                              <Select\n                                defaultValue={repeatIntervalRef.current}\n                                onValueChange={(v) => {\n                                  repeatIntervalRef.current = v;\n                                }}\n                              >\n                                <SelectTrigger className=\"flex-1 self-center\">\n                                  <SelectValue placeholder=\"Select an interval\" />\n                                </SelectTrigger>\n                                <SelectContent className=\"bg-background\">\n                                  <SelectGroup>\n                                    <SelectItem value=\"300000\">5 min</SelectItem>\n                                    <SelectItem value=\"600000\">10 min</SelectItem>\n                                    <SelectItem value=\"900000\">15 min</SelectItem>\n                                    <SelectItem value=\"1800000\">30 min</SelectItem>\n                                  </SelectGroup>\n                                </SelectContent>\n                              </Select>\n                            </div>\n                            <DialogClose asChild>\n                              <Button\n                                size=\"full\"\n                                onClick={() => {\n                                  if (selectedDateTime) {\n                                    const dueDate = selectedDateTime.toISOString();\n                                    handleOnUpdate({\n                                      id: reminder.id,\n                                      dueDate,\n                                      repeatTimes: repeatTimesRef.current,\n                                      repeatInterval: Number(repeatIntervalRef.current),\n                                    });\n                                  }\n                                }}\n                                className={cn(isLoading && \"cursor-not-allowed\")}\n                                disabled={!selectedDateTime || isLoading}\n                                data-testid={`reminder-item-save-due-date-btn`}\n                              >\n                                Save\n                              </Button>\n                            </DialogClose>\n                          </>\n                        );\n                      }}\n                    </DateTimePicker>\n                  </>\n                )}\n                {dialog === DIALOGS.FOCUS_SESSION && <FocusSessionTracker reminder={reminder} />}\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          {!isCompleted && (\n            <Badges\n              reminder={reminder}\n              listName={listName}\n            />\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n","import { useCallback } from \"react\";\n\nimport { useDeleteReminderMutation, useUpdateReminderMutation } from \"store\";\nimport { handleAsync } from \"utils\";\nimport { TReminder } from \"types\";\n\nexport type TUseReminderItemProps = {\n  reminder: TReminder;\n};\n\nexport const useReminderItem = ({ reminder }: TUseReminderItemProps) => {\n  const [deleteReminder, deleteReminderResult] = useDeleteReminderMutation();\n  const [updateReminder, updateReminderResult] = useUpdateReminderMutation();\n\n  const isLoading = deleteReminderResult.isLoading || updateReminderResult.isLoading;\n\n  const isErrored = deleteReminderResult.isError || updateReminderResult.isError;\n\n  const handleOnDelete = useCallback(\n    async (id: Parameters<typeof deleteReminder>[0]) => {\n      await handleAsync(() => deleteReminder(id));\n    },\n    [deleteReminder]\n  );\n\n  const handleOnUpdate = useCallback(\n    async (props: Parameters<typeof updateReminder>[0]) => {\n      await handleAsync(() =>\n        updateReminder({\n          id: props.id,\n          groupId: props.groupId,\n          title: props.title,\n          state: props.state,\n          isPinned: props.isPinned,\n          dueDate: props.dueDate,\n          repeatTimes: props.repeatTimes,\n          repeatInterval: props.repeatInterval,\n        })\n      );\n    },\n    [updateReminder]\n  );\n\n  return {\n    isLoading,\n    isErrored,\n\n    handleOnDelete,\n    handleOnUpdate,\n  };\n};\n","import { useCallback } from \"react\";\n\nimport { toast } from \"sonner\";\n\nimport { useGetRemindersQuery, useSelectQueryParams, useGetReminderGroupQuery, useCreateReminderMutation } from \"store\";\n\nimport { handleAsync } from \"utils\";\n\nexport const useRemindersList = () => {\n  const queryParams = useSelectQueryParams();\n\n  const getRemindersResult = useGetRemindersQuery(queryParams);\n\n  const getReminderGroupResult = useGetReminderGroupQuery(queryParams.groupId as string, {\n    skip: !queryParams.groupId,\n  });\n\n  const [createReminder, createReminderResult] = useCreateReminderMutation();\n\n  const handleOnSave = useCallback(\n    async (props: Parameters<typeof createReminder>[0]) => {\n      await handleAsync(() =>\n        createReminder({\n          groupId: props.groupId,\n          title: props.title,\n        })\n      );\n    },\n    [createReminder]\n  );\n\n  if (getReminderGroupResult.isError) {\n    toast.error(\"Error fetching reminder group\");\n  }\n\n  if (getRemindersResult.isError) {\n    toast.error(\"Error fetching reminders\");\n  }\n\n  if (createReminderResult.isError) {\n    toast.error(\"Error creating reminder\");\n  }\n\n  return {\n    reminders: getRemindersResult.currentData,\n    reminderGroup: getReminderGroupResult.currentData,\n    refetchReminders: getRemindersResult.refetch,\n    handleOnSave,\n  };\n};\n","import { FC, useState } from \"react\";\n\nimport { RefreshCcw } from \"lucide-react\";\n\nimport { Button, Typography } from \"components\";\n\nimport { ReminderItem } from \"../ReminderItem\";\nimport { AddButton, AddUpdateItem } from \"../components\";\n\nimport { useRemindersList } from \"./useRemindersList\";\nimport { useRemindersNotification } from \"./useRemindersNotification\";\n\nexport type TRemindersListProps = Record<string, never>;\n\nexport const RemindersList: FC<TRemindersListProps> = () => {\n  const { reminders, refetchReminders, reminderGroup, handleOnSave } = useRemindersList();\n\n  useRemindersNotification({ reminders });\n\n  const [isCreating, setIsCreating] = useState(false);\n\n  return (\n    <div className=\"flex flex-1 flex-col overflow-hidden p-4\">\n      <div className=\"mb-2 flex items-center justify-between gap-2\">\n        <Typography\n          variant={\"h4\"}\n          className=\"flex items-center justify-between overflow-x-scroll text-nowrap py-2\"\n          data-testid=\"reminder-list-title\"\n        >\n          {reminderGroup?.name || \"All\"}\n        </Typography>\n        <div className=\"flex gap-2\">\n          <Button\n            size={\"icon\"}\n            variant={\"ghost\"}\n            className=\"hover:text-primary\"\n            data-testid=\"reminder-refetch-btn\"\n          >\n            <RefreshCcw\n              className=\"icon\"\n              onClick={refetchReminders}\n            />\n          </Button>\n\n          <AddButton\n            size={\"icon\"}\n            onClick={() => setIsCreating((isCreating) => !isCreating)}\n            disabled={isCreating}\n            data-testid=\"reminder-create-btn\"\n          />\n        </div>\n      </div>\n\n      {reminders && (\n        <div className=\"flex-1 overflow-scroll\">\n          <ul className=\"divide divide-y\">\n            {reminders\n              ?.slice()\n              .sort((a, b) => {\n                return a.isPinned ? -1 : b.isPinned ? 1 : 0;\n              })\n              .map((reminder) => {\n                return (\n                  <li key={reminder.id}>\n                    <ReminderItem\n                      reminder={reminder}\n                      listName={reminderGroup?.name}\n                    />\n                  </li>\n                );\n              })}\n          </ul>\n        </div>\n      )}\n\n      {isCreating && (\n        <AddUpdateItem\n          onCancel={() => setIsCreating(false)}\n          onSave={(title) => {\n            handleOnSave({ title: title, groupId: reminderGroup?.id });\n            setIsCreating(false);\n          }}\n          testIds={{\n            cancel: `reminder-item-create-cancel`,\n            save: `reminder-item-create-save`,\n            text: `reminder-item-create-text`,\n          }}\n        />\n      )}\n    </div>\n  );\n};\n","import { useMemo } from \"react\";\n\nimport { TReminder } from \"types\";\n\nimport { useBrowserNotification, TBrowserNotification } from \"hooks\";\n\nexport const useRemindersNotification = ({ reminders = [] }: { reminders?: TReminder[] }) => {\n  const notifications = useMemo(() => {\n    return (\n      (reminders || []).filter((reminders) => reminders.dueDate) as (TReminder & {\n        dueDate: NonNullable<TReminder[\"dueDate\"]>;\n      })[]\n    ).map((reminder) => {\n      return {\n        id: reminder.id,\n        title: \"🔔\",\n        dueDate: new Date(reminder.dueDate),\n        repeatInterval: reminder.repeatInterval,\n        repeatTimes: reminder.repeatTimes,\n        options: {\n          body: `${reminder.title}`,\n        },\n      } as TBrowserNotification;\n    });\n  }, [reminders]);\n\n  useBrowserNotification({ notifications });\n};\n","import { FC, useMemo, useState } from \"react\";\n\nimport { ChevronDown, ChevronUp, Pencil, Trash } from \"lucide-react\";\n\nimport { TReminderGroup } from \"types\";\n\nimport {\n  Button,\n  Typography,\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n} from \"components\";\n\nimport { cn } from \"utils\";\n\nimport { AddUpdateItem } from \"../components\";\n\nimport { useReminderGroupItem } from \"./useReminderGroupItem\";\n\nexport type TReminderGroupItemProps = {\n  reminderGroup?: TReminderGroup;\n};\n\nexport const ReminderGroupItem: FC<TReminderGroupItemProps> = ({ reminderGroup }) => {\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n  const [isUpdating, setIsUpdating] = useState(false);\n\n  const { handleOnDelete, handleOnItemClick, handleOnSave, isLoading, isSelected } = useReminderGroupItem({\n    reminderGroup,\n  });\n\n  const isMenuDisabled = isLoading;\n\n  const renderItem = useMemo(() => {\n    if (reminderGroup && isUpdating) {\n      return (\n        <AddUpdateItem\n          className=\"flex-1\"\n          defaultValue={reminderGroup.name}\n          onCancel={() => setIsUpdating(false)}\n          onSave={(name) => {\n            handleOnSave({ id: reminderGroup.id, name });\n            setIsUpdating(false);\n          }}\n          testIds={{\n            cancel: `reminder-group-item-update-cancel-${reminderGroup.id}`,\n            save: `reminder-group-item-update-save-${reminderGroup.id}`,\n          }}\n        />\n      );\n    }\n\n    return (\n      <Typography\n        variant={\"p\"}\n        className={cn(\"flex-1 cursor-pointer overflow-x-scroll text-nowrap py-2\", isSelected && \"text-primary\")}\n        onClick={() => handleOnItemClick({ groupId: reminderGroup ? reminderGroup.id : undefined })}\n      >\n        {reminderGroup ? reminderGroup.name : \"All\"}\n      </Typography>\n    );\n  }, [isSelected, handleOnItemClick, isUpdating, reminderGroup, handleOnSave]);\n\n  return (\n    <div\n      className={cn(\"flex cursor-pointer items-center justify-between gap-2 px-1 py-2\")}\n      data-testid={`reminder-group-item-${reminderGroup ? reminderGroup.name : \"all\"}`}\n    >\n      {renderItem}\n\n      {reminderGroup && !isUpdating && (\n        <DropdownMenu\n          open={isDropdownOpen}\n          onOpenChange={setIsDropdownOpen}\n        >\n          <DropdownMenuTrigger asChild>\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              data-testid={`reminder-group-item-menu-btn`}\n              disabled={isMenuDisabled}\n            >\n              {isDropdownOpen ? <ChevronUp className=\"icon\" /> : <ChevronDown className=\"icon\" />}\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent\n            align=\"end\"\n            onInteractOutside={() => setIsDropdownOpen(false)}\n            className=\"min-w-min\"\n            data-testid={`reminder-group-item-menu`}\n          >\n            <DropdownMenuItem\n              onClick={() => setIsUpdating(true)}\n              data-testid={`reminder-group-item-update-${reminderGroup.name}`}\n              className=\"group\"\n            >\n              <Pencil\n                size={20}\n                className=\"group-hover:text-primary\"\n                role=\"button\"\n              />\n            </DropdownMenuItem>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem\n              onClick={() => handleOnDelete(reminderGroup.id)}\n              data-testid={`reminder-group-item-delete-${reminderGroup.name}`}\n              className=\"group\"\n            >\n              <Trash\n                size={20}\n                className=\"group-hover:text-destructive\"\n                role=\"button\"\n              />\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      )}\n    </div>\n  );\n};\n","import { useCallback } from \"react\";\n\nimport {\n  useAppDispatch,\n  setQueryParams,\n  useAppSelector,\n  selectQueryParams,\n  useDeleteReminderGroupMutation,\n  useUpdateReminderGroupMutation,\n} from \"store\";\nimport { handleAsync } from \"utils\";\nimport { TReminderGroup } from \"types\";\n\nexport type TUseReminderGroupItemProps = {\n  reminderGroup?: TReminderGroup;\n};\n\nexport const useReminderGroupItem = ({ reminderGroup }: TUseReminderGroupItemProps) => {\n  const { groupId } = useAppSelector(selectQueryParams);\n  const isSelected = groupId === reminderGroup?.id;\n\n  const [deleteReminderGroup, deleteReminderGroupResult] = useDeleteReminderGroupMutation();\n  const [updateReminderGroup, updateReminderGroupResult] = useUpdateReminderGroupMutation();\n\n  const dispatch = useAppDispatch();\n\n  const isLoading = deleteReminderGroupResult.isLoading || updateReminderGroupResult.isLoading;\n\n  const isErrored = deleteReminderGroupResult.isError || updateReminderGroupResult.isError;\n\n  const handleOnItemClick = useCallback(\n    (queryParams: Parameters<typeof setQueryParams>[0]) => {\n      // update the query params value in store, causing a re-fetch of the reminders\n      dispatch(setQueryParams(queryParams));\n    },\n    [dispatch]\n  );\n\n  const handleOnDelete = useCallback(\n    async (id: Parameters<typeof deleteReminderGroup>[0]) => {\n      await handleAsync(() => deleteReminderGroup(id));\n    },\n    [deleteReminderGroup]\n  );\n\n  const handleOnSave = useCallback(\n    async (props: Parameters<typeof updateReminderGroup>[0]) => {\n      await handleAsync(() =>\n        updateReminderGroup({\n          id: props.id,\n          name: props.name,\n        })\n      );\n    },\n    [updateReminderGroup]\n  );\n\n  return {\n    isSelected,\n    isLoading,\n    isErrored,\n    handleOnItemClick,\n    handleOnDelete,\n\n    handleOnSave,\n  };\n};\n","import { FC, useState } from \"react\";\n\nimport { ReminderGroupItem } from \"../ReminderGroupItem\";\nimport { AddButton, AddUpdateItem } from \"../components\";\n\nimport { useReminderGroupsList } from \"./useReminderGroupsList\";\n\nexport type TReminderGroupsListProps = Record<string, never>;\n\nexport const ReminderGroupsList: FC<TReminderGroupsListProps> = () => {\n  const [isCreating, setIsCreating] = useState(false);\n\n  const { handleOnSave, reminderGroups } = useReminderGroupsList();\n\n  return (\n    <div className=\"flex min-w-[200px] flex-1 flex-col overflow-hidden p-4\">\n      <div className=\"mb-2 mt-1 flex justify-center\">\n        <AddButton\n          size={\"full\"}\n          onClick={() => setIsCreating((isCreating) => !isCreating)}\n          disabled={isCreating}\n          data-testid={\"reminder-group-create-btn\"}\n        >\n          Add List\n        </AddButton>\n      </div>\n\n      {reminderGroups && (\n        <div className=\"flex-1 overflow-scroll\">\n          <ul className=\"divide divide-y divide-accent-dark\">\n            <li key=\"all\">\n              <ReminderGroupItem />\n            </li>\n            {reminderGroups &&\n              reminderGroups.map((reminderGroup) => (\n                <li key={reminderGroup.id}>\n                  <ReminderGroupItem reminderGroup={reminderGroup} />\n                </li>\n              ))}\n          </ul>\n        </div>\n      )}\n\n      {isCreating && (\n        <AddUpdateItem\n          onCancel={() => setIsCreating(false)}\n          onSave={(name) => {\n            handleOnSave({ name: name });\n            setIsCreating(false);\n          }}\n          testIds={{\n            cancel: `reminder-group-create-cancel`,\n            save: `reminder-group-create-save`,\n            text: `reminder-group-create-text`,\n          }}\n        />\n      )}\n    </div>\n  );\n};\n","import { useCallback } from \"react\";\n\nimport { toast } from \"sonner\";\n\nimport { useGetReminderGroupsQuery, useCreateReminderGroupMutation } from \"store\";\nimport { handleAsync } from \"utils\";\n\nexport const useReminderGroupsList = () => {\n  const getReminderGroupsResult = useGetReminderGroupsQuery();\n\n  const [createReminderGroup, createReminderGroupResult] = useCreateReminderGroupMutation();\n\n  const handleOnSave = useCallback(\n    async (props: Parameters<typeof createReminderGroup>[0]) => {\n      await handleAsync(() =>\n        createReminderGroup({\n          name: props.name,\n        })\n      );\n    },\n    [createReminderGroup]\n  );\n\n  if (createReminderGroupResult.isError) {\n    toast.error(\"Error creating reminder group\");\n  }\n\n  if (getReminderGroupsResult.isError) {\n    toast.error(\"Error fetching reminder groups\");\n  }\n\n  return {\n    reminderGroups: getReminderGroupsResult.data,\n    handleOnSave,\n  };\n};\n","import { FC } from \"react\";\n\nimport { Panel, PanelGroup, PanelResizeHandle } from \"react-resizable-panels\";\nimport { EllipsisVertical, EllipsisIcon } from \"lucide-react\";\n\nimport { useBreakpoint } from \"hooks\";\nimport { BREAKPOINTS } from \"config\";\nimport { cn } from \"utils\";\n\nimport { RemindersList } from \"./RemindersList\";\n\nimport { ReminderGroupsList } from \"./ReminderGroupsList\";\n\nexport type TRemindersProps = Record<string, never>;\n\nexport const Reminders: FC<TRemindersProps> = () => {\n  const { isBelowMd } = useBreakpoint<keyof typeof BREAKPOINTS>(\"md\", BREAKPOINTS);\n\n  return (\n    <div\n      className=\"mx-auto h-full max-w-screen-lg p-2 md:p-8\"\n      data-testid=\"reminders\"\n    >\n      <div className=\"flex h-full flex-col rounded border-2 border-primary shadow-lg lg:h-3/4\">\n        <PanelGroup\n          direction={isBelowMd ? \"vertical\" : \"horizontal\"}\n          className=\"flex-1\"\n          autoSaveId={\"reminders-panel-group\"}\n        >\n          <Panel\n            maxSize={50}\n            className=\"flex flex-col\"\n          >\n            <ReminderGroupsList />\n          </Panel>\n\n          <PanelResizeHandle className=\"group\">\n            <div\n              className={cn(\n                \"flex h-full w-full items-center border-primary group-hover:bg-secondary group-hover:text-primary\",\n                isBelowMd ? \"border-b-2\" : \"border-r-2\"\n              )}\n            >\n              {isBelowMd ? <EllipsisIcon className=\"icon mx-auto\" /> : <EllipsisVertical className=\"icon mx-auto\" />}\n            </div>\n          </PanelResizeHandle>\n\n          <Panel className=\"flex flex-col\">\n            <RemindersList />\n          </Panel>\n        </PanelGroup>\n      </div>\n    </div>\n  );\n};\n","import { useMediaQuery } from \"react-responsive\";\n\ntype TKeyAbove<K extends string> = `isAbove${Capitalize<K>}`;\ntype TKeyBelow<K extends string> = `isBelow${Capitalize<K>}`;\n\n/**\n * Custom hook that returns breakpoint information based on the provided breakpoint key and breakpoints object.\n * @param breakpointKey - The key representing the desired breakpoint. Eg. \"sm\"\n * @param BREAKPOINTS - An object containing key-value pairs of breakpoints. Eg. { sm: \"576px\", md: \"768px\" }\n * @returns An object containing the breakpoint value, and boolean flags indicating if the viewport is above or below the specified breakpoint.\n *\n * @example\n * const BREAKPOINTS = { sm: \"576px\", md: \"768px\" };\n * const { isBelowMd, isAboveMd, md } = useBreakpoint<keyof typeof BREAKPOINTS>(\"md\", BREAKPOINTS);\n *\n * if (isBelowMd) {\n *  // Do something\n * }\n * if (isAboveMd) {\n *  // Do something\n * }\n */\nexport function useBreakpoint<K extends string>(breakpointKey: K, BREAKPOINTS: Record<K, string>) {\n  const breakpointValue = BREAKPOINTS[breakpointKey];\n\n  const isBelow = useMediaQuery({\n    query: `(max-width: ${breakpointValue})`,\n  });\n\n  const capitalizedKey = breakpointKey[0].toUpperCase() + breakpointKey.substring(1);\n\n  return {\n    [breakpointKey]: Number(String(breakpointValue).replace(/[^0-9]/g, \"\")),\n    [`isAbove${capitalizedKey}`]: !isBelow,\n    [`isBelow${capitalizedKey}`]: isBelow,\n  } as Record<K, number> & Record<TKeyAbove<K> | TKeyBelow<K>, boolean>;\n}\n"],"names":["REMINDER_STATE","INACTIVE","INPROGRESS","COMPLETED","ARCHIVED","useMultiStep","_ref","totalSteps","initialStep","Error","step","setStep","useState","nextStep","useCallback","prevStep","setStepTo","newStep","isFirstStep","isLastStep","IDB_KEY","validateBeforeTransaction","db","storeName","reject","objectStoreNames","contains","validateStore","concat","name","createTransaction","dbMode","currentStore","resolve","abort","tx","transaction","onerror","oncomplete","onabort","async","getConnection","config","idbInstance","window","indexedDB","_config","_window$IDB_KEY2","waitUntil","_window","_window$IDB_KEY","Promise","request","open","databaseName","version","onsuccess","e","target","result","error","onupgradeneeded","stores","forEach","s","store","objectStore","indices","c","indexNames","createIndex","keyPath","options","createObjectStore","id","useIndexedDBStore","useMemo","getActions","getByID","then","get","catch","getOneByKey","value","index","getManyByKey","getAll","add","key","update","put","deleteByID","delete","deleteAll","clear","STORE_NAME","requestBrowserNotificationPermission","console","log","Notification","requestPermission","showNotification","title","IDB_CONFIG","useBrowserNotification","notifications","checkInterval","useEffect","init","setupIndexedDB","unsubscribe","intervalId","setInterval","now","Date","getTime","notification","_notification$repeatT","_notification$repeatI","record","repeatTimes","repeatInterval","_notification$options","_notification$options2","dueDate","notificationCount","lastNotified","showNotifications","clearInterval","BREAKPOINTS","AddButton","children","className","props","_jsxs","Button","variant","cn","_jsx","Plus","AddUpdateItem","onCancel","onSave","defaultValue","testIds","inputRef","useRef","handleOnSave","_inputRef$current","current","handleOnCancel","Input","ref","autoFocus","required","text","onClick","size","save","Check","cancel","X","formatTimeSpent","milliseconds","duration","intervalToDuration","start","end","map","unit","charAt","filter","Boolean","join","Badges","_reminder$group","reminder","listName","isOverdue","totalDurationMs","focusSessions","reduce","acc","curr","startTime","endTime","differenceInMilliseconds","group","Badge","format","useFocusSession","updateReminder","updateReminderResult","useUpdateReminderMutation","isLoading","isErrored","isError","focusSessionDuration","totalTicks","useFocusSessionWizardContext","reminderId","handleOnFinish","currentFocusSession","newFocusSession","handleAsync","isRunning","elapsedTicks","stop","autoStart","interval","onTick","onFinish","onStart","arguments","length","undefined","warn","timeoutIdRef","remainingTicks","setRemainingTicks","setIsRunning","isFirstTick","hasTimerEnded","clearTimeout","pause","currentTick","setTimeout","ticks","useTimer","progress","handleOnStart","currentDate","toISOString","addSeconds","handleOnStop","onStop","elapsedDuration","FormattedFocusedTime","totalSeconds","hours","Math","floor","minutes","remainingSeconds","FocusTimer","_ref2","radius","circumference","PI","strokeDashoffset","max","style","width","height","fill","strokeWidth","r","cx","cy","strokeDasharray","strokeLinecap","transform","transformOrigin","Square","Play","Steps","FocusSessionDuration","hoursRef","minutesRef","setFocusSessionDuration","_Fragment","DialogHeader","DialogTitle","DialogDescription","ValueSetter","initialValue","onChange","min","handleOnClick","FocusSession","truncateText","maxLength","FocusSessionWizardContext","createContext","FocusSessionWizardProvider","Provider","context","useContext","FocusSessionWizard","Component","FocusSessionTracker","DIALOGS","ReminderItem","isDropdownOpen","setIsDropdownOpen","isUpdating","setIsUpdating","dialog","setDialog","repeatTimesRef","repeatIntervalRef","toString","handleOnDelete","handleOnUpdate","deleteReminder","deleteReminderResult","useDeleteReminderMutation","groupId","state","isPinned","useReminderItem","isMenuDisabled","isCompleted","Checkbox","checked","Typography","affects","Dialog","DropdownMenu","onOpenChange","modal","DropdownMenuTrigger","asChild","disabled","ChevronUp","ChevronDown","DropdownMenuContent","align","onInteractOutside","DropdownMenuItem","Pin","role","DropdownMenuSeparator","DialogTrigger","Timer","CalendarClock","Pencil","Trash","DialogContent","DateTimePicker","date","selectedDateTime","classNames","container","controls","Select","onValueChange","v","SelectTrigger","SelectValue","placeholder","SelectContent","SelectGroup","SelectItem","DialogClose","Number","RemindersList","reminders","refetchReminders","reminderGroup","useRemindersList","queryParams","useSelectQueryParams","getRemindersResult","useGetRemindersQuery","getReminderGroupResult","useGetReminderGroupQuery","skip","createReminder","createReminderResult","useCreateReminderMutation","toast","currentData","refetch","body","useRemindersNotification","isCreating","setIsCreating","RefreshCcw","slice","sort","a","b","ReminderGroupItem","handleOnItemClick","isSelected","useAppSelector","selectQueryParams","deleteReminderGroup","deleteReminderGroupResult","useDeleteReminderGroupMutation","updateReminderGroup","updateReminderGroupResult","useUpdateReminderGroupMutation","dispatch","useAppDispatch","setQueryParams","useReminderGroupItem","renderItem","ReminderGroupsList","reminderGroups","useReminderGroupsList","getReminderGroupsResult","useGetReminderGroupsQuery","createReminderGroup","createReminderGroupResult","useCreateReminderGroupMutation","data","Reminders","isBelowMd","breakpointKey","breakpointValue","isBelow","useMediaQuery","query","capitalizedKey","toUpperCase","substring","String","replace","useBreakpoint","PanelGroup","direction","autoSaveId","Panel","maxSize","PanelResizeHandle","EllipsisIcon","EllipsisVertical"],"sourceRoot":""}