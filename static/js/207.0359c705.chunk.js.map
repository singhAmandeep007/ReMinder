{"version":3,"file":"static/js/207.0359c705.chunk.js","mappings":"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","sources":["views/Reminders/components/DeleteButton.tsx","views/Reminders/components/AddButton.tsx","views/Reminders/components/IconButton.tsx","views/Reminders/ReminderItem.tsx","views/Reminders/RemindersList.tsx","views/Reminders/ReminderGroupItem/ReminderGroupItem.tsx","views/Reminders/ReminderGroupList.tsx","views/Reminders/useAddItem.tsx","views/Reminders/Reminders.tsx"],"sourcesContent":["import { FC } from \"react\";\nimport { Trash } from \"lucide-react\";\n\nimport { cn } from \"shared\";\n\nimport { Button, TButtonProps } from \"components\";\n\nexport const DeleteButton: FC<TButtonProps> = ({ children, className, ...props }) => {\n  return (\n    <Button\n      size=\"icon\"\n      variant={\"ghost\"}\n      className={cn(\"shrink-0 opacity-30 hover:bg-accent-dark hover:text-destructive hover:opacity-100\", className)}\n      {...props}\n    >\n      <Trash className=\"icon\" />\n      {children}\n    </Button>\n  );\n};\n","import { FC } from \"react\";\nimport { Plus } from \"lucide-react\";\n\nimport { cn } from \"shared\";\n\nimport { Button, TButtonProps } from \"components\";\n\nexport const AddButton: FC<TButtonProps> = ({ children, className, ...props }) => {\n  return (\n    <Button\n      variant={\"ghost\"}\n      className={cn(\"gap-1 border border-accent-dark hover:bg-accent-dark hover:text-primary\", className)}\n      {...props}\n    >\n      <Plus className=\"icon\" />\n      {children}\n    </Button>\n  );\n};\n","import { FC } from \"react\";\n\nimport { cn } from \"shared\";\n\nimport { Button, TButtonProps } from \"components\";\n\nexport const IconButton: FC<TButtonProps> = ({ children, className, ...props }) => {\n  return (\n    <Button\n      size={\"icon\"}\n      variant={\"ghost\"}\n      className={cn(\"shrink-0 bg-accent-dark hover:bg-background hover:text-primary\", className)}\n      {...props}\n    >\n      {children}\n    </Button>\n  );\n};\n","import { FC, PropsWithChildren } from \"react\";\n\nimport { TReminder } from \"types\";\nimport { Typography } from \"components\";\n\nimport { useDeleteReminderMutation } from \"shared\";\n\nimport { DeleteButton } from \"./components\";\n\nexport type TReminderItemProps = {\n  reminder: TReminder;\n};\n\nexport const ReminderItem: FC<PropsWithChildren<TReminderItemProps>> = ({ reminder }) => {\n  const [deleteReminder] = useDeleteReminderMutation();\n\n  return (\n    <div\n      className=\"flex items-center justify-between gap-2 py-2\"\n      data-testid={`reminder-item-${reminder.id}`}\n    >\n      <Typography\n        variant={\"p\"}\n        className=\"overflow-x-scroll text-nowrap py-2\"\n      >\n        {reminder.title}\n      </Typography>\n      <DeleteButton\n        data-testid={`delete-reminder-item-${reminder.id}`}\n        onClick={() => deleteReminder(reminder.id)}\n      />\n    </div>\n  );\n};\n","import { FC, PropsWithChildren } from \"react\";\n\nimport { RefreshCcw } from \"lucide-react\";\n\nimport { Button, Typography } from \"components\";\n\nimport { useGetRemindersQuery, useSelectQueryParams, useGetReminderGroupQuery } from \"shared\";\n\nimport { ReminderItem } from \"./ReminderItem\";\nimport { AddButton } from \"./components\";\n\nexport type TRemindersListProps = Record<string, never>;\n\nexport const RemindersList: FC<PropsWithChildren<TRemindersListProps>> = () => {\n  const queryParams = useSelectQueryParams();\n\n  const { currentData: reminders, refetch } = useGetRemindersQuery(queryParams);\n\n  const { currentData: reminderGroup } = useGetReminderGroupQuery(queryParams.groupId as string, {\n    skip: !queryParams.groupId,\n  });\n\n  return (\n    <div className=\"flex flex-1 flex-col overflow-hidden p-4\">\n      <div className=\"mb-2 flex items-center justify-between gap-2\">\n        <Typography\n          variant={\"h4\"}\n          className=\"flex items-center justify-between overflow-x-scroll text-nowrap py-2 \"\n          data-testid=\"active-list-title\"\n        >\n          {reminderGroup?.name || \"All\"}\n        </Typography>\n        <div className=\"flex gap-2\">\n          <Button\n            size={\"icon\"}\n            variant={\"ghost\"}\n            className=\"hover:text-primary\"\n            data-testid=\"refresh-reminder-list\"\n          >\n            <RefreshCcw\n              className=\"icon\"\n              onClick={refetch}\n            />\n          </Button>\n\n          <AddButton size={\"icon\"} />\n        </div>\n      </div>\n\n      {reminders && (\n        <div className=\"flex-1 overflow-scroll\">\n          <ul className=\"divide divide-y\">\n            {reminders.map((reminder) => {\n              return (\n                <li key={reminder.id}>\n                  <ReminderItem reminder={reminder} />\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { FC, PropsWithChildren, useCallback, useMemo, useRef, useState } from \"react\";\n\nimport { ChevronDown, ChevronUp, Pencil, Trash, Check, X } from \"lucide-react\";\n\nimport { TReminderGroup } from \"types\";\n\nimport { Button, Typography, DropdownMenu, Input } from \"components\";\n\nimport {\n  useAppDispatch,\n  setQueryParams,\n  useAppSelector,\n  selectQueryParams,\n  cn,\n  useDeleteReminderGroupMutation,\n  useUpdateReminderGroupMutation,\n  handleAsync,\n} from \"shared\";\n\nimport { IconButton } from \"../components\";\n\nexport type TReminderGroupItemProps = {\n  reminderGroup?: TReminderGroup;\n};\n\nexport const ReminderGroupItem: FC<PropsWithChildren<TReminderGroupItemProps>> = ({ reminderGroup }) => {\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n  const [isEditing, setIsEditing] = useState(false);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const dispatch = useAppDispatch();\n  const [deleteReminderGroup, deleteReminderGroupResult] = useDeleteReminderGroupMutation();\n  const [updateReminderGroup, updateReminderGroupResult] = useUpdateReminderGroupMutation();\n  const { groupId } = useAppSelector(selectQueryParams);\n  const isSelected = groupId === reminderGroup?.id;\n  const isMenuDisabled = deleteReminderGroupResult.isLoading || updateReminderGroupResult.isLoading;\n\n  const className = cn(\"py-2 flex items-center justify-between cursor-pointer gap-2\");\n\n  const handleOnItemClick = useCallback(\n    (queryParams: Parameters<typeof setQueryParams>[0]) => {\n      // update the query params value in store, causing a re-fetch of the reminders\n      dispatch(setQueryParams(queryParams));\n    },\n    [dispatch]\n  );\n\n  const handleOnDelete = useCallback(\n    async (id: Parameters<typeof deleteReminderGroup>[0]) => {\n      await handleAsync(() => deleteReminderGroup(id));\n    },\n    [deleteReminderGroup]\n  );\n\n  const handleOnEdit = useCallback(\n    async (payload: Parameters<typeof updateReminderGroup>[0]) => {\n      await handleAsync(() => updateReminderGroup(payload));\n      setIsEditing(false);\n    },\n    [updateReminderGroup]\n  );\n\n  const renderItem = useMemo(() => {\n    if (reminderGroup && isEditing) {\n      return (\n        <div className=\"flex flex-1 items-center justify-between\">\n          <Input\n            className=\"ml-1 mr-2\"\n            defaultValue={reminderGroup.name}\n            ref={inputRef}\n            autoFocus\n          />\n          <div className=\"flex items-center gap-1\">\n            <IconButton onClick={() => handleOnEdit({ id: reminderGroup.id, name: inputRef.current!.value })}>\n              <Check className=\"icon\" />\n            </IconButton>\n            <IconButton onClick={() => setIsEditing(false)}>\n              <X className=\"icon text-destructive\" />\n            </IconButton>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <Typography\n        variant={\"p\"}\n        className={cn(\"overflow-x-scroll text-nowrap py-2\", isSelected && \"text-primary\")}\n        onClick={() => handleOnItemClick({ groupId: reminderGroup ? reminderGroup.id : undefined })}\n      >\n        {reminderGroup ? reminderGroup.name : \"All\"}\n      </Typography>\n    );\n  }, [reminderGroup, isEditing, isSelected, handleOnItemClick, handleOnEdit]);\n\n  return (\n    <div\n      className={`${className}`}\n      data-testid={`reminder-group-item-${reminderGroup ? reminderGroup.id : \"all\"}`}\n    >\n      {renderItem}\n\n      {reminderGroup && !isEditing && (\n        <DropdownMenu\n          data={[\n            {\n              id: \"edit\",\n              component: () => (\n                <IconButton\n                  data-testid={`reminder-group-item-edit-${reminderGroup.id}`}\n                  onClick={() => setIsEditing(true)}\n                >\n                  <Pencil className=\"icon\" />\n                </IconButton>\n              ),\n            },\n            {\n              id: \"delete\",\n              component: () => (\n                <IconButton\n                  data-testid={`reminder-group-item-delete-${reminderGroup.id}`}\n                  onClick={() => handleOnDelete(reminderGroup.id)}\n                  className=\"hover:text-destructive\"\n                >\n                  <Trash className=\"icon\" />\n                </IconButton>\n              ),\n            },\n          ]}\n          triggerer={(props) => (\n            <Button\n              variant=\"secondary\"\n              size=\"icon\"\n              data-testid={`reminder-group-item-menu-${reminderGroup.id}`}\n              disabled={isMenuDisabled}\n              {...props}\n            >\n              {isDropdownOpen ? <ChevronUp className=\"icon\" /> : <ChevronDown className=\"icon\" />}\n            </Button>\n          )}\n          isOpen={isDropdownOpen}\n          onToggle={setIsDropdownOpen}\n          itemRenderer={(item) => item.component()}\n          position=\"bottom-right\"\n        />\n      )}\n    </div>\n  );\n};\n","import { FC, PropsWithChildren, useState } from \"react\";\n\nimport { useGetReminderGroupsQuery } from \"shared\";\n\nimport { ReminderGroupItem } from \"./ReminderGroupItem\";\nimport { AddButton } from \"./components\";\nimport { useAddItem } from \"./useAddItem\";\n\nexport type TReminderGroupListProps = Record<string, never>;\n\nexport const ReminderGroupList: FC<PropsWithChildren<TReminderGroupListProps>> = () => {\n  const { data: reminderGroups } = useGetReminderGroupsQuery();\n\n  const [isCreating, setIsCreating] = useState(false);\n\n  const { AddItemComponent } = useAddItem({\n    type: \"reminderGroup\",\n    onCancel: () => setIsCreating(false),\n    onSave: () => setIsCreating(false),\n  });\n\n  return (\n    <div className=\"flex min-w-[200px] flex-1 flex-col overflow-hidden p-4\">\n      <div className=\"mb-2 mt-1 flex justify-center\">\n        <AddButton\n          size={\"full\"}\n          onClick={() => setIsCreating((isCreating) => !isCreating)}\n          disabled={isCreating}\n        >\n          Add List\n        </AddButton>\n      </div>\n\n      <div className=\"flex-1 overflow-scroll\">\n        <ul className=\"divide divide-y divide-accent-dark\">\n          <li key=\"all\">\n            <ReminderGroupItem />\n          </li>\n          {reminderGroups &&\n            reminderGroups.map((reminderGroup) => {\n              return (\n                <li key={reminderGroup.id}>\n                  <ReminderGroupItem reminderGroup={reminderGroup} />\n                </li>\n              );\n            })}\n        </ul>\n      </div>\n\n      {isCreating && <AddItemComponent />}\n    </div>\n  );\n};\n","import { useCallback, useRef } from \"react\";\n\nimport { Check, X } from \"lucide-react\";\n\nimport { Input } from \"components\";\nimport { useCreateReminderGroupMutation, useCreateReminderMutation, handleAsync } from \"shared\";\n\nimport { IconButton } from \"./components\";\n\nexport type TUseAddItemProps = {\n  onSave?: () => void;\n  onCancel?: () => void;\n  type: \"reminder\" | \"reminderGroup\";\n  value?: string;\n};\n\nexport const useAddItem = ({ onSave, onCancel, type, value = \"\" }: TUseAddItemProps) => {\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [createReminder, createReminderResult] = useCreateReminderMutation();\n  const [createReminderGroup, createReminderGroupResult] = useCreateReminderGroupMutation();\n\n  const handleOnSave = useCallback(async () => {\n    if (type === \"reminder\") {\n      await handleAsync(() => createReminder({ title: inputRef.current!.value }));\n    }\n    if (type === \"reminderGroup\") {\n      await handleAsync(() => createReminderGroup({ name: inputRef.current!.value }));\n    }\n\n    onSave?.();\n  }, [onSave, createReminder, createReminderGroup, type]);\n\n  const handleOnCancel = useCallback(() => {\n    onCancel?.();\n  }, [onCancel]);\n\n  const AddItemComponent = () => {\n    return (\n      <div className=\"my-2 flex items-center justify-between\">\n        <Input\n          className=\"ml-1 mr-2\"\n          defaultValue={value}\n          ref={inputRef}\n          autoFocus\n        />\n        <div className=\"flex items-center gap-1\">\n          <IconButton onClick={handleOnSave}>\n            <Check className=\"icon\" />\n          </IconButton>\n          <IconButton onClick={handleOnCancel}>\n            <X className=\"icon text-destructive\" />\n          </IconButton>\n        </div>\n      </div>\n    );\n  };\n\n  const result = type === \"reminder\" ? createReminderResult : createReminderGroupResult;\n\n  return {\n    AddItemComponent,\n    result,\n  };\n};\n","import { FC, PropsWithChildren } from \"react\";\n\nimport { Panel, PanelGroup, PanelResizeHandle } from \"react-resizable-panels\";\nimport { EllipsisVertical, EllipsisIcon } from \"lucide-react\";\n\nimport { useBreakpoint } from \"hooks\";\nimport { cn } from \"shared\";\nimport { Typography } from \"components\";\n\nimport { RemindersList } from \"./RemindersList\";\n\nimport { ReminderGroupList } from \"./ReminderGroupList\";\n\nexport type TRemindersProps = Record<string, never>;\n\nexport const Reminders: FC<PropsWithChildren<TRemindersProps>> = () => {\n  const { isBelowMd } = useBreakpoint(\"md\");\n\n  return (\n    <div className=\"mx-auto h-full max-w-screen-md p-2 md:p-8\">\n      <div className=\"flex h-full flex-col rounded border-2 border-primary shadow-lg lg:h-3/4\">\n        <nav className=\"flex h-[--navbar-height] border-b-2 border-primary\">\n          <ul className=\"flex flex-1 items-center justify-between px-4\">\n            <li>\n              <Typography\n                variant={\"h2\"}\n                className=\"pb-0\"\n              >\n                Reminders\n              </Typography>\n            </li>\n          </ul>\n        </nav>\n\n        <PanelGroup\n          direction={isBelowMd ? \"vertical\" : \"horizontal\"}\n          className=\"flex-1\"\n          autoSaveId={\"reminders-panel-group\"}\n        >\n          <Panel\n            maxSize={50}\n            className=\"flex flex-col\"\n          >\n            <ReminderGroupList />\n          </Panel>\n\n          <PanelResizeHandle className=\"group\">\n            <div\n              className={cn(\n                \"flex h-full w-full items-center border-primary group-hover:bg-secondary group-hover:text-primary\",\n                isBelowMd ? \"border-b-2\" : \"border-r-2\"\n              )}\n            >\n              {isBelowMd ? <EllipsisIcon className=\"icon mx-auto\" /> : <EllipsisVertical className=\"icon mx-auto\" />}\n            </div>\n          </PanelResizeHandle>\n\n          <Panel className=\"flex flex-col\">\n            <RemindersList />\n          </Panel>\n        </PanelGroup>\n      </div>\n    </div>\n  );\n};\n"],"names":["DeleteButton","_ref","children","className","props","_jsxs","Button","size","variant","cn","_jsx","Trash","AddButton","Plus","IconButton","ReminderItem","reminder","deleteReminder","useDeleteReminderMutation","concat","id","Typography","title","onClick","RemindersList","queryParams","useSelectQueryParams","currentData","reminders","refetch","useGetRemindersQuery","reminderGroup","useGetReminderGroupQuery","groupId","skip","name","RefreshCcw","map","ReminderGroupItem","isDropdownOpen","setIsDropdownOpen","useState","isEditing","setIsEditing","inputRef","useRef","dispatch","useAppDispatch","deleteReminderGroup","deleteReminderGroupResult","useDeleteReminderGroupMutation","updateReminderGroup","updateReminderGroupResult","useUpdateReminderGroupMutation","useAppSelector","selectQueryParams","isSelected","isMenuDisabled","isLoading","handleOnItemClick","useCallback","setQueryParams","handleOnDelete","async","handleAsync","handleOnEdit","payload","renderItem","useMemo","Input","defaultValue","ref","autoFocus","current","value","Check","X","undefined","DropdownMenu","data","component","Pencil","triggerer","disabled","ChevronUp","ChevronDown","isOpen","onToggle","itemRenderer","item","position","ReminderGroupList","reminderGroups","useGetReminderGroupsQuery","isCreating","setIsCreating","AddItemComponent","onSave","onCancel","type","createReminder","createReminderResult","useCreateReminderMutation","createReminderGroup","createReminderGroupResult","useCreateReminderGroupMutation","handleOnSave","handleOnCancel","result","useAddItem","Reminders","isBelowMd","useBreakpoint","PanelGroup","direction","autoSaveId","Panel","maxSize","PanelResizeHandle","EllipsisIcon","EllipsisVertical"],"sourceRoot":""}