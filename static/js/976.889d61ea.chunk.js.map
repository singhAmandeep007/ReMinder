{"version":3,"file":"static/js/976.889d61ea.chunk.js","mappings":"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","sources":["views/Reminders/components/DeleteButton.tsx","views/Reminders/ReminderItem.tsx","views/Reminders/RemindersList.tsx","views/Reminders/RemindersGroupItem.tsx","views/Reminders/RemindersGroupList.tsx","views/Reminders/Reminders.tsx"],"sourcesContent":["import { FC } from \"react\";\nimport { Trash } from \"lucide-react\";\n\nimport { Button, TButtonProps } from \"components\";\n\nexport const DeleteButton: FC<TButtonProps> = ({ children, ...props }) => {\n  return (\n    <Button\n      size=\"icon\"\n      variant={\"ghost\"}\n      className=\"shrink-0 opacity-30 hover:bg-accent-dark hover:text-destructive hover:opacity-100\"\n      {...props}\n    >\n      <Trash className=\"icon\" />\n      {children}\n    </Button>\n  );\n};\n","import { FC, PropsWithChildren } from \"react\";\n\nimport { TReminder } from \"types\";\n\nimport { DeleteButton } from \"./components\";\n\nexport type TReminderItemProps = {\n  reminder: TReminder;\n};\n\nexport const ReminderItem: FC<PropsWithChildren<TReminderItemProps>> = ({ reminder }) => {\n  return (\n    <div\n      className=\"flex flex-1 items-center justify-between gap-2 py-2\"\n      data-testid={`reminder-item-${reminder.id}`}\n    >\n      <div>{reminder.title}</div>\n      <DeleteButton data-testid={`delete-reminder-item-${reminder.id}`} />\n    </div>\n  );\n};\n","import { FC, PropsWithChildren } from \"react\";\n\nimport { RefreshCcw } from \"lucide-react\";\n\nimport { Button, Typography } from \"components\";\n\nimport { useGetRemindersQuery, selectQueryParams, useAppSelector, selectRemindersGroups } from \"shared\";\n\nimport { ReminderItem } from \"./ReminderItem\";\n\nexport type TRemindersListProps = Record<string, never>;\n\nexport const RemindersList: FC<PropsWithChildren<TRemindersListProps>> = () => {\n  const queryParams = useAppSelector(selectQueryParams);\n\n  const { data: reminders, refetch } = useGetRemindersQuery(queryParams);\n\n  const { data: remindersGroups } = useAppSelector(selectRemindersGroups());\n\n  const remindersGroupName =\n    remindersGroups && remindersGroups.find((remindersGroup) => remindersGroup.id === queryParams.groupId)?.name;\n\n  return (\n    <div className=\"flex flex-1 flex-col overflow-hidden p-4\">\n      <div className=\"mb-2 flex items-center justify-between\">\n        <Typography\n          variant={\"h3\"}\n          className=\"text-md flex items-center justify-between font-bold leading-none\"\n          data-testid=\"active-list-title\"\n        >\n          {remindersGroupName || \"All\"}\n        </Typography>\n        <div className=\"flex gap-2\">\n          <Button\n            size={\"icon\"}\n            variant={\"ghost\"}\n            className=\"hover:text-primary\"\n            data-testid=\"refresh-reminder-list\"\n          >\n            <RefreshCcw\n              className=\"icon\"\n              onClick={refetch}\n            />\n          </Button>\n        </div>\n      </div>\n      {reminders && (\n        <div className=\"flex-1 overflow-scroll\">\n          <ul className=\"divide divide-y\">\n            {reminders.map((reminder) => {\n              return (\n                <li key={reminder.id}>\n                  <ReminderItem reminder={reminder} />\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { FC, PropsWithChildren, useCallback } from \"react\";\n\nimport { TRemindersGroup } from \"types\";\n\nimport { useAppDispatch, setQueryParams, useAppSelector, selectQueryParams, cn } from \"shared\";\n\nimport { DeleteButton } from \"./components\";\n\nexport type TRemindersGroupItemProps = {\n  remindersGroup?: TRemindersGroup;\n};\n\nexport const RemindersGroupItem: FC<PropsWithChildren<TRemindersGroupItemProps>> = ({ remindersGroup }) => {\n  const dispatch = useAppDispatch();\n\n  const { groupId } = useAppSelector(selectQueryParams);\n\n  const isSelected = groupId === remindersGroup?.id;\n\n  const className = cn(\"flex flex-1 items-center justify-between py-2 cursor-pointer gap-2\");\n\n  const titleClassName = cn(isSelected && \"text-primary\");\n\n  const handleOnClick = useCallback(\n    (queryParams: Parameters<typeof setQueryParams>[0]) => {\n      dispatch(setQueryParams(queryParams));\n    },\n    [dispatch]\n  );\n\n  if (!remindersGroup) {\n    return (\n      <div\n        className={className}\n        data-testid=\"reminders-group-item-all\"\n        onClick={() => handleOnClick({ groupId: undefined })}\n      >\n        <div className={titleClassName}>All</div>\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={className}\n      data-testid={`reminders-group-item-${remindersGroup.id}`}\n      onClick={() => handleOnClick({ groupId: remindersGroup.id })}\n    >\n      <div className={titleClassName}> {remindersGroup.name}</div>\n\n      <DeleteButton data-testid={`delete-reminders-group-item-${remindersGroup.id}`} />\n    </div>\n  );\n};\n","import { FC, PropsWithChildren } from \"react\";\n\nimport { Plus } from \"lucide-react\";\n\nimport { useGetRemindersGroupsQuery } from \"shared\";\n\nimport { Button } from \"components\";\n\nimport { RemindersGroupItem } from \"./RemindersGroupItem\";\n\nexport type TRemindersGroupListProps = Record<string, never>;\n\nexport const RemindersGroupList: FC<PropsWithChildren<TRemindersGroupListProps>> = () => {\n  const { data: remindersGroups } = useGetRemindersGroupsQuery();\n\n  return (\n    <div className=\"flex min-w-[200px] flex-1 flex-col overflow-hidden bg-secondary p-4\">\n      <div className=\"mb-2 flex justify-center\">\n        <Button\n          className=\"gap-1 hover:bg-accent-dark hover:text-primary\"\n          variant={\"ghost\"}\n        >\n          <Plus className=\"icon\" />\n          Add list\n        </Button>\n      </div>\n      <div className=\"flex-1 overflow-scroll\">\n        <ul className=\"divide divide-y\">\n          <li key=\"all\">\n            <RemindersGroupItem />\n          </li>\n          {remindersGroups &&\n            remindersGroups.map((remindersGroup) => {\n              return (\n                <li key={remindersGroup.id}>\n                  <RemindersGroupItem remindersGroup={remindersGroup} />\n                </li>\n              );\n            })}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import { FC, PropsWithChildren } from \"react\";\n\nimport { Panel, PanelGroup, PanelResizeHandle } from \"react-resizable-panels\";\nimport { EllipsisVertical, EllipsisIcon } from \"lucide-react\";\n\nimport { useBreakpoint } from \"hooks\";\nimport { cn } from \"shared\";\n\nimport { RemindersList } from \"./RemindersList\";\n\nimport { RemindersGroupList } from \"./RemindersGroupList\";\n\nexport type TRemindersProps = Record<string, never>;\n\nexport const Reminders: FC<PropsWithChildren<TRemindersProps>> = () => {\n  const { isBelowMd } = useBreakpoint(\"md\");\n\n  return (\n    <div className=\"mx-auto h-full max-w-screen-md p-8\">\n      <div className=\"flex h-full flex-col rounded border-2 border-primary shadow-lg lg:h-3/4\">\n        <nav className=\"flex h-[--navbar-height] border-b-2 border-primary\">\n          <ul className=\"flex flex-1 items-center justify-between px-4\">\n            <li>Reminders</li>\n          </ul>\n        </nav>\n\n        <PanelGroup\n          direction={isBelowMd ? \"vertical\" : \"horizontal\"}\n          className=\"flex-1\"\n          // autoSaveId={\"reminders-panel-group\"}\n        >\n          <Panel\n            maxSize={50}\n            className=\"flex flex-col\"\n          >\n            <RemindersGroupList />\n          </Panel>\n\n          <PanelResizeHandle className=\"group\">\n            <div\n              className={cn(\n                \"flex h-full w-8 items-center border-primary bg-secondary\",\n                isBelowMd ? \"h-8 w-full border-b-2\" : \"border-r-2\"\n              )}\n            >\n              <span\n                className={cn(\n                  \"mx-auto rounded group-hover:bg-primary group-hover:text-secondary\",\n                  isBelowMd ? \"px-1\" : \"py-1\"\n                )}\n              >\n                {isBelowMd ? <EllipsisIcon className=\"icon\" /> : <EllipsisVertical className={\"icon\"} />}\n              </span>\n            </div>\n          </PanelResizeHandle>\n\n          <Panel className=\"flex flex-col\">\n            <RemindersList />\n          </Panel>\n        </PanelGroup>\n      </div>\n    </div>\n  );\n};\n"],"names":["DeleteButton","_ref","children","props","_jsxs","Button","size","variant","className","_jsx","Trash","ReminderItem","reminder","concat","id","title","RemindersList","_remindersGroups$find","queryParams","useAppSelector","selectQueryParams","data","reminders","refetch","useGetRemindersQuery","remindersGroups","selectRemindersGroups","remindersGroupName","find","remindersGroup","groupId","name","Typography","RefreshCcw","onClick","map","RemindersGroupItem","dispatch","useAppDispatch","isSelected","cn","titleClassName","handleOnClick","useCallback","setQueryParams","undefined","RemindersGroupList","useGetRemindersGroupsQuery","Plus","Reminders","isBelowMd","useBreakpoint","PanelGroup","direction","Panel","maxSize","PanelResizeHandle","EllipsisIcon","EllipsisVertical"],"sourceRoot":""}