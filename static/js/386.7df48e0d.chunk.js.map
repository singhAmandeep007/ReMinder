{"version":3,"file":"static/js/386.7df48e0d.chunk.js","mappings":"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","sources":["services/mocker/msw/controllers/reminders.ts","services/mocker/msw/controllers/utils.ts"],"sourcesContent":["import { HttpResponse, http } from \"msw\";\n\nimport {\n  TCreateReminderRequestPayload,\n  TDeleteReminderRequestPayload,\n  TDeleteReminderResponsePayload,\n  TReminder,\n  TReminderGroup,\n  TCreateReminderResponsePayload,\n  THTTPError,\n} from \"types\";\n\nimport { uuid, getUrlSearchParams } from \"shared\";\n\nimport { urlPrefix } from \"./utils\";\n\nconst group1: TReminderGroup = {\n  id: uuid(),\n  name: \"group 1\",\n  createdAt: \"2021-09-01T00:00:00Z\",\n  updatedAt: \"2021-09-01T00:00:00Z\",\n};\nconst group2: TReminderGroup = {\n  id: uuid(),\n  name: \"group 2\",\n  createdAt: \"2021-09-03T00:00:00Z\",\n  updatedAt: \"2021-09-03T00:00:00Z\",\n};\n\nconst reminderGroups: TReminderGroup[] = [group1, group2];\n\nconst reminders: TReminder[] = [\n  {\n    id: uuid(),\n    state: \"ACTIVE\",\n    title: \"task 1.1\",\n    isPinned: false,\n    group: group1,\n    createdAt: \"2021-09-02T00:00:00Z\",\n    updatedAt: \"2021-09-02T00:00:00Z\",\n  },\n  {\n    id: uuid(),\n    state: \"ACTIVE\",\n    title: \"task 1.2\",\n    isPinned: false,\n    group: group1,\n    createdAt: \"2021-10-04T00:00:00Z\",\n    updatedAt: \"2021-10-04T00:00:00Z\",\n  },\n\n  {\n    id: uuid(),\n    state: \"ACTIVE\",\n    title: \"task 2.2\",\n    isPinned: false,\n    group: group2,\n    createdAt: \"2021-10-04T00:00:00Z\",\n    updatedAt: \"2021-10-04T00:00:00Z\",\n  },\n  {\n    id: uuid(),\n    state: \"ACTIVE\",\n    title: \"task 3.1\",\n    isPinned: false,\n    createdAt: \"2021-10-05T00:00:00Z\",\n    updatedAt: \"2021-10-05T00:00:00Z\",\n  },\n  {\n    id: uuid(),\n    state: \"ACTIVE\",\n    title: \"task 3.2\",\n    isPinned: false,\n    createdAt: \"2021-10-05T00:00:00Z\",\n    updatedAt: \"2021-10-05T00:00:00Z\",\n    group: group2,\n  },\n];\n\nexport const getReminders = http.get(urlPrefix(\"/reminders\"), ({ request }) => {\n  const searchParams = getUrlSearchParams(request.url);\n\n  let data = structuredClone(reminders) as TReminder[];\n\n  if (searchParams[\"groupId\"]) {\n    data = data.filter((reminder) => reminder?.group?.id === searchParams[\"groupId\"]);\n  }\n\n  if (searchParams[\"state\"]) {\n    data = data.filter((reminder) => reminder.state === searchParams[\"state\"]);\n  }\n\n  return HttpResponse.json({ data }, { status: 200 });\n});\n\nexport const getReminderGroups = http.get(urlPrefix(\"/reminder-groups\"), () => {\n  return HttpResponse.json({ data: reminderGroups }, { status: 200 });\n});\n\nexport const createReminder = http.post<\n  never,\n  TCreateReminderRequestPayload,\n  TCreateReminderResponsePayload | THTTPError\n>(urlPrefix(\"/reminders\"), async ({ request }) => {\n  const { title, groupId } = await request.json();\n\n  const group = reminderGroups.find((group) => group.id === groupId);\n\n  if (groupId && !group) {\n    return HttpResponse.json({ message: `Reminder Group with id ${groupId} not found!` }, { status: 404 });\n  }\n\n  const newReminder: TReminder = {\n    id: uuid(),\n    state: \"ACTIVE\",\n    title: title,\n    isPinned: false,\n    ...(groupId ? group : {}),\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n  };\n\n  reminders.push(newReminder);\n\n  return HttpResponse.json({ data: newReminder }, { status: 201 });\n});\n\nexport const deleteReminder = http.delete<{ id: TDeleteReminderRequestPayload }, never, TDeleteReminderResponsePayload>(\n  urlPrefix(\"/reminders/:id\"),\n  ({ params }) => {\n    const reminderIndex = reminders.findIndex((reminder) => reminder.id === params.id);\n\n    if (reminderIndex === -1) {\n      return HttpResponse.json({ message: `Reminder with id ${params.id} not found!` }, { status: 404 });\n    }\n\n    reminders.splice(reminderIndex, 1);\n\n    return HttpResponse.json({ message: `Reminder with id ${params.id} deleted!` }, { status: 200 });\n  }\n);\n","const apiUrl = process.env.REACT_APP_API_URL;\n\nexport const urlPrefix = (path: string) => {\n  if (path[0] !== \"/\") {\n    throw new Error(\"MSW handler path should start with a forward slash.\");\n  }\n  const isApiUrlEndsWithSlash = apiUrl[apiUrl.length - 1] === \"/\";\n\n  if (isApiUrlEndsWithSlash) {\n    return `${apiUrl}${path.slice(1)}`;\n  }\n  return `${apiUrl}${path}`;\n};\n"],"names":["group1","id","uuid","name","createdAt","updatedAt","group2","reminderGroups","reminders","state","title","isPinned","group","getReminders","http","get","urlPrefix","_ref","request","searchParams","getUrlSearchParams","url","data","structuredClone","filter","reminder","_reminder$group","HttpResponse","json","status","getReminderGroups","createReminder","post","async","_ref2","groupId","find","message","concat","newReminder","Date","toISOString","push","deleteReminder","delete","_ref3","params","reminderIndex","findIndex","splice","apiUrl","process","path","Error","slice"],"sourceRoot":""}