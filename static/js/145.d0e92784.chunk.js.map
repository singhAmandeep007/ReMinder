{"version":3,"file":"static/js/145.d0e92784.chunk.js","mappings":"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","sources":["views/Reminders/components/AddButton.tsx","views/Reminders/components/IconButton.tsx","views/Reminders/useCreateUpdateItem.tsx","views/Reminders/ReminderItem/ReminderItem.tsx","views/Reminders/RemindersList.tsx","views/Reminders/ReminderGroupItem/ReminderGroupItem.tsx","views/Reminders/ReminderGroupList.tsx","views/Reminders/Reminders.tsx"],"sourcesContent":["import { FC } from \"react\";\nimport { Plus } from \"lucide-react\";\n\nimport { cn } from \"shared\";\n\nimport { Button, TButtonProps } from \"components\";\n\nexport const AddButton: FC<TButtonProps> = ({ children, className, ...props }) => {\n  return (\n    <Button\n      variant={\"ghost\"}\n      className={cn(\"gap-1 border border-accent-dark hover:bg-accent-dark hover:text-primary\", className)}\n      {...props}\n    >\n      <Plus className=\"icon\" />\n      {children}\n    </Button>\n  );\n};\n","import { FC } from \"react\";\n\nimport { cn } from \"shared\";\n\nimport { Button, TButtonProps } from \"components\";\n\nexport const IconButton: FC<TButtonProps> = ({ children, className, ...props }) => {\n  return (\n    <Button\n      size={\"icon\"}\n      variant={\"ghost\"}\n      className={cn(\"shrink-0 bg-accent-dark hover:bg-background hover:text-primary\", className)}\n      {...props}\n    >\n      {children}\n    </Button>\n  );\n};\n","import { useCallback, useRef } from \"react\";\n\nimport { Check, X } from \"lucide-react\";\n\nimport { Input } from \"components\";\nimport {\n  useCreateReminderGroupMutation,\n  useCreateReminderMutation,\n  handleAsync,\n  useUpdateReminderGroupMutation,\n  useUpdateReminderMutation,\n  cn,\n} from \"shared\";\nimport { TReminder, TReminderGroup } from \"types\";\n\nimport { IconButton } from \"./components\";\n\nexport type TUseCreateUpdateItemProps = {\n  onSave?: () => void;\n  onCancel?: () => void;\n  type: \"reminder\" | \"reminderGroup\";\n  value?: string;\n  mode: \"create\" | \"update\";\n  id?: TReminder[\"id\"] | TReminderGroup[\"id\"];\n  groupId?: TReminderGroup[\"id\"];\n};\n\nexport const useCreateUpdateItem = (props: TUseCreateUpdateItemProps) => {\n  const { onCancel, value } = props;\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [createReminder, createReminderResult] = useCreateReminderMutation();\n  const [createReminderGroup, createReminderGroupResult] = useCreateReminderGroupMutation();\n\n  const [updateReminder, updateReminderResult] = useUpdateReminderMutation();\n  const [updateReminderGroup, updateReminderGroupResult] = useUpdateReminderGroupMutation();\n\n  const handleOnSave = useCallback(async () => {\n    const { mode, type, onSave, id, groupId } = props;\n    if (type === \"reminder\") {\n      if (mode === \"update\") {\n        if (!id) {\n          throw new Error(\"Update id is required\");\n        }\n        await handleAsync(() => updateReminder({ id, title: inputRef.current!.value }));\n      }\n      if (mode === \"create\") {\n        await handleAsync(() => createReminder({ title: inputRef.current!.value, groupId }));\n      }\n    }\n    if (type === \"reminderGroup\") {\n      if (mode === \"update\") {\n        if (!id) {\n          throw new Error(\"Update id is required\");\n        }\n        await handleAsync(() => updateReminderGroup({ id, name: inputRef.current!.value }));\n      }\n      if (mode === \"create\") {\n        await handleAsync(() => createReminderGroup({ name: inputRef.current!.value }));\n      }\n    }\n\n    onSave?.();\n  }, [createReminder, createReminderGroup, updateReminder, updateReminderGroup, props]);\n\n  const handleOnCancel = useCallback(() => {\n    onCancel?.();\n  }, [onCancel]);\n\n  const ItemComponent = ({ className }: { className?: string }) => {\n    return (\n      <div className={cn(\"my-2 flex items-center justify-between\", className)}>\n        <Input\n          className=\"ml-1 mr-2\"\n          defaultValue={value}\n          ref={inputRef}\n          autoFocus\n        />\n        <div className=\"flex items-center gap-1\">\n          <IconButton onClick={handleOnSave}>\n            <Check className=\"icon\" />\n          </IconButton>\n          <IconButton onClick={handleOnCancel}>\n            <X className=\"icon text-destructive\" />\n          </IconButton>\n        </div>\n      </div>\n    );\n  };\n\n  const result =\n    props.mode === \"create\"\n      ? props.type === \"reminder\"\n        ? createReminderResult\n        : createReminderGroupResult\n      : props.type === \"reminder\"\n        ? updateReminderResult\n        : updateReminderGroupResult;\n\n  return {\n    ItemComponent,\n    result,\n  };\n};\n","import { FC, PropsWithChildren, useCallback, useState } from \"react\";\n\nimport { ChevronDown, ChevronUp, Pencil, Trash } from \"lucide-react\";\n\nimport { TReminder } from \"types\";\nimport { Typography, DropdownMenu, Button } from \"components\";\n\nimport { handleAsync, useDeleteReminderMutation } from \"shared\";\n\nimport { IconButton } from \"../components\";\n\nimport { useCreateUpdateItem } from \"../useCreateUpdateItem\";\n\nexport type TReminderItemProps = {\n  reminder: TReminder;\n};\n\nexport const ReminderItem: FC<PropsWithChildren<TReminderItemProps>> = ({ reminder }) => {\n  const [deleteReminder, deleteReminderResult] = useDeleteReminderMutation();\n\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n  const [isEditing, setIsEditing] = useState(false);\n\n  const { ItemComponent, result: updateReminderResult } = useCreateUpdateItem({\n    type: \"reminder\",\n    mode: \"update\",\n    id: reminder.id,\n    onCancel: () => setIsEditing(false),\n    onSave: () => setIsEditing(false),\n    value: reminder.title,\n  });\n\n  const handleOnDelete = useCallback(\n    async (id: Parameters<typeof deleteReminder>[0]) => {\n      await handleAsync(() => deleteReminder(id));\n    },\n    [deleteReminder]\n  );\n\n  const isMenuDisabled = deleteReminderResult.isLoading || updateReminderResult.isLoading;\n\n  return (\n    <div\n      className=\"flex items-center justify-between gap-2 py-2\"\n      data-testid={`reminder-item-${reminder.id}`}\n    >\n      {isEditing ? (\n        <ItemComponent className=\"flex-1\" />\n      ) : (\n        <Typography\n          variant={\"p\"}\n          className=\"overflow-x-scroll text-nowrap py-2\"\n        >\n          {reminder.title}\n        </Typography>\n      )}\n\n      {!isEditing && (\n        <DropdownMenu\n          data={[\n            {\n              id: \"edit\",\n              component: () => (\n                <IconButton\n                  data-testid={`reminder-item-edit-${reminder.id}`}\n                  onClick={() => setIsEditing(true)}\n                >\n                  <Pencil className=\"icon\" />\n                </IconButton>\n              ),\n            },\n            {\n              id: \"delete\",\n              component: () => (\n                <IconButton\n                  data-testid={`reminder-item-delete-${reminder.id}`}\n                  onClick={() => handleOnDelete(reminder.id)}\n                  className=\"hover:text-destructive\"\n                >\n                  <Trash className=\"icon\" />\n                </IconButton>\n              ),\n            },\n          ]}\n          triggerer={(props) => (\n            <Button\n              variant=\"secondary\"\n              size=\"icon\"\n              data-testid={`reminder-item-menu-${reminder.id}`}\n              disabled={isMenuDisabled}\n              {...props}\n            >\n              {isDropdownOpen ? <ChevronUp className=\"icon\" /> : <ChevronDown className=\"icon\" />}\n            </Button>\n          )}\n          isOpen={isDropdownOpen}\n          onToggle={setIsDropdownOpen}\n          itemRenderer={(item) => item.component()}\n          position=\"bottom-right\"\n        />\n      )}\n    </div>\n  );\n};\n","import { FC, PropsWithChildren, useState } from \"react\";\n\nimport { RefreshCcw } from \"lucide-react\";\n\nimport { Button, Typography } from \"components\";\n\nimport { useGetRemindersQuery, useSelectQueryParams, useGetReminderGroupQuery } from \"shared\";\n\nimport { ReminderItem } from \"./ReminderItem\";\nimport { AddButton } from \"./components\";\nimport { useCreateUpdateItem } from \"./useCreateUpdateItem\";\n\nexport type TRemindersListProps = Record<string, never>;\n\nexport const RemindersList: FC<PropsWithChildren<TRemindersListProps>> = () => {\n  const queryParams = useSelectQueryParams();\n\n  const { currentData: reminders, refetch } = useGetRemindersQuery(queryParams);\n\n  const { currentData: reminderGroup } = useGetReminderGroupQuery(queryParams.groupId as string, {\n    skip: !queryParams.groupId,\n  });\n\n  const [isCreating, setIsCreating] = useState(false);\n\n  const { ItemComponent } = useCreateUpdateItem({\n    type: \"reminder\",\n    mode: \"create\",\n    onCancel: () => setIsCreating(false),\n    onSave: () => setIsCreating(false),\n    groupId: reminderGroup?.id,\n  });\n\n  return (\n    <div className=\"flex flex-1 flex-col overflow-hidden p-4\">\n      <div className=\"mb-2 flex items-center justify-between gap-2\">\n        <Typography\n          variant={\"h4\"}\n          className=\"flex items-center justify-between overflow-x-scroll text-nowrap py-2 \"\n          data-testid=\"active-list-title\"\n        >\n          {reminderGroup?.name || \"All\"}\n        </Typography>\n        <div className=\"flex gap-2\">\n          <Button\n            size={\"icon\"}\n            variant={\"ghost\"}\n            className=\"hover:text-primary\"\n            data-testid=\"refresh-reminder-list\"\n          >\n            <RefreshCcw\n              className=\"icon\"\n              onClick={refetch}\n            />\n          </Button>\n\n          <AddButton\n            size={\"icon\"}\n            onClick={() => setIsCreating((isCreating) => !isCreating)}\n            disabled={isCreating}\n          />\n        </div>\n      </div>\n\n      {reminders && (\n        <div className=\"flex-1 overflow-scroll\">\n          <ul className=\"divide divide-y\">\n            {reminders.map((reminder) => {\n              return (\n                <li key={reminder.id}>\n                  <ReminderItem reminder={reminder} />\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      )}\n\n      {isCreating && <ItemComponent />}\n    </div>\n  );\n};\n","import { FC, PropsWithChildren, useCallback, useMemo, useState } from \"react\";\n\nimport { ChevronDown, ChevronUp, Pencil, Trash } from \"lucide-react\";\n\nimport { TReminderGroup } from \"types\";\n\nimport { Button, Typography, DropdownMenu } from \"components\";\n\nimport {\n  useAppDispatch,\n  setQueryParams,\n  useAppSelector,\n  selectQueryParams,\n  cn,\n  useDeleteReminderGroupMutation,\n  handleAsync,\n} from \"shared\";\n\nimport { useCreateUpdateItem } from \"../useCreateUpdateItem\";\n\nimport { IconButton } from \"../components\";\n\nexport type TReminderGroupItemProps = {\n  reminderGroup?: TReminderGroup;\n};\n\nexport const ReminderGroupItem: FC<PropsWithChildren<TReminderGroupItemProps>> = ({ reminderGroup }) => {\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n  const [isEditing, setIsEditing] = useState(false);\n\n  const dispatch = useAppDispatch();\n  const [deleteReminderGroup, deleteReminderGroupResult] = useDeleteReminderGroupMutation();\n  const { groupId } = useAppSelector(selectQueryParams);\n  const isSelected = groupId === reminderGroup?.id;\n\n  const { ItemComponent, result: updateReminderGroupResult } = useCreateUpdateItem({\n    type: \"reminderGroup\",\n    mode: \"update\",\n    ...(reminderGroup ? { id: reminderGroup.id } : {}),\n    onCancel: () => setIsEditing(false),\n    onSave: () => setIsEditing(false),\n    value: reminderGroup?.name,\n  });\n\n  const isMenuDisabled = deleteReminderGroupResult.isLoading || updateReminderGroupResult.isLoading;\n\n  const className = cn(\"py-2 flex items-center justify-between cursor-pointer gap-2\");\n\n  const handleOnItemClick = useCallback(\n    (queryParams: Parameters<typeof setQueryParams>[0]) => {\n      // update the query params value in store, causing a re-fetch of the reminders\n      dispatch(setQueryParams(queryParams));\n    },\n    [dispatch]\n  );\n\n  const handleOnDelete = useCallback(\n    async (id: Parameters<typeof deleteReminderGroup>[0]) => {\n      await handleAsync(() => deleteReminderGroup(id));\n    },\n    [deleteReminderGroup]\n  );\n\n  const renderItem = useMemo(() => {\n    if (reminderGroup && isEditing) {\n      return <ItemComponent className=\"flex-1\" />;\n    }\n\n    return (\n      <Typography\n        variant={\"p\"}\n        className={cn(\"overflow-x-scroll text-nowrap py-2\", isSelected && \"text-primary\")}\n        onClick={() => handleOnItemClick({ groupId: reminderGroup ? reminderGroup.id : undefined })}\n      >\n        {reminderGroup ? reminderGroup.name : \"All\"}\n      </Typography>\n    );\n  }, [isSelected, handleOnItemClick, isEditing, ItemComponent, reminderGroup]);\n\n  return (\n    <div\n      className={`${className}`}\n      data-testid={`reminder-group-item-${reminderGroup ? reminderGroup.id : \"all\"}`}\n    >\n      {renderItem}\n\n      {reminderGroup && !isEditing && (\n        <DropdownMenu\n          data={[\n            {\n              id: \"edit\",\n              component: () => (\n                <IconButton\n                  data-testid={`reminder-group-item-edit-${reminderGroup.id}`}\n                  onClick={() => setIsEditing(true)}\n                >\n                  <Pencil className=\"icon\" />\n                </IconButton>\n              ),\n            },\n            {\n              id: \"delete\",\n              component: () => (\n                <IconButton\n                  data-testid={`reminder-group-item-delete-${reminderGroup.id}`}\n                  onClick={() => handleOnDelete(reminderGroup.id)}\n                  className=\"hover:text-destructive\"\n                >\n                  <Trash className=\"icon\" />\n                </IconButton>\n              ),\n            },\n          ]}\n          triggerer={(props) => (\n            <Button\n              variant=\"secondary\"\n              size=\"icon\"\n              data-testid={`reminder-group-item-menu-${reminderGroup.id}`}\n              disabled={isMenuDisabled}\n              {...props}\n            >\n              {isDropdownOpen ? <ChevronUp className=\"icon\" /> : <ChevronDown className=\"icon\" />}\n            </Button>\n          )}\n          isOpen={isDropdownOpen}\n          onToggle={setIsDropdownOpen}\n          itemRenderer={(item) => item.component()}\n          position=\"bottom-right\"\n        />\n      )}\n    </div>\n  );\n};\n","import { FC, PropsWithChildren, useState } from \"react\";\n\nimport { useGetReminderGroupsQuery } from \"shared\";\n\nimport { ReminderGroupItem } from \"./ReminderGroupItem\";\nimport { AddButton } from \"./components\";\nimport { useCreateUpdateItem } from \"./useCreateUpdateItem\";\n\nexport type TReminderGroupListProps = Record<string, never>;\n\nexport const ReminderGroupList: FC<PropsWithChildren<TReminderGroupListProps>> = () => {\n  const { data: reminderGroups } = useGetReminderGroupsQuery();\n\n  const [isCreating, setIsCreating] = useState(false);\n\n  const { ItemComponent } = useCreateUpdateItem({\n    type: \"reminderGroup\",\n    mode: \"create\",\n    onCancel: () => setIsCreating(false),\n    onSave: () => setIsCreating(false),\n  });\n\n  return (\n    <div className=\"flex min-w-[200px] flex-1 flex-col overflow-hidden p-4\">\n      <div className=\"mb-2 mt-1 flex justify-center\">\n        <AddButton\n          size={\"full\"}\n          onClick={() => setIsCreating((isCreating) => !isCreating)}\n          disabled={isCreating}\n        >\n          Add List\n        </AddButton>\n      </div>\n\n      <div className=\"flex-1 overflow-scroll\">\n        <ul className=\"divide divide-y divide-accent-dark\">\n          <li key=\"all\">\n            <ReminderGroupItem />\n          </li>\n          {reminderGroups &&\n            reminderGroups.map((reminderGroup) => {\n              return (\n                <li key={reminderGroup.id}>\n                  <ReminderGroupItem reminderGroup={reminderGroup} />\n                </li>\n              );\n            })}\n        </ul>\n      </div>\n\n      {isCreating && <ItemComponent />}\n    </div>\n  );\n};\n","import { FC, PropsWithChildren } from \"react\";\n\nimport { Panel, PanelGroup, PanelResizeHandle } from \"react-resizable-panels\";\nimport { EllipsisVertical, EllipsisIcon } from \"lucide-react\";\n\nimport { useBreakpoint } from \"hooks\";\nimport { cn } from \"shared\";\nimport { Typography } from \"components\";\n\nimport { RemindersList } from \"./RemindersList\";\n\nimport { ReminderGroupList } from \"./ReminderGroupList\";\n\nexport type TRemindersProps = Record<string, never>;\n\nexport const Reminders: FC<PropsWithChildren<TRemindersProps>> = () => {\n  const { isBelowMd } = useBreakpoint(\"md\");\n\n  return (\n    <div className=\"mx-auto h-full max-w-screen-md p-2 md:p-8\">\n      <div className=\"flex h-full flex-col rounded border-2 border-primary shadow-lg lg:h-3/4\">\n        <nav className=\"flex h-[--navbar-height] border-b-2 border-primary\">\n          <ul className=\"flex flex-1 items-center justify-between px-4\">\n            <li>\n              <Typography\n                variant={\"h2\"}\n                className=\"pb-0\"\n              >\n                Reminders\n              </Typography>\n            </li>\n          </ul>\n        </nav>\n\n        <PanelGroup\n          direction={isBelowMd ? \"vertical\" : \"horizontal\"}\n          className=\"flex-1\"\n          autoSaveId={\"reminders-panel-group\"}\n        >\n          <Panel\n            maxSize={50}\n            className=\"flex flex-col\"\n          >\n            <ReminderGroupList />\n          </Panel>\n\n          <PanelResizeHandle className=\"group\">\n            <div\n              className={cn(\n                \"flex h-full w-full items-center border-primary group-hover:bg-secondary group-hover:text-primary\",\n                isBelowMd ? \"border-b-2\" : \"border-r-2\"\n              )}\n            >\n              {isBelowMd ? <EllipsisIcon className=\"icon mx-auto\" /> : <EllipsisVertical className=\"icon mx-auto\" />}\n            </div>\n          </PanelResizeHandle>\n\n          <Panel className=\"flex flex-col\">\n            <RemindersList />\n          </Panel>\n        </PanelGroup>\n      </div>\n    </div>\n  );\n};\n"],"names":["AddButton","_ref","children","className","props","_jsxs","Button","variant","cn","_jsx","Plus","IconButton","size","useCreateUpdateItem","onCancel","value","inputRef","useRef","createReminder","createReminderResult","useCreateReminderMutation","createReminderGroup","createReminderGroupResult","useCreateReminderGroupMutation","updateReminder","updateReminderResult","useUpdateReminderMutation","updateReminderGroup","updateReminderGroupResult","useUpdateReminderGroupMutation","handleOnSave","useCallback","async","mode","type","onSave","id","groupId","Error","handleAsync","title","current","name","handleOnCancel","ItemComponent","Input","defaultValue","ref","autoFocus","onClick","Check","X","result","ReminderItem","reminder","deleteReminder","deleteReminderResult","useDeleteReminderMutation","isDropdownOpen","setIsDropdownOpen","useState","isEditing","setIsEditing","handleOnDelete","isMenuDisabled","isLoading","concat","Typography","DropdownMenu","data","component","Pencil","Trash","triggerer","disabled","ChevronUp","ChevronDown","isOpen","onToggle","itemRenderer","item","position","RemindersList","queryParams","useSelectQueryParams","currentData","reminders","refetch","useGetRemindersQuery","reminderGroup","useGetReminderGroupQuery","skip","isCreating","setIsCreating","RefreshCcw","map","ReminderGroupItem","dispatch","useAppDispatch","deleteReminderGroup","deleteReminderGroupResult","useDeleteReminderGroupMutation","useAppSelector","selectQueryParams","isSelected","handleOnItemClick","setQueryParams","renderItem","useMemo","undefined","ReminderGroupList","reminderGroups","useGetReminderGroupsQuery","Reminders","isBelowMd","useBreakpoint","PanelGroup","direction","autoSaveId","Panel","maxSize","PanelResizeHandle","EllipsisIcon","EllipsisVertical"],"sourceRoot":""}