{"version":3,"file":"static/js/940.454f8c1c.chunk.js","mappings":"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","sources":["services/mocker/msw/controllers/db.ts","services/mocker/msw/controllers/reminderGroup.ts","services/mocker/msw/controllers/utils.ts","types/Reminders.ts"],"sourcesContent":["import { factory, oneOf, primaryKey } from \"@mswjs/data\";\n\nimport { uuid } from \"shared\";\n\nimport { REMINDER_STATE } from \"types\";\n\nexport const db = factory({\n  reminder: {\n    id: primaryKey(uuid),\n    title: () => {\n      return `Reminder ${uuid({ simple: true })}`;\n    },\n\n    isPinned: () => false,\n    state: () => REMINDER_STATE.ACTIVE,\n    group: oneOf(\"reminderGroup\"),\n    createdAt: () => new Date().toISOString(),\n    updatedAt: () => new Date().toISOString(),\n  },\n\n  reminderGroup: {\n    id: primaryKey(uuid),\n    name: () => `Reminder Group ${uuid({ simple: true })}`,\n    createdAt: () => new Date().toISOString(),\n    updatedAt: () => new Date().toISOString(),\n  },\n});\n\nexport type TDb = typeof db;\n\nexport const buildScenarios = (db: TDb) => {\n  const builder = {\n    withReminders: (n: number = 10) => {\n      for (let i = 0; i < n; i++) {\n        db.reminder.create();\n      }\n\n      return builder;\n    },\n    withReminderGroups: ({\n      reminderGroups = [\"Work\", \"Home\", \"Personal\"],\n      remindersPerGroup = 10,\n    }: {\n      reminderGroups?: string[];\n      remindersPerGroup?: number;\n    }) => {\n      reminderGroups.forEach((groupName) => {\n        const group = db.reminderGroup.create({ name: groupName });\n\n        for (let i = 0; i < remindersPerGroup; i++) {\n          db.reminder.create({ group });\n        }\n      });\n\n      return builder;\n    },\n  };\n  return builder;\n};\n","import { HttpResponse, http } from \"msw\";\n\nimport {\n  TCreateReminderGroupRequestPayload,\n  TCreateReminderGroupResponsePayload,\n  TDeleteReminderGroupRequestPayload,\n  TDeleteReminderGroupResponsePayload,\n  TUpdateReminderGroupRequestPayload,\n  TUpdateReminderGroupResponsePayload,\n  TGetReminderGroupRequestPayload,\n  TGetReminderGroupResponsePayload,\n  TReminderGroup,\n  THTTPError,\n} from \"types\";\n\nimport { urlPrefix } from \"./utils\";\n\nimport { db } from \"./db\";\n\nexport const getReminderGroups = http.get(urlPrefix(\"/reminder-groups\"), () => {\n  return HttpResponse.json({ data: db.reminderGroup.getAll() }, { status: 200 });\n});\n\nexport const getReminderGroup = http.get<\n  { id: TGetReminderGroupRequestPayload },\n  never,\n  TGetReminderGroupResponsePayload | THTTPError\n>(urlPrefix(\"/reminder-groups/:id\"), ({ params }) => {\n  const reminderGroup = db.reminderGroup.findFirst({\n    where: {\n      id: {\n        equals: params.id,\n      },\n    },\n  });\n\n  if (!reminderGroup) {\n    return HttpResponse.json({ message: `Reminder Group with id ${params.id} not found!` }, { status: 404 });\n  }\n\n  return HttpResponse.json({ data: reminderGroup }, { status: 200 });\n});\n\nexport const createReminderGroup = http.post<\n  never,\n  TCreateReminderGroupRequestPayload,\n  TCreateReminderGroupResponsePayload | THTTPError\n>(urlPrefix(\"/reminder-groups\"), async ({ request }) => {\n  const requestBody = await request.json();\n\n  const reminderGroup = db.reminderGroup.create({\n    ...requestBody,\n  });\n\n  return HttpResponse.json({ data: reminderGroup }, { status: 201 });\n});\n\nexport const deleteReminderGroup = http.delete<\n  { id: TDeleteReminderGroupRequestPayload },\n  never,\n  TDeleteReminderGroupResponsePayload | THTTPError\n>(urlPrefix(\"/reminder-groups/:id\"), ({ params }) => {\n  const reminderGroup = db.reminderGroup.findFirst({\n    where: {\n      id: {\n        equals: params.id,\n      },\n    },\n  });\n\n  if (!reminderGroup) {\n    return HttpResponse.json({ message: `Reminder Group with id ${params.id} not found!` }, { status: 404 });\n  }\n\n  db.reminderGroup.delete({\n    where: {\n      id: {\n        equals: params.id,\n      },\n    },\n  });\n\n  return HttpResponse.json({ message: `Reminder Group with id ${params.id} deleted!` }, { status: 200 });\n});\n\nexport const updateReminderGroup = http.patch<\n  { id: TUpdateReminderGroupRequestPayload[\"id\"] },\n  TUpdateReminderGroupRequestPayload,\n  TUpdateReminderGroupResponsePayload | THTTPError\n>(urlPrefix(\"/reminder-groups/:id\"), async ({ request, params }) => {\n  const requestBody = await request.json();\n\n  const reminderGroup = db.reminderGroup.findFirst({\n    where: {\n      id: {\n        equals: params.id,\n      },\n    },\n  });\n\n  if (!reminderGroup) {\n    return HttpResponse.json({ message: `Reminder Group with id ${params.id} not found!` }, { status: 404 });\n  }\n\n  const updatedReminder = db.reminderGroup.update({\n    where: {\n      id: {\n        equals: params.id,\n      },\n    },\n    data: {\n      ...requestBody,\n    },\n  }) as TReminderGroup;\n\n  return HttpResponse.json({ data: updatedReminder }, { status: 200 });\n});\n","const apiUrl = process.env.REACT_APP_API_URL;\n\nexport const urlPrefix = (path: string) => {\n  if (path[0] !== \"/\") {\n    throw new Error(\"MSW handler path should start with a forward slash.\");\n  }\n  const isApiUrlEndsWithSlash = apiUrl[apiUrl.length - 1] === \"/\";\n\n  if (isApiUrlEndsWithSlash) {\n    return `${apiUrl}${path.slice(1)}`;\n  }\n  return `${apiUrl}${path}`;\n};\n","export const REMINDER_STATE = {\n  ACTIVE: \"ACTIVE\",\n  COMPLETED: \"COMPLETED\",\n} as const;\n\nexport type TReminderState = (typeof REMINDER_STATE)[keyof typeof REMINDER_STATE];\n\nexport type TReminder = {\n  id: string;\n  title: string;\n  state: TReminderState;\n  isPinned: boolean;\n  createdAt: string;\n  updatedAt: string;\n  group?: TReminderGroup;\n};\n\nexport type TReminderGroup = {\n  id: string;\n  name: string;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type TMessageResponsePaylaod = {\n  message: string;\n};\n\nexport type TDataResponsePayload<T> = {\n  data: T;\n};\n\n/**\n * Error\n */\nexport type THTTPError = {\n  message: string;\n};\n\n/**\n * Reminder\n */\nexport type TGetRemindersQueryParams = Partial<{\n  groupId: TReminderGroup[\"id\"];\n  state: TReminder[\"state\"];\n}>;\n\nexport type TGetRemindersResponsePayload = TDataResponsePayload<TReminder[]>;\n\nexport type TGetReminderRequestPayload = TReminder[\"id\"];\n\nexport type TGetReminderResponsePayload = TDataResponsePayload<TReminder>;\n\nexport type TCreateReminderRequestPayload = Pick<TReminder, \"title\"> & Partial<{ groupId: TReminderGroup[\"id\"] }>;\n\nexport type TCreateReminderResponsePayload = TDataResponsePayload<TReminder>;\n\nexport type TUpdateReminderRequestPayload = Pick<TReminder, \"id\"> &\n  Partial<Pick<TReminder, \"title\" | \"state\" | \"isPinned\"> & { groupId: TReminderGroup[\"id\"] }>;\n\nexport type TUpdateReminderResponsePayload = TDataResponsePayload<TReminder>;\n\nexport type TDeleteReminderRequestPayload = TReminder[\"id\"];\n\nexport type TDeleteReminderResponsePayload = TMessageResponsePaylaod;\n\n/**\n * Reminder Group\n */\nexport type TGetReminderGroupsResponsePayload = TDataResponsePayload<TReminderGroup[]>;\n\nexport type TGetReminderGroupRequestPayload = TReminderGroup[\"id\"];\n\nexport type TGetReminderGroupResponsePayload = TDataResponsePayload<TReminderGroup>;\n\nexport type TCreateReminderGroupRequestPayload = Pick<TReminderGroup, \"name\">;\n\nexport type TCreateReminderGroupResponsePayload = TDataResponsePayload<TReminderGroup>;\n\nexport type TUpdateReminderGroupRequestPayload = Pick<TReminderGroup, \"id\"> & Partial<Pick<TReminderGroup, \"name\">>;\n\nexport type TUpdateReminderGroupResponsePayload = TDataResponsePayload<TReminderGroup>;\n\nexport type TDeleteReminderGroupRequestPayload = TReminderGroup[\"id\"];\n\nexport type TDeleteReminderGroupResponsePayload = TMessageResponsePaylaod;\n"],"names":["db","factory","reminder","id","primaryKey","uuid","title","concat","simple","isPinned","state","REMINDER_STATE","ACTIVE","group","oneOf","createdAt","Date","toISOString","updatedAt","reminderGroup","name","buildScenarios","builder","withReminders","n","arguments","length","undefined","i","create","withReminderGroups","_ref","reminderGroups","remindersPerGroup","forEach","groupName","getReminderGroups","http","get","urlPrefix","HttpResponse","json","data","getAll","status","getReminderGroup","params","findFirst","where","equals","message","createReminderGroup","post","async","request","_ref2","requestBody","deleteReminderGroup","delete","_ref3","updateReminderGroup","patch","_ref4","updatedReminder","update","apiUrl","process","path","Error","slice","COMPLETED"],"sourceRoot":""}