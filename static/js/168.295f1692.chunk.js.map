{"version":3,"file":"static/js/168.295f1692.chunk.js","mappings":"0KAKO,SAASA,IACdC,EAAAA,eAAeC,KAAKC,MACpBC,EAAAA,oBAAoBF,KAAKC,KAC3B,C,oECJO,SAASF,IACdE,KAAKE,KAAIC,EAAAA,EAAAA,WAAU,eAAe,CAACC,EAAQC,KACzC,IAAIC,EACJ,MAAMC,EAAcF,EAAQE,YAG5B,GAAIA,EAAa,CACf,GAAIA,EAAYC,QAAS,CAEvB,GAAsB,OADAJ,EAAOK,KAAK,gBAAiBF,EAAYC,SAE7D,OAAOE,EAAAA,EAAAA,0BAAyB,kBAAoBH,EAAYC,QAEpE,CACAF,EAAYF,EAAOO,MAAM,WAAYJ,EACvC,MACED,EAAYF,EAAOQ,IAAI,YAGzB,MAAO,CACLC,KAAMP,EAAUQ,OAAOC,KAAKC,GAAaA,EAASC,kBACnD,IAIHjB,KAAKkB,QAAOf,EAAAA,EAAAA,WAAU,mBAAmB,CAACC,EAAQC,KAEhD,MAAMc,EAAKd,EAAQe,OAAOD,GAEpBH,EAAWZ,EAAOK,KAAK,WAAYU,GAIzC,OAFQ,OAARH,QAAQ,IAARA,GAAAA,EAAUK,UAEO,OAAbL,GACKN,EAAAA,EAAAA,0BAAyB,YAAcS,GAIzC,CAAEG,QAAQ,oBAADC,OAAsBJ,EAAE,aAAa,IAGvDnB,KAAKwB,MAAKrB,EAAAA,EAAAA,WAAU,eAAe,CAACC,EAAQC,KAC1C,MAAMoB,EAAQC,KAAKC,MAAMtB,EAAQuB,aAIjC,MAAO,CACLf,KAHeT,EAAOyB,OAAO,WAAYJ,GAG1BA,MAChB,GAEL,C,yEC/CO,SAASxB,IACdD,KAAKE,KAAIC,EAAAA,EAAAA,WAAU,qBAAsBC,IAGhC,CACLS,KAHqBT,EAAOQ,IAAI,iBAAiBE,WAOrDd,KAAKE,KAAIC,EAAAA,EAAAA,WAAU,yBAAyB,CAACC,EAAQC,KACnD,MAAMc,EAAKd,EAAQe,OAAOD,GAEpBW,EAAgB1B,EAAOK,KAAK,gBAAiBU,GAEnD,OAAsB,OAAlBW,GACKpB,EAAAA,EAAAA,0BAAyB,kBAAoBS,GAG/C,CACLN,KAAMiB,EACP,IAGH9B,KAAKkB,QAAOf,EAAAA,EAAAA,WAAU,yBAAyB,CAACC,EAAQC,KACtD,MAAMc,EAAKd,EAAQe,OAAOD,GAEpBW,EAAgB1B,EAAOK,KAAK,gBAAiBU,GAEnD,GAAsB,OAAlBW,EACF,OAAOpB,EAAAA,EAAAA,0BAAyB,kBAAoBS,GAItD,MAAMb,EAAYF,EAAOQ,IAAI,YAAYmB,QAAQf,GAAaA,EAASR,UAAYW,IAMnF,OAJS,OAATb,QAAS,IAATA,GAAAA,EAAWe,UAEE,OAAbS,QAAa,IAAbA,GAAAA,EAAeT,UAER,CACLC,QAAQ,0BAADC,OAA4BJ,EAAE,aACtC,GAEL,C,8FC/CA,MAAMa,EAASC,+BAEF9B,EAAa+B,IACxB,GAAgB,MAAZA,EAAK,GACP,MAAM,IAAIC,MAAM,4DAIlB,MAF4D,MAA9BH,EAAOA,IAG7B,GAANT,OAAUS,GAAMT,OAAGW,EAAKE,MAAM,IAE1B,GAANb,OAAUS,GAAMT,OAAGW,EAAI,EAGZxB,EAA4B2B,GACvC,IAAIC,EAAAA,GAAS,IAAK,CAAC,EAAG,CAAEhB,QAAQ,YAADC,OAAcc,EAAY,gB","sources":["services/mocker/mirage/routes/index.ts","services/mocker/mirage/routes/reminder.ts","services/mocker/mirage/routes/reminderGroup.ts","services/mocker/mirage/routes/utils.ts"],"sourcesContent":["import { TAppMockServer } from \"../types\";\n\nimport { reminderRoutes } from \"./reminder\";\nimport { reminderGroupRoutes } from \"./reminderGroup\";\n\nexport function createRoutes(this: TAppMockServer) {\n  reminderRoutes.call(this);\n  reminderGroupRoutes.call(this);\n}\n","import { TAppMockServer } from \"../types\";\n\nimport { urlPrefix, resourceNotFoundResponse } from \"./utils\";\n\nexport function reminderRoutes(this: TAppMockServer) {\n  this.get(urlPrefix(\"/reminders\"), (schema, request) => {\n    let reminders; // Collection<Instantiate<TAppRegistry, \"reminder\">>;\n    const queryParams = request.queryParams;\n    // queryParams = { groupId: \"group-id-1\" }\n\n    if (queryParams) {\n      if (queryParams.groupId) {\n        const reminderGroup = schema.find(\"reminderGroup\", queryParams.groupId as string);\n        if (reminderGroup === null) {\n          return resourceNotFoundResponse(\"Reminder group \" + queryParams.groupId);\n        }\n      }\n      reminders = schema.where(\"reminder\", queryParams);\n    } else {\n      reminders = schema.all(\"reminder\");\n    }\n\n    return {\n      data: reminders.models.map((reminder) => reminder.getAttributes()),\n    };\n  });\n\n  // NOTE: :segmentName to define a dynamic segment in the URL for a route handler\n  this.delete(urlPrefix(\"/reminders/:id\"), (schema, request) => {\n    // NOTE: Access dynamic segments via request.params.segmentName\n    const id = request.params.id;\n\n    const reminder = schema.find(\"reminder\", id);\n\n    reminder?.destroy();\n\n    if (reminder === null) {\n      return resourceNotFoundResponse(\"Reminder \" + id);\n    }\n\n    // NOTE: use Response class to return a custom response\n    return { message: `Reminder with id ${id} deleted!` };\n  });\n\n  this.post(urlPrefix(\"/reminders\"), (schema, request) => {\n    const attrs = JSON.parse(request.requestBody);\n\n    const reminder = schema.create(\"reminder\", attrs);\n\n    return {\n      data: reminder.attrs,\n    };\n  });\n}\n","import { Response } from \"miragejs\";\n\nimport { TAppMockServer } from \"../types\";\n\nimport { urlPrefix, resourceNotFoundResponse } from \"./utils\";\n\nexport function reminderGroupRoutes(this: TAppMockServer) {\n  this.get(urlPrefix(\"/reminder-groups\"), (schema) => {\n    const reminderGroups = schema.all(\"reminderGroup\").models;\n\n    return {\n      data: reminderGroups,\n    };\n  });\n\n  this.get(urlPrefix(\"/reminder-groups/:id\"), (schema, request) => {\n    const id = request.params.id;\n\n    const reminderGroup = schema.find(\"reminderGroup\", id);\n\n    if (reminderGroup === null) {\n      return resourceNotFoundResponse(\"Reminder group \" + id);\n    }\n\n    return {\n      data: reminderGroup,\n    };\n  });\n\n  this.delete(urlPrefix(\"/reminder-groups/:id\"), (schema, request) => {\n    const id = request.params.id;\n\n    const reminderGroup = schema.find(\"reminderGroup\", id);\n\n    if (reminderGroup === null) {\n      return resourceNotFoundResponse(\"Reminder group \" + id);\n    }\n\n    // @ts-expect-error\n    const reminders = schema.all(\"reminder\").filter((reminder) => reminder.groupId === id);\n\n    reminders?.destroy();\n\n    reminderGroup?.destroy();\n\n    return {\n      message: `Reminder group with id ${id} deleted!`,\n    };\n  });\n}\n","import { Response } from \"miragejs\";\n\nconst apiUrl = process.env.REACT_APP_API_URL;\n\nexport const urlPrefix = (path: string) => {\n  if (path[0] !== \"/\") {\n    throw new Error(\"Miragejs handler path should start with a forward slash.\");\n  }\n  const isApiUrlEndsWithSlash = apiUrl[apiUrl.length - 1] === \"/\";\n\n  if (isApiUrlEndsWithSlash) {\n    return `${apiUrl}${path.slice(1)}`;\n  }\n  return `${apiUrl}${path}`;\n};\n\nexport const resourceNotFoundResponse = (resourceName?: string) =>\n  new Response(404, {}, { message: `Resource ${resourceName} not found!` });\n"],"names":["createRoutes","reminderRoutes","call","this","reminderGroupRoutes","get","urlPrefix","schema","request","reminders","queryParams","groupId","find","resourceNotFoundResponse","where","all","data","models","map","reminder","getAttributes","delete","id","params","destroy","message","concat","post","attrs","JSON","parse","requestBody","create","reminderGroup","filter","apiUrl","process","path","Error","slice","resourceName","Response"],"sourceRoot":""}