{"version":3,"file":"static/js/513.74fe9aa2.chunk.js","mappings":"+JAIO,SAASA,IACdC,KAAKC,KAAIC,EAAAA,EAAAA,WAAU,qBAAsBC,IAGhC,CACLC,KAHqBD,EAAOE,IAAI,iBAAiBC,WAOrDN,KAAKC,KAAIC,EAAAA,EAAAA,WAAU,yBAAyB,CAACC,EAAQI,KACnD,MAAMC,EAAKD,EAAQE,OAAOD,GAEpBE,EAAgBP,EAAOQ,KAAK,gBAAiBH,GAEnD,OAAsB,OAAlBE,GACKE,EAAAA,EAAAA,0BAAyB,kBAAoBJ,GAG/C,CACLJ,KAAMM,EACP,IAGHV,KAAKa,QAAOX,EAAAA,EAAAA,WAAU,yBAAyB,CAACC,EAAQI,KACtD,MAAMC,EAAKD,EAAQE,OAAOD,GAEpBE,EAAgBP,EAAOQ,KAAK,gBAAiBH,GAEnD,GAAsB,OAAlBE,EACF,OAAOE,EAAAA,EAAAA,0BAAyB,kBAAoBJ,GAItD,MAAMM,EAAYX,EAAOE,IAAI,YAAYU,QAAQC,GAAaA,EAASC,UAAYT,IAMnF,OAJS,OAATM,QAAS,IAATA,GAAAA,EAAWI,UAEE,OAAbR,QAAa,IAAbA,GAAAA,EAAeQ,UAER,CACLC,QAAQ,0BAADC,OAA4BZ,EAAE,aACtC,GAEL,C,8FC7CA,MAAMa,EAASC,+BAEFpB,EAAaqB,IACxB,GAAgB,MAAZA,EAAK,GACP,MAAM,IAAIC,MAAM,4DAIlB,MAF4D,MAA9BH,EAAOA,IAG7B,GAAND,OAAUC,GAAMD,OAAGG,EAAKE,MAAM,IAE1B,GAANL,OAAUC,GAAMD,OAAGG,EAAI,EAGZX,EAA4Bc,GACvC,IAAIC,EAAAA,GAAS,IAAK,CAAC,EAAG,CAAER,QAAQ,YAADC,OAAcM,EAAY,gB","sources":["services/mocker/mirage/routes/reminderGroup.ts","services/mocker/mirage/routes/utils.ts"],"sourcesContent":["import { TAppMockServer } from \"../types\";\n\nimport { urlPrefix, resourceNotFoundResponse } from \"./utils\";\n\nexport function reminderGroupRoutes(this: TAppMockServer) {\n  this.get(urlPrefix(\"/reminder-groups\"), (schema) => {\n    const reminderGroups = schema.all(\"reminderGroup\").models;\n\n    return {\n      data: reminderGroups,\n    };\n  });\n\n  this.get(urlPrefix(\"/reminder-groups/:id\"), (schema, request) => {\n    const id = request.params.id;\n\n    const reminderGroup = schema.find(\"reminderGroup\", id);\n\n    if (reminderGroup === null) {\n      return resourceNotFoundResponse(\"Reminder group \" + id);\n    }\n\n    return {\n      data: reminderGroup,\n    };\n  });\n\n  this.delete(urlPrefix(\"/reminder-groups/:id\"), (schema, request) => {\n    const id = request.params.id;\n\n    const reminderGroup = schema.find(\"reminderGroup\", id);\n\n    if (reminderGroup === null) {\n      return resourceNotFoundResponse(\"Reminder group \" + id);\n    }\n\n    // @ts-expect-error\n    const reminders = schema.all(\"reminder\").filter((reminder) => reminder.groupId === id);\n\n    reminders?.destroy();\n\n    reminderGroup?.destroy();\n\n    return {\n      message: `Reminder group with id ${id} deleted!`,\n    };\n  });\n}\n","import { Response } from \"miragejs\";\n\nconst apiUrl = process.env.REACT_APP_API_URL;\n\nexport const urlPrefix = (path: string) => {\n  if (path[0] !== \"/\") {\n    throw new Error(\"Miragejs handler path should start with a forward slash.\");\n  }\n  const isApiUrlEndsWithSlash = apiUrl[apiUrl.length - 1] === \"/\";\n\n  if (isApiUrlEndsWithSlash) {\n    return `${apiUrl}${path.slice(1)}`;\n  }\n  return `${apiUrl}${path}`;\n};\n\nexport const resourceNotFoundResponse = (resourceName?: string) =>\n  new Response(404, {}, { message: `Resource ${resourceName} not found!` });\n"],"names":["reminderGroupRoutes","this","get","urlPrefix","schema","data","all","models","request","id","params","reminderGroup","find","resourceNotFoundResponse","delete","reminders","filter","reminder","groupId","destroy","message","concat","apiUrl","process","path","Error","slice","resourceName","Response"],"sourceRoot":""}