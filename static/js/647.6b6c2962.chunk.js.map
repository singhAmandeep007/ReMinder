{"version":3,"file":"static/js/647.6b6c2962.chunk.js","mappings":"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","sources":["services/mocker/msw/controllers/reminder.ts","services/mocker/msw/controllers/reminderGroup.ts","services/mocker/msw/db.ts","services/mocker/msw/handlers.ts","services/mocker/msw/server.ts","services/mocker/msw/utils.ts","types/Reminders.ts"],"sourcesContent":["import { HttpResponse, http } from \"msw\";\n\nimport {\n  TCreateReminderRequestPayload,\n  TCreateReminderResponsePayload,\n  TDeleteReminderRequestPayload,\n  TDeleteReminderResponsePayload,\n  TReminder,\n  THTTPError,\n  TUpdateReminderRequestPayload,\n  TUpdateReminderResponsePayload,\n} from \"types\";\n\nimport { getUrlSearchParams } from \"shared\";\n\nimport { db } from \"../db\";\n\nimport { urlPrefix } from \"../utils\";\n\nexport const getReminders = http.get(urlPrefix(\"/reminders\"), ({ request }) => {\n  const reminders = db.reminder.getAll();\n\n  const searchParams = getUrlSearchParams(request.url);\n\n  let data: TReminder[] = reminders;\n\n  if (searchParams[\"groupId\"]) {\n    data = data.filter((reminder) => reminder?.group?.id === searchParams[\"groupId\"]);\n  }\n\n  if (searchParams[\"state\"]) {\n    data = data.filter((reminder) => reminder.state === searchParams[\"state\"]);\n  }\n\n  return HttpResponse.json({ data }, { status: 200 });\n});\n\nexport const createReminder = http.post<\n  never,\n  TCreateReminderRequestPayload,\n  TCreateReminderResponsePayload | THTTPError\n>(urlPrefix(\"/reminders\"), async ({ request }) => {\n  const { title, groupId } = await request.json();\n\n  const group = db.reminderGroup.getAll().find((group) => group.id === groupId);\n\n  if (groupId && !group) {\n    return HttpResponse.json({ message: `Reminder Group with id ${groupId} not found!` }, { status: 404 });\n  }\n\n  const newReminder = db.reminder.create({ title, group });\n\n  return HttpResponse.json({ data: newReminder }, { status: 201 });\n});\n\nexport const deleteReminder = http.delete<{ id: TDeleteReminderRequestPayload }, never, TDeleteReminderResponsePayload>(\n  urlPrefix(\"/reminders/:id\"),\n  ({ params }) => {\n    const reminder = db.reminder.findFirst({\n      where: {\n        id: {\n          equals: params.id,\n        },\n      },\n    });\n\n    if (!reminder) {\n      return HttpResponse.json({ message: `Reminder with id ${params.id} not found!` }, { status: 404 });\n    }\n\n    db.reminder.delete({\n      where: {\n        id: {\n          equals: params.id,\n        },\n      },\n    });\n\n    return HttpResponse.json({ message: `Reminder with id ${params.id} deleted!` }, { status: 200 });\n  }\n);\n\nexport const updateReminder = http.patch<\n  { id: TUpdateReminderRequestPayload[\"id\"] },\n  TUpdateReminderRequestPayload,\n  TUpdateReminderResponsePayload | THTTPError\n>(urlPrefix(\"/reminders/:id\"), async ({ request, params }) => {\n  const { groupId, ...requestBody } = await request.json();\n\n  const reminder = db.reminder.findFirst({\n    where: {\n      id: {\n        equals: params.id,\n      },\n    },\n  });\n\n  if (!reminder) {\n    return HttpResponse.json({ message: `Reminder with id ${params.id} not found!` }, { status: 404 });\n  }\n\n  const group = db.reminderGroup.findFirst({\n    where: {\n      id: {\n        equals: groupId,\n      },\n    },\n  });\n\n  if (groupId && !group) {\n    return HttpResponse.json({ message: `Reminder Group with id ${groupId} not found!` }, { status: 404 });\n  }\n\n  const updatedReminder = db.reminder.update({\n    where: {\n      id: {\n        equals: params.id,\n      },\n    },\n    data: {\n      ...(requestBody as any),\n    },\n  }) as TReminder;\n\n  return HttpResponse.json({ data: updatedReminder }, { status: 200 });\n});\n","import { HttpResponse, http } from \"msw\";\n\nimport {\n  TCreateReminderGroupRequestPayload,\n  TCreateReminderGroupResponsePayload,\n  TDeleteReminderGroupRequestPayload,\n  TDeleteReminderGroupResponsePayload,\n  TUpdateReminderGroupRequestPayload,\n  TUpdateReminderGroupResponsePayload,\n  TGetReminderGroupRequestPayload,\n  TGetReminderGroupResponsePayload,\n  TReminderGroup,\n  THTTPError,\n} from \"types\";\n\nimport { db } from \"../db\";\n\nimport { urlPrefix } from \"../utils\";\n\nexport const getReminderGroups = http.get(urlPrefix(\"/reminder-groups\"), () => {\n  return HttpResponse.json({ data: db.reminderGroup.getAll() }, { status: 200 });\n});\n\nexport const getReminderGroup = http.get<\n  { id: TGetReminderGroupRequestPayload },\n  never,\n  TGetReminderGroupResponsePayload | THTTPError\n>(urlPrefix(\"/reminder-groups/:id\"), ({ params }) => {\n  const reminderGroup = db.reminderGroup.findFirst({\n    where: {\n      id: {\n        equals: params.id,\n      },\n    },\n  });\n\n  if (!reminderGroup) {\n    return HttpResponse.json({ message: `Reminder Group with id ${params.id} not found!` }, { status: 404 });\n  }\n\n  return HttpResponse.json({ data: reminderGroup }, { status: 200 });\n});\n\nexport const createReminderGroup = http.post<\n  never,\n  TCreateReminderGroupRequestPayload,\n  TCreateReminderGroupResponsePayload | THTTPError\n>(urlPrefix(\"/reminder-groups\"), async ({ request }) => {\n  const requestBody = await request.json();\n\n  const reminderGroup = db.reminderGroup.create({\n    ...requestBody,\n  });\n\n  return HttpResponse.json({ data: reminderGroup }, { status: 201 });\n});\n\nexport const deleteReminderGroup = http.delete<\n  { id: TDeleteReminderGroupRequestPayload },\n  never,\n  TDeleteReminderGroupResponsePayload | THTTPError\n>(urlPrefix(\"/reminder-groups/:id\"), ({ params }) => {\n  const reminderGroup = db.reminderGroup.findFirst({\n    where: {\n      id: {\n        equals: params.id,\n      },\n    },\n  });\n\n  if (!reminderGroup) {\n    return HttpResponse.json({ message: `Reminder Group with id ${params.id} not found!` }, { status: 404 });\n  }\n\n  db.reminderGroup.delete({\n    where: {\n      id: {\n        equals: params.id,\n      },\n    },\n  });\n\n  return HttpResponse.json({ message: `Reminder Group with id ${params.id} deleted!` }, { status: 200 });\n});\n\nexport const updateReminderGroup = http.patch<\n  { id: TUpdateReminderGroupRequestPayload[\"id\"] },\n  TUpdateReminderGroupRequestPayload,\n  TUpdateReminderGroupResponsePayload | THTTPError\n>(urlPrefix(\"/reminder-groups/:id\"), async ({ request, params }) => {\n  const requestBody = await request.json();\n\n  const reminderGroup = db.reminderGroup.findFirst({\n    where: {\n      id: {\n        equals: params.id,\n      },\n    },\n  });\n\n  if (!reminderGroup) {\n    return HttpResponse.json({ message: `Reminder Group with id ${params.id} not found!` }, { status: 404 });\n  }\n\n  const updatedReminder = db.reminderGroup.update({\n    where: {\n      id: {\n        equals: params.id,\n      },\n    },\n    data: {\n      ...requestBody,\n    },\n  }) as TReminderGroup;\n\n  return HttpResponse.json({ data: updatedReminder }, { status: 200 });\n});\n","import { factory, nullable, oneOf, primaryKey } from \"@mswjs/data\";\n\nimport { uuid } from \"shared\";\n\nimport { REMINDER_STATE } from \"types\";\n\nexport const db = factory({\n  reminder: {\n    id: primaryKey(uuid),\n    title: () => {\n      return `Reminder ${uuid({ simple: true })}`;\n    },\n\n    isPinned: () => false,\n    state: () => REMINDER_STATE.INACTIVE,\n    group: oneOf(\"reminderGroup\"),\n    createdAt: () => new Date().toISOString(),\n    updatedAt: () => new Date().toISOString(),\n    dueDate: nullable(String),\n  },\n\n  reminderGroup: {\n    id: primaryKey(uuid),\n    name: () => `Reminder Group ${uuid({ simple: true })}`,\n    createdAt: () => new Date().toISOString(),\n    updatedAt: () => new Date().toISOString(),\n  },\n});\n\nexport type TDb = typeof db;\n\nexport const buildScenarios = (db: TDb) => {\n  const builder = {\n    withReminders: (n: number = 10) => {\n      for (let i = 0; i < n; i++) {\n        db.reminder.create();\n      }\n\n      return builder;\n    },\n    withReminderGroups: ({\n      reminderGroups = [\"Work\", \"Home\", \"Personal\"],\n      remindersPerGroup = 10,\n    }: {\n      reminderGroups?: string[];\n      remindersPerGroup?: number;\n    }) => {\n      reminderGroups.forEach((groupName) => {\n        const group = db.reminderGroup.create({ name: groupName });\n\n        for (let i = 0; i < remindersPerGroup; i++) {\n          db.reminder.create({ group });\n        }\n      });\n\n      return builder;\n    },\n  };\n  return builder;\n};\n","import * as controllers from \"./controllers\";\n\nexport const handlers = [...Object.values(controllers)];\n","import { setupWorker } from \"msw/browser\";\n\nimport { db, buildScenarios } from \"./db\";\n\nimport { handlers } from \"./handlers\";\n\nconst PUBLIC_URL = process.env.REACT_APP_PUBLIC_URL;\n\nexport const runServer = () => {\n  // NOTE: seed data\n  buildScenarios(db).withReminders(5).withReminderGroups({ remindersPerGroup: 2 });\n\n  const worker = setupWorker(...handlers);\n\n  return worker.start({\n    onUnhandledRequest: \"bypass\",\n    serviceWorker: {\n      url: `${PUBLIC_URL}mockServiceWorker.js`,\n    },\n  });\n};\n","const apiUrl = process.env.REACT_APP_API_URL;\n\nexport const urlPrefix = (path: string) => {\n  if (path[0] !== \"/\") {\n    throw new Error(\"MSW handler path should start with a forward slash.\");\n  }\n  const isApiUrlEndsWithSlash = apiUrl[apiUrl.length - 1] === \"/\";\n\n  if (isApiUrlEndsWithSlash) {\n    return `${apiUrl}${path.slice(1)}`;\n  }\n  return `${apiUrl}${path}`;\n};\n","export const REMINDER_STATE = {\n  INACTIVE: \"INACTIVE\",\n  INPROGRESS: \"INPROGRESS\",\n  COMPLETED: \"COMPLETED\",\n  ARCHIVED: \"ARCHIVED\",\n} as const;\n\nexport type TReminderState = (typeof REMINDER_STATE)[keyof typeof REMINDER_STATE];\n\nexport type TReminder = {\n  id: string;\n  title: string;\n  /**\n   * Current state of the reminder.\n   *\n   * @example \"IN_ACTIVE\" | \"IN_PROGRESS\" | \"COMPLETED\"\n   */\n  state: TReminderState;\n  /**\n   * Indicates if the reminder is pinned on top.\n   */\n  isPinned: boolean;\n  /**\n   * Date and time the reminder was created. (ISO 8601 format)\n   */\n  createdAt: string;\n  /**\n   * Date and time the reminder was last updated. (ISO 8601 format)\n   */\n  updatedAt: string;\n  /**\n   * Optional reminder group this reminder belongs to.\n   */\n  group?: TReminderGroup;\n  /**\n   * Optional due date and time for the reminder. (ISO 8601 format)\n   *\n   * @example \"2021-09-30T00:00:00.000Z\"\n   */\n  dueDate?: string | null;\n};\n\nexport type TReminderGroup = {\n  id: string;\n  name: string;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type TMessageResponsePaylaod = {\n  message: string;\n};\n\nexport type TDataResponsePayload<T> = {\n  data: T;\n};\n\n/**\n * Error\n */\nexport type THTTPError = {\n  message: string;\n};\n\n/**\n * Reminder\n */\nexport type TGetRemindersQueryParams = Partial<{\n  groupId: TReminderGroup[\"id\"];\n  state: TReminder[\"state\"];\n}>;\n\nexport type TGetRemindersResponsePayload = TDataResponsePayload<TReminder[]>;\n\nexport type TGetReminderRequestPayload = TReminder[\"id\"];\n\nexport type TGetReminderResponsePayload = TDataResponsePayload<TReminder>;\n\nexport type TCreateReminderRequestPayload = Pick<TReminder, \"title\"> & Partial<{ groupId: TReminderGroup[\"id\"] }>;\n\nexport type TCreateReminderResponsePayload = TDataResponsePayload<TReminder>;\n\nexport type TUpdateReminderRequestPayload = Pick<TReminder, \"id\"> &\n  Partial<Pick<TReminder, \"title\" | \"state\" | \"isPinned\" | \"dueDate\"> & { groupId: TReminderGroup[\"id\"] }>;\n\nexport type TUpdateReminderResponsePayload = TDataResponsePayload<TReminder>;\n\nexport type TDeleteReminderRequestPayload = TReminder[\"id\"];\n\nexport type TDeleteReminderResponsePayload = TMessageResponsePaylaod;\n\n/**\n * Reminder Group\n */\nexport type TGetReminderGroupsResponsePayload = TDataResponsePayload<TReminderGroup[]>;\n\nexport type TGetReminderGroupRequestPayload = TReminderGroup[\"id\"];\n\nexport type TGetReminderGroupResponsePayload = TDataResponsePayload<TReminderGroup>;\n\nexport type TCreateReminderGroupRequestPayload = Pick<TReminderGroup, \"name\">;\n\nexport type TCreateReminderGroupResponsePayload = TDataResponsePayload<TReminderGroup>;\n\nexport type TUpdateReminderGroupRequestPayload = Pick<TReminderGroup, \"id\"> & Partial<Pick<TReminderGroup, \"name\">>;\n\nexport type TUpdateReminderGroupResponsePayload = TDataResponsePayload<TReminderGroup>;\n\nexport type TDeleteReminderGroupRequestPayload = TReminderGroup[\"id\"];\n\nexport type TDeleteReminderGroupResponsePayload = TMessageResponsePaylaod;\n"],"names":["getReminders","http","get","urlPrefix","_ref","request","reminders","db","reminder","getAll","searchParams","getUrlSearchParams","url","data","filter","_reminder$group","group","id","state","HttpResponse","json","status","createReminder","post","async","_ref2","title","groupId","reminderGroup","find","message","concat","newReminder","create","deleteReminder","delete","_ref3","params","findFirst","where","equals","updateReminder","patch","_ref4","requestBody","updatedReminder","update","getReminderGroups","getReminderGroup","createReminderGroup","deleteReminderGroup","updateReminderGroup","factory","primaryKey","uuid","simple","isPinned","REMINDER_STATE","INACTIVE","oneOf","createdAt","Date","toISOString","updatedAt","dueDate","nullable","String","name","buildScenarios","builder","withReminders","n","arguments","length","undefined","i","withReminderGroups","reminderGroups","remindersPerGroup","forEach","groupName","handlers","Object","values","controllers","runServer","setupWorker","start","onUnhandledRequest","serviceWorker","process","apiUrl","path","Error","slice","INPROGRESS","COMPLETED","ARCHIVED"],"sourceRoot":""}