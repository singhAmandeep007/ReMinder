{"version":3,"file":"static/js/9.9215a938.chunk.js","mappings":"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","sources":["services/mocker/mirage/factories/reminder.ts","services/mocker/mirage/factories/reminderGroup.ts","services/mocker/mirage/models/reminder.ts","services/mocker/mirage/models/reminderGroup.ts","services/mocker/mirage/routes/index.ts","services/mocker/mirage/routes/reminder.ts","services/mocker/mirage/routes/reminderGroup.ts","services/mocker/mirage/routes/utils.ts","services/mocker/mirage/scenarios/index.ts","services/mocker/mirage/server.ts"],"sourcesContent":["import { Factory } from \"miragejs\";\n// eslint-disable-next-line import/no-unresolved\nimport { FactoryDefinition } from \"miragejs/-types\";\n\nimport { TReminder } from \"types\";\n\nimport { TAppModels } from \"../types\";\n\nexport const reminder: FactoryDefinition<TAppModels[\"reminder\"]> = Factory.extend<TReminder>({\n  id(n) {\n    return `reminder-id-${n}`;\n  },\n  title(n) {\n    return `Reminder ${n}`;\n  },\n  isPinned: false,\n  state: \"ACTIVE\",\n  createdAt() {\n    return new Date().toISOString();\n  },\n  updatedAt() {\n    return new Date().toISOString();\n  },\n});\n","import { Factory } from \"miragejs\";\n// eslint-disable-next-line import/no-unresolved\nimport { FactoryDefinition } from \"miragejs/-types\";\n\nimport { TReminderGroup } from \"types\";\n\nexport const reminderGroup: FactoryDefinition = Factory.extend<TReminderGroup>({\n  id(n) {\n    return `reminder-group-id-${n}`;\n  },\n  name(n) {\n    return `Reminder Group ${n}`;\n  },\n  createdAt() {\n    return new Date().toISOString();\n  },\n  updatedAt() {\n    return new Date().toISOString();\n  },\n});\n","// eslint-disable-next-line import/no-unresolved\nimport { BelongsTo, ModelDefinition } from \"miragejs/-types\";\nimport { Model, belongsTo } from \"miragejs\";\n\nimport { TReminder } from \"types\";\n\ntype TModelReminder = {\n  group: BelongsTo<\"reminderGroup\">;\n  getAttributes: () => TReminder;\n};\n\nexport const reminder: ModelDefinition<TModelReminder> = Model.extend({\n  // NOTE: the association's name is group and it is associated with model named reminderGroup.\n  group: belongsTo(\"reminderGroup\"),\n\n  getAttributes() {\n    // NOTE: this.attrs is the object that contains the attributes of the model.\n    // NOTE: this.fks is array of foreign keys of the model.\n    const { groupId, ...reminderAttributes } = (this as any).attrs;\n\n    if (groupId) {\n      reminderAttributes.group = (this as any).group.attrs;\n    }\n\n    return reminderAttributes as TReminder;\n  },\n});\n","// eslint-disable-next-line import/no-unresolved\nimport { ModelDefinition } from \"miragejs/-types\";\nimport { Model } from \"miragejs\";\n\nimport { TReminderGroup } from \"types\";\n\nexport const reminderGroup: ModelDefinition<TReminderGroup> = Model.extend({});\n","import { TAppMockServer } from \"../types\";\n\nimport { reminderRoutes } from \"./reminder\";\nimport { reminderGroupRoutes } from \"./reminderGroup\";\n\nexport function createRoutes(this: TAppMockServer) {\n  reminderRoutes.call(this);\n  reminderGroupRoutes.call(this);\n}\n","import { Response } from \"miragejs\";\n\nimport { TAppMockServer } from \"../types\";\n\nimport { urlPrefix } from \"./utils\";\n\nexport function reminderRoutes(this: TAppMockServer) {\n  this.get(urlPrefix(\"/reminders\"), (schema, request) => {\n    let reminders; // Collection<Instantiate<TAppRegistry, \"reminder\">>;\n    const queryParams = request.queryParams;\n    // queryParams = { groupId: \"group-id-1\" }\n\n    if (queryParams) {\n      reminders = schema.where(\"reminder\", queryParams);\n    } else {\n      reminders = schema.all(\"reminder\");\n    }\n\n    return {\n      data: reminders.models.map((reminder) => reminder.getAttributes()),\n    };\n  });\n\n  this.post(urlPrefix(\"/reminders\"), (schema, request) => {\n    const attrs = JSON.parse(request.requestBody);\n\n    const reminder = schema.create(\"reminder\", attrs);\n\n    return {\n      data: reminder.attrs,\n    };\n  });\n\n  // NOTE: :segmentName to define a dynamic segment in the URL for a route handler\n  this.delete(urlPrefix(\"/reminders/:id\"), (schema, request) => {\n    // NOTE: Access dynamic segments via request.params.segmentName\n    const id = request.params.id;\n\n    const reminder = schema.find(\"reminder\", id);\n\n    reminder?.destroy();\n\n    // NOTE: use Response class to return a custom response\n    return new Response(\n      reminder === null ? 404 : 200,\n      {},\n      { message: reminder === null ? `Reminder with id ${id} not found!` : `Reminder with id ${id} deleted!` }\n    );\n  });\n}\n","import { Response } from \"miragejs\";\n\nimport { TAppMockServer } from \"../types\";\n\nimport { urlPrefix } from \"./utils\";\n\nexport function reminderGroupRoutes(this: TAppMockServer) {\n  this.get(urlPrefix(\"/reminder-groups\"), (schema, request) => {\n    const reminderGroups = schema.all(\"reminderGroup\").models;\n    return {\n      data: reminderGroups,\n    };\n  });\n\n  this.delete(urlPrefix(\"/reminder-groups/:id\"), (schema, request) => {\n    const id = request.params.id;\n\n    const reminderGroup = schema.find(\"reminderGroup\", id);\n\n    reminderGroup?.destroy();\n\n    return new Response(\n      reminderGroup === null ? 404 : 200,\n      {},\n      {\n        message:\n          reminderGroup === null ? `Reminder group with id ${id} not found!` : `Reminder group with id ${id} deleted!`,\n      }\n    );\n  });\n}\n","const apiUrl = process.env.REACT_APP_API_URL;\n\nexport const urlPrefix = (path: string) => {\n  if (path[0] !== \"/\") {\n    throw new Error(\"Miragejs handler path should start with a forward slash.\");\n  }\n  const isApiUrlEndsWithSlash = apiUrl[apiUrl.length - 1] === \"/\";\n\n  if (isApiUrlEndsWithSlash) {\n    return `${apiUrl}${path.slice(1)}`;\n  }\n  return `${apiUrl}${path}`;\n};\n","import { TAppMockServer } from \"../types\";\n\nexport function buildScenarios(server: TAppMockServer) {\n  const builder = {\n    withReminders: (n: number = 10) => {\n      server.createList(\"reminder\", n);\n      return builder;\n    },\n    withReminderGroups: (n: number = 5) => {\n      const workGroup = server.create(\"reminderGroup\", { name: \"Work\" });\n      const homeGroup = server.create(\"reminderGroup\", { name: \"Home\" });\n      const personalGroup = server.create(\"reminderGroup\", { name: \"Personal\" });\n\n      server.createList(\"reminder\", n, { group: workGroup });\n      server.createList(\"reminder\", n, { group: homeGroup });\n      server.createList(\"reminder\", n, { group: personalGroup });\n\n      return builder;\n    },\n  };\n  return builder;\n}\n","import { createServer } from \"miragejs\";\n\nimport { createRoutes } from \"./routes\";\nimport * as models from \"./models\";\nimport * as factories from \"./factories\";\nimport { buildScenarios } from \"./scenarios\";\n\nimport { TAppMockServer } from \"./types\";\n\nexport type TRunMirageServerConfig = {\n  environment?: string;\n  logging?: boolean;\n  timing?: number;\n};\n\nexport function runServer(config: TRunMirageServerConfig = {}): TAppMockServer {\n  return createServer({\n    logging: config.logging || true,\n    environment: config?.environment || \"development\",\n    models,\n    factories,\n    // mirage's seeds are loaded on initialization\n    seeds(server) {\n      buildScenarios(server).withReminders(5).withReminderGroups(3);\n    },\n\n    routes() {\n      this.timing = config.timing || 100;\n\n      createRoutes.call(this);\n\n      this.passthrough();\n    },\n  });\n}\n"],"names":["reminder","Factory","extend","id","n","concat","title","isPinned","state","createdAt","Date","toISOString","updatedAt","reminderGroup","name","Model","group","belongsTo","getAttributes","groupId","reminderAttributes","this","attrs","createRoutes","reminderRoutes","call","reminderGroupRoutes","get","urlPrefix","schema","request","reminders","queryParams","where","all","data","models","map","post","JSON","parse","requestBody","create","delete","params","find","destroy","Response","message","apiUrl","process","path","Error","slice","buildScenarios","server","builder","withReminders","arguments","length","undefined","createList","withReminderGroups","workGroup","homeGroup","personalGroup","runServer","config","createServer","logging","environment","factories","seeds","routes","timing","passthrough"],"sourceRoot":""}