{"version":3,"file":"static/js/168.20a1fdc7.chunk.js","mappings":"0KAKO,SAASA,IACdC,EAAAA,eAAeC,KAAKC,MACpBC,EAAAA,oBAAoBF,KAAKC,KAC3B,C,8ECFO,SAASF,IACdE,KAAKE,KAAIC,EAAAA,EAAAA,WAAU,eAAe,CAACC,EAAQC,KACzC,IAAIC,EACJ,MAAMC,EAAcF,EAAQE,YAS5B,OALED,EADEC,EACUH,EAAOI,MAAM,WAAYD,GAEzBH,EAAOK,IAAI,YAGlB,CACLC,KAAMJ,EAAUK,OAAOC,KAAKC,GAAaA,EAASC,kBACnD,IAGHd,KAAKe,MAAKZ,EAAAA,EAAAA,WAAU,eAAe,CAACC,EAAQC,KAC1C,MAAMW,EAAQC,KAAKC,MAAMb,EAAQc,aAIjC,MAAO,CACLT,KAHeN,EAAOgB,OAAO,WAAYJ,GAG1BA,MAChB,IAIHhB,KAAKqB,QAAOlB,EAAAA,EAAAA,WAAU,mBAAmB,CAACC,EAAQC,KAEhD,MAAMiB,EAAKjB,EAAQkB,OAAOD,GAEpBT,EAAWT,EAAOoB,KAAK,WAAYF,GAKzC,OAHQ,OAART,QAAQ,IAARA,GAAAA,EAAUY,UAGH,IAAIC,EAAAA,GACI,OAAbb,EAAoB,IAAM,IAC1B,CAAC,EACD,CAAEc,QAA0B,oBAAAC,OAAuBN,EAA3B,OAAbT,EAA0C,cAAsC,cAC5F,GAEL,C,mFC3CO,SAASZ,IACdD,KAAKE,KAAIC,EAAAA,EAAAA,WAAU,qBAAqB,CAACC,EAAQC,KAExC,CACLK,KAFqBN,EAAOK,IAAI,iBAAiBE,WAMrDX,KAAKqB,QAAOlB,EAAAA,EAAAA,WAAU,yBAAyB,CAACC,EAAQC,KACtD,MAAMiB,EAAKjB,EAAQkB,OAAOD,GAEpBO,EAAgBzB,EAAOoB,KAAK,gBAAiBF,GAInD,OAFa,OAAbO,QAAa,IAAbA,GAAAA,EAAeJ,UAER,IAAIC,EAAAA,GACS,OAAlBG,EAAyB,IAAM,IAC/B,CAAC,EACD,CACEF,QACwB,0BAAAC,OAA6BN,EAAjC,OAAlBO,EAAqD,cAA4C,cAEtG,GAEL,C,iDC9BA,MAAMC,EAASC,+BAEF5B,EAAa6B,IACxB,GAAgB,MAAZA,EAAK,GACP,MAAM,IAAIC,MAAM,4DAIlB,MAF4D,MAA9BH,EAAOA,IAG7B,GAANF,OAAUE,GAAMF,OAAGI,EAAKE,MAAM,IAE1B,GAANN,OAAUE,GAAMF,OAAGI,EAAI,C","sources":["services/mocker/mirage/routes/index.ts","services/mocker/mirage/routes/reminder.ts","services/mocker/mirage/routes/reminderGroup.ts","services/mocker/mirage/routes/utils.ts"],"sourcesContent":["import { TAppMockServer } from \"../types\";\n\nimport { reminderRoutes } from \"./reminder\";\nimport { reminderGroupRoutes } from \"./reminderGroup\";\n\nexport function createRoutes(this: TAppMockServer) {\n  reminderRoutes.call(this);\n  reminderGroupRoutes.call(this);\n}\n","import { Response } from \"miragejs\";\n\nimport { TAppMockServer } from \"../types\";\n\nimport { urlPrefix } from \"./utils\";\n\nexport function reminderRoutes(this: TAppMockServer) {\n  this.get(urlPrefix(\"/reminders\"), (schema, request) => {\n    let reminders; // Collection<Instantiate<TAppRegistry, \"reminder\">>;\n    const queryParams = request.queryParams;\n    // queryParams = { groupId: \"group-id-1\" }\n\n    if (queryParams) {\n      reminders = schema.where(\"reminder\", queryParams);\n    } else {\n      reminders = schema.all(\"reminder\");\n    }\n\n    return {\n      data: reminders.models.map((reminder) => reminder.getAttributes()),\n    };\n  });\n\n  this.post(urlPrefix(\"/reminders\"), (schema, request) => {\n    const attrs = JSON.parse(request.requestBody);\n\n    const reminder = schema.create(\"reminder\", attrs);\n\n    return {\n      data: reminder.attrs,\n    };\n  });\n\n  // NOTE: :segmentName to define a dynamic segment in the URL for a route handler\n  this.delete(urlPrefix(\"/reminders/:id\"), (schema, request) => {\n    // NOTE: Access dynamic segments via request.params.segmentName\n    const id = request.params.id;\n\n    const reminder = schema.find(\"reminder\", id);\n\n    reminder?.destroy();\n\n    // NOTE: use Response class to return a custom response\n    return new Response(\n      reminder === null ? 404 : 200,\n      {},\n      { message: reminder === null ? `Reminder with id ${id} not found!` : `Reminder with id ${id} deleted!` }\n    );\n  });\n}\n","import { Response } from \"miragejs\";\n\nimport { TAppMockServer } from \"../types\";\n\nimport { urlPrefix } from \"./utils\";\n\nexport function reminderGroupRoutes(this: TAppMockServer) {\n  this.get(urlPrefix(\"/reminder-groups\"), (schema, request) => {\n    const reminderGroups = schema.all(\"reminderGroup\").models;\n    return {\n      data: reminderGroups,\n    };\n  });\n\n  this.delete(urlPrefix(\"/reminder-groups/:id\"), (schema, request) => {\n    const id = request.params.id;\n\n    const reminderGroup = schema.find(\"reminderGroup\", id);\n\n    reminderGroup?.destroy();\n\n    return new Response(\n      reminderGroup === null ? 404 : 200,\n      {},\n      {\n        message:\n          reminderGroup === null ? `Reminder group with id ${id} not found!` : `Reminder group with id ${id} deleted!`,\n      }\n    );\n  });\n}\n","const apiUrl = process.env.REACT_APP_API_URL;\n\nexport const urlPrefix = (path: string) => {\n  if (path[0] !== \"/\") {\n    throw new Error(\"Miragejs handler path should start with a forward slash.\");\n  }\n  const isApiUrlEndsWithSlash = apiUrl[apiUrl.length - 1] === \"/\";\n\n  if (isApiUrlEndsWithSlash) {\n    return `${apiUrl}${path.slice(1)}`;\n  }\n  return `${apiUrl}${path}`;\n};\n"],"names":["createRoutes","reminderRoutes","call","this","reminderGroupRoutes","get","urlPrefix","schema","request","reminders","queryParams","where","all","data","models","map","reminder","getAttributes","post","attrs","JSON","parse","requestBody","create","delete","id","params","find","destroy","Response","message","concat","reminderGroup","apiUrl","process","path","Error","slice"],"sourceRoot":""}