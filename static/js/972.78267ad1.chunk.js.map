{"version":3,"file":"static/js/972.78267ad1.chunk.js","mappings":"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","sources":["services/mocker/mirage/utils.ts","services/mocker/mirage/routes/reminder.ts","services/mocker/mirage/routes/reminderGroup.ts","services/mocker/mirage/routes/index.ts","services/mocker/mirage/models/reminder.ts","services/mocker/mirage/models/reminderGroup.ts","services/mocker/mirage/factories/reminder.ts","services/mocker/mirage/factories/reminderGroup.ts","services/mocker/mirage/identityManager.ts","services/mocker/mirage/server.ts","services/mocker/mirage/scenarios/index.ts","services/mocker/utils.ts","types/Reminders.ts","../node_modules/date-fns/addMilliseconds.mjs","../node_modules/date-fns/addMinutes.mjs"],"sourcesContent":["import { Response } from \"miragejs\";\n\nexport const resourceNotFoundResponse = (resourceName?: string) =>\n  new Response(404, {}, { message: `Resource ${resourceName} not found!` });\n","import { REMINDER_STATE, TReminder } from \"types\";\n\nimport { urlPrefix } from \"shared\";\n\nimport { TAppMockServer } from \"../types\";\n\nimport { resourceNotFoundResponse } from \"../utils\";\n\nexport function reminderRoutes(this: TAppMockServer) {\n  this.get(urlPrefix(\"/reminders\"), (schema, request) => {\n    let reminders; // Collection<Instantiate<TAppRegistry, \"reminder\">>;\n    const queryParams = request.queryParams;\n    // queryParams = { groupId: \"group-id-1\" }\n\n    if (queryParams) {\n      if (queryParams.groupId) {\n        const reminderGroup = schema.find(\"reminderGroup\", queryParams.groupId as string);\n        if (reminderGroup === null) {\n          return resourceNotFoundResponse(\"Reminder group \" + queryParams.groupId);\n        }\n      }\n      reminders = schema.where(\"reminder\", queryParams);\n    } else {\n      reminders = schema.all(\"reminder\");\n    }\n\n    return {\n      data: reminders.models.map((reminder) => reminder.getAttributes()),\n    };\n  });\n\n  // NOTE: :segmentName to define a dynamic segment in the URL for a route handler\n  this.delete(urlPrefix(\"/reminders/:id\"), (schema, request) => {\n    // NOTE: Access dynamic segments via request.params.segmentName\n    const id = request.params.id;\n\n    const reminder = schema.find(\"reminder\", id);\n\n    reminder?.destroy();\n\n    if (reminder === null) {\n      return resourceNotFoundResponse(\"Reminder \" + id);\n    }\n\n    // NOTE: use Response class to return a custom response\n    return { message: `Reminder with id ${id} deleted!` };\n  });\n\n  this.post(urlPrefix(\"/reminders\"), (schema, request) => {\n    const attrs = JSON.parse(request.requestBody);\n\n    const defaultAttr: Partial<TReminder> = {\n      isPinned: false,\n      state: REMINDER_STATE.INACTIVE,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n      focusSessions: [],\n      dueDate: null,\n      currentFocusSession: null,\n    };\n\n    const reminder = schema.create(\"reminder\", Object.assign(defaultAttr, attrs));\n\n    return {\n      data: reminder.getAttributes(),\n    };\n  });\n\n  this.patch(urlPrefix(\"/reminders/:id\"), (schema, request) => {\n    const id = request.params.id;\n    const attrs = JSON.parse(request.requestBody);\n\n    const reminder = schema.find(\"reminder\", id);\n\n    if (reminder === null) {\n      return resourceNotFoundResponse(\"Reminder \" + id);\n    }\n\n    reminder.update(attrs);\n\n    return {\n      data: reminder.getAttributes(),\n    };\n  });\n}\n","import { TReminderGroup } from \"types\";\n\nimport { urlPrefix } from \"shared\";\n\nimport { TAppMockServer } from \"../types\";\n\nimport { resourceNotFoundResponse } from \"../utils\";\n\nexport function reminderGroupRoutes(this: TAppMockServer) {\n  this.get(urlPrefix(\"/reminder-groups\"), (schema) => {\n    const reminderGroups = schema.all(\"reminderGroup\").models;\n\n    return {\n      data: reminderGroups,\n    };\n  });\n\n  this.get(urlPrefix(\"/reminder-groups/:id\"), (schema, request) => {\n    const id = request.params.id;\n\n    const reminderGroup = schema.find(\"reminderGroup\", id);\n\n    if (reminderGroup === null) {\n      return resourceNotFoundResponse(\"Reminder group \" + id);\n    }\n\n    return {\n      data: reminderGroup,\n    };\n  });\n\n  this.delete(urlPrefix(\"/reminder-groups/:id\"), (schema, request) => {\n    const id = request.params.id;\n\n    const reminderGroup = schema.find(\"reminderGroup\", id);\n\n    if (reminderGroup === null) {\n      return resourceNotFoundResponse(\"Reminder group \" + id);\n    }\n\n    // @ts-expect-error\n    const reminders = schema.all(\"reminder\").filter((reminder) => reminder.groupId === id);\n\n    reminders?.destroy();\n\n    reminderGroup?.destroy();\n\n    return {\n      message: `Reminder group with id ${id} deleted!`,\n    };\n  });\n\n  this.patch(urlPrefix(\"/reminder-groups/:id\"), (schema, request) => {\n    const id = request.params.id;\n    const attrs = JSON.parse(request.requestBody);\n\n    const reminderGroup = schema.find(\"reminderGroup\", id);\n\n    if (reminderGroup === null) {\n      return resourceNotFoundResponse(\"Reminder group \" + id);\n    }\n\n    reminderGroup.update(attrs);\n\n    return {\n      data: reminderGroup,\n    };\n  });\n\n  this.post(urlPrefix(\"/reminder-groups\"), (schema, request) => {\n    const attrs = JSON.parse(request.requestBody);\n\n    const defaultAttr: Partial<TReminderGroup> = {\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    };\n\n    const reminderGroup = schema.create(\"reminderGroup\", Object.assign(defaultAttr, attrs));\n\n    return {\n      data: reminderGroup,\n    };\n  });\n}\n","import { TAppMockServer } from \"../types\";\n\nimport { reminderRoutes } from \"./reminder\";\nimport { reminderGroupRoutes } from \"./reminderGroup\";\n\nexport function createRoutes(this: TAppMockServer) {\n  reminderRoutes.call(this);\n  reminderGroupRoutes.call(this);\n}\n","// eslint-disable-next-line import/no-unresolved\nimport { BelongsTo, ModelDefinition } from \"miragejs/-types\";\nimport { Model, belongsTo } from \"miragejs\";\n\nimport { TReminder } from \"types\";\n\ntype TModelReminder = {\n  group: BelongsTo<\"reminderGroup\">;\n  getAttributes: () => TReminder;\n};\n\nexport const reminder: ModelDefinition<TModelReminder> = Model.extend({\n  // NOTE: the association's name is group and it is associated with model named reminderGroup.\n  group: belongsTo(\"reminderGroup\"),\n\n  getAttributes() {\n    // NOTE: this.attrs is the object that contains the attributes of the model.\n    // NOTE: this.fks is array of foreign keys of the model.\n    const { groupId, ...reminderAttributes } = (this as any).attrs;\n    // NOTE: populate the group attribute if the reminder is associated with a group.\n    if (groupId) {\n      reminderAttributes.group = (this as any).group.attrs;\n    } else {\n      reminderAttributes.group = null;\n    }\n\n    return reminderAttributes as TReminder;\n  },\n});\n","// eslint-disable-next-line import/no-unresolved\nimport { ModelDefinition } from \"miragejs/-types\";\nimport { Model } from \"miragejs\";\n\nimport { TReminderGroup } from \"types\";\n\nexport const reminderGroup: ModelDefinition<TReminderGroup> = Model.extend({});\n","import { Factory } from \"miragejs\";\n// eslint-disable-next-line import/no-unresolved\nimport { FactoryDefinition } from \"miragejs/-types\";\n\nimport { TReminder, REMINDER_STATE } from \"types\";\n\nimport { TAppModels } from \"../types\";\n\nexport const reminder: FactoryDefinition<TAppModels[\"reminder\"]> = Factory.extend<TReminder>({\n  id(n) {\n    return `reminder-id-${n}`;\n  },\n  title(n) {\n    return `Reminder ${n}`;\n  },\n  isPinned(n) {\n    if (n % 2 === 0) {\n      return true;\n    }\n    return false;\n  },\n  state: REMINDER_STATE.INACTIVE,\n  createdAt() {\n    return new Date().toISOString();\n  },\n  updatedAt() {\n    return new Date().toISOString();\n  },\n  dueDate() {\n    return null;\n  },\n  focusSessions() {\n    return [];\n  },\n  group() {\n    return null;\n  },\n  currentFocusSession() {\n    return null;\n  },\n});\n","import { Factory } from \"miragejs\";\n// eslint-disable-next-line import/no-unresolved\nimport { FactoryDefinition } from \"miragejs/-types\";\n\nimport { TReminderGroup } from \"types\";\n\nexport const reminderGroup: FactoryDefinition = Factory.extend<TReminderGroup>({\n  id(n) {\n    return `reminder-group-id-${n}`;\n  },\n  name(n) {\n    return `Reminder Group ${n}`;\n  },\n  createdAt() {\n    return new Date().toISOString();\n  },\n  updatedAt() {\n    return new Date().toISOString();\n  },\n});\n","import { uuid } from \"shared\";\n\nclass IdentityManager {\n  ids: Set<string>;\n\n  constructor() {\n    this.ids = new Set<string>();\n  }\n\n  // Returns a new unused unique identifier.\n  fetch() {\n    let id = uuid();\n    while (this.ids.has(id)) {\n      id = uuid();\n    }\n\n    this.ids.add(id);\n\n    return id;\n  }\n\n  // Registers an identifier as used. Must throw if identifier is already used.\n  set(id: string) {\n    if (this.ids.has(id)) {\n      throw new Error(`ID ${id} has already been used.`);\n    }\n\n    this.ids.add(id);\n  }\n\n  // Resets all used identifiers to unused.\n  reset() {\n    this.ids.clear();\n  }\n}\n\nexport { IdentityManager };\n","import { createServer } from \"miragejs\";\n\nimport { createRoutes } from \"./routes\";\nimport * as models from \"./models\";\nimport * as factories from \"./factories\";\n\nimport { TAppMockServer } from \"./types\";\nimport { IdentityManager } from \"./identityManager\";\nimport { buildScenarios } from \"./scenarios\";\n\nexport type TRunMirageServerConfig = {\n  environment?: string;\n  logging?: boolean;\n  timing?: number;\n  trackRequests?: boolean;\n  withDefaultScenario?: boolean;\n};\n\nexport function runServer(config: TRunMirageServerConfig = {}): TAppMockServer {\n  const server = createServer({\n    logging: config.logging || true,\n    trackRequests: config?.trackRequests || false,\n    environment: config?.environment || \"development\",\n    models,\n    factories,\n    identityManagers: {\n      application: IdentityManager,\n    },\n    // mirage's seeds are loaded on initialization\n    seeds(server) {\n      if (config?.withDefaultScenario) {\n        buildScenarios(server).withReminders(5).withReminderGroups({ remindersPerGroup: 2 }).withFocusSessions();\n      }\n    },\n\n    routes() {\n      this.timing = config.timing || 100;\n\n      createRoutes.call(this);\n\n      this.passthrough();\n    },\n  });\n\n  return server;\n}\n\nexport type TServer = ReturnType<typeof runServer>;\n","import { TAppMockServer } from \"../types\";\n\nimport { generateRandomFocusSessions } from \"../../utils\";\n\nimport { TScenariosBuilder } from \"../../types\";\n\nexport function buildScenarios(server: TAppMockServer) {\n  const builder: TScenariosBuilder = {\n    // create reminders without any group\n    withReminders: (n = 10) => {\n      server.createList(\"reminder\", n);\n      return builder;\n    },\n    // create reminders with groups\n    withReminderGroups: ({ reminderGroups = [\"Work\", \"Home\", \"Personal\"], remindersPerGroup = 10 }) => {\n      reminderGroups.forEach((groupName) => {\n        const group = server.create(\"reminderGroup\", { name: groupName });\n        server.createList(\"reminder\", remindersPerGroup, { group });\n      });\n\n      return builder;\n    },\n\n    withFocusSessions: () => {\n      server.db.reminders.forEach((reminder) => {\n        const n = Math.floor(Math.random() * (10 - 0 + 1)) + 0;\n\n        const focusSessions = generateRandomFocusSessions(n) as never[];\n\n        server.db.reminders.update(reminder.id, {\n          focusSessions,\n        });\n      });\n\n      return builder;\n    },\n  };\n  return builder;\n}\n","import { subDays, addMinutes } from \"date-fns\";\n\nimport { TReminder } from \"types\";\n\nimport { generateUniqueRandomNumbers } from \"shared\";\n\nexport function generateRandomFocusSessions(\n  numberOfEntries: number,\n  maxDaysInPast: number = 30\n): TReminder[\"focusSessions\"] {\n  const now = new Date();\n  const history: TReminder[\"focusSessions\"] = [];\n\n  const randomPastDays = generateUniqueRandomNumbers(numberOfEntries, 1, maxDaysInPast);\n\n  for (let i = 0; i < numberOfEntries; i++) {\n    // Generate a random start date within the last maxDaysInPast days\n    const startDate = subDays(now, randomPastDays[i]);\n\n    // Add a random number of minutes (0 to 120) to get the end time\n    const randomMinutes = Math.floor(Math.random() * 121);\n    const endDate = addMinutes(startDate, randomMinutes);\n\n    // Ensure the end time is not in the future\n    const adjustedEndDate = endDate > now ? now : endDate;\n\n    const entry: TReminder[\"focusSessions\"][number] = {\n      startTime: startDate.toISOString(),\n      endTime: adjustedEndDate.toISOString(),\n    };\n\n    history.push(entry);\n  }\n\n  // Sort the history by start time, most recent last\n  return history.sort((a, b) => new Date(a.startTime).getTime() - new Date(b.startTime).getTime());\n}\n","export const REMINDER_STATE = {\n  INACTIVE: \"INACTIVE\",\n  INPROGRESS: \"INPROGRESS\",\n  COMPLETED: \"COMPLETED\",\n  ARCHIVED: \"ARCHIVED\",\n} as const;\n\nexport type TReminderState = (typeof REMINDER_STATE)[keyof typeof REMINDER_STATE];\n\nexport type TReminderFocusSession = {\n  startTime: string;\n  endTime: string;\n};\n\nexport type TReminder = {\n  id: string;\n  title: string;\n  /**\n   * Current state of the reminder.\n   *\n   * @example \"IN_ACTIVE\" | \"IN_PROGRESS\" | \"COMPLETED\"\n   */\n  state: TReminderState;\n  /**\n   * Indicates if the reminder is pinned on top.\n   */\n  isPinned: boolean;\n  /**\n   * Date and time the reminder was created. (ISO 8601 format)\n   */\n  createdAt: string;\n  /**\n   * Date and time the reminder was last updated. (ISO 8601 format)\n   */\n  updatedAt: string;\n  /**\n   * Optional reminder group this reminder belongs to.\n   */\n  group: TReminderGroup | null;\n  /**\n   * Due date and time for the reminder. (ISO 8601 format)\n   *\n   * @example \"2021-09-30T00:00:00.000Z\"\n   */\n  dueDate: string | null;\n  currentFocusSession: {\n    /**\n     * date and time when focus session was started for this reminder. (ISO 8601 format)\n     */\n    startTime: string;\n    /**\n     * date and time the focus session stopped for this reminder. (ISO 8601 format)\n     */\n    endTime: string;\n  } | null;\n  /**\n   * Array to store history of multiple focus sessions for this reminder.\n   * Each session includes start time and end time.\n   */\n  focusSessions: TReminderFocusSession[];\n};\n\nexport type TReminderGroup = {\n  id: string;\n  name: string;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type TMessageResponsePaylaod = {\n  message: string;\n};\n\nexport type TDataResponsePayload<T> = {\n  data: T;\n};\n\n/**\n * Error\n */\nexport type THTTPError = {\n  message: string;\n};\n\n/**\n * Reminder\n */\nexport type TGetRemindersQueryParams = Partial<{\n  groupId: TReminderGroup[\"id\"];\n  state: TReminder[\"state\"];\n}>;\n\nexport type TGetRemindersResponsePayload = TDataResponsePayload<TReminder[]>;\n\nexport type TGetReminderRequestPayload = TReminder[\"id\"];\n\nexport type TGetReminderResponsePayload = TDataResponsePayload<TReminder>;\n\nexport type TCreateReminderRequestPayload = Pick<TReminder, \"title\"> & Partial<{ groupId: TReminderGroup[\"id\"] }>;\n\nexport type TCreateReminderResponsePayload = TDataResponsePayload<TReminder>;\n\nexport type TUpdateReminderRequestPayload = Pick<TReminder, \"id\"> &\n  Partial<\n    Pick<TReminder, \"title\" | \"state\" | \"isPinned\" | \"dueDate\" | \"currentFocusSession\" | \"focusSessions\"> & {\n      groupId: TReminderGroup[\"id\"];\n    }\n  >;\n\nexport type TUpdateReminderResponsePayload = TDataResponsePayload<TReminder>;\n\nexport type TDeleteReminderRequestPayload = TReminder[\"id\"];\n\nexport type TDeleteReminderResponsePayload = TMessageResponsePaylaod;\n\n/**\n * Reminder Group\n */\nexport type TGetReminderGroupsResponsePayload = TDataResponsePayload<TReminderGroup[]>;\n\nexport type TGetReminderGroupRequestPayload = TReminderGroup[\"id\"];\n\nexport type TGetReminderGroupResponsePayload = TDataResponsePayload<TReminderGroup>;\n\nexport type TCreateReminderGroupRequestPayload = Pick<TReminderGroup, \"name\">;\n\nexport type TCreateReminderGroupResponsePayload = TDataResponsePayload<TReminderGroup>;\n\nexport type TUpdateReminderGroupRequestPayload = Pick<TReminderGroup, \"id\"> & Partial<Pick<TReminderGroup, \"name\">>;\n\nexport type TUpdateReminderGroupResponsePayload = TDataResponsePayload<TReminderGroup>;\n\nexport type TDeleteReminderGroupRequestPayload = TReminderGroup[\"id\"];\n\nexport type TDeleteReminderGroupResponsePayload = TMessageResponsePaylaod;\n","import { toDate } from \"./toDate.mjs\";\nimport { constructFrom } from \"./constructFrom.mjs\";\n\n/**\n * @name addMilliseconds\n * @category Millisecond Helpers\n * @summary Add the specified number of milliseconds to the given date.\n *\n * @description\n * Add the specified number of milliseconds to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param amount - The amount of milliseconds to be added.\n *\n * @returns The new date with the milliseconds added\n *\n * @example\n * // Add 750 milliseconds to 10 July 2014 12:45:30.000:\n * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:30.750\n */\nexport function addMilliseconds(date, amount) {\n  const timestamp = +toDate(date);\n  return constructFrom(date, timestamp + amount);\n}\n\n// Fallback for modularized imports:\nexport default addMilliseconds;\n","import { addMilliseconds } from \"./addMilliseconds.mjs\";\nimport { millisecondsInMinute } from \"./constants.mjs\";\n\n/**\n * @name addMinutes\n * @category Minute Helpers\n * @summary Add the specified number of minutes to the given date.\n *\n * @description\n * Add the specified number of minutes to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param amount - The amount of minutes to be added.\n *\n * @returns The new date with the minutes added\n *\n * @example\n * // Add 30 minutes to 10 July 2014 12:00:00:\n * const result = addMinutes(new Date(2014, 6, 10, 12, 0), 30)\n * //=> Thu Jul 10 2014 12:30:00\n */\nexport function addMinutes(date, amount) {\n  return addMilliseconds(date, amount * millisecondsInMinute);\n}\n\n// Fallback for modularized imports:\nexport default addMinutes;\n"],"names":["resourceNotFoundResponse","resourceName","Response","message","concat","reminderRoutes","this","get","urlPrefix","schema","request","reminders","queryParams","groupId","find","where","all","data","models","map","reminder","getAttributes","delete","id","params","destroy","post","attrs","JSON","parse","requestBody","defaultAttr","isPinned","state","REMINDER_STATE","INACTIVE","createdAt","Date","toISOString","updatedAt","focusSessions","dueDate","currentFocusSession","create","Object","assign","patch","update","reminderGroupRoutes","reminderGroup","filter","createRoutes","call","Model","extend","group","belongsTo","reminderAttributes","Factory","n","title","name","IdentityManager","constructor","ids","Set","fetch","uuid","has","add","set","Error","reset","clear","runServer","config","arguments","length","undefined","server","createServer","logging","trackRequests","environment","factories","identityManagers","application","seeds","withDefaultScenario","builder","withReminders","createList","withReminderGroups","_ref","reminderGroups","remindersPerGroup","forEach","groupName","withFocusSessions","db","Math","floor","random","generateRandomFocusSessions","buildScenarios","routes","timing","passthrough","numberOfEntries","maxDaysInPast","now","history","randomPastDays","generateUniqueRandomNumbers","i","startDate","subDays","randomMinutes","endDate","addMinutes","adjustedEndDate","entry","startTime","endTime","push","sort","a","b","getTime","INPROGRESS","COMPLETED","ARCHIVED","addMilliseconds","date","amount","timestamp","toDate","constructFrom","millisecondsInMinute"],"sourceRoot":""}