{"version":3,"file":"static/js/967.195bc889.chunk.js","mappings":"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","sources":["views/Reminders/components/DeleteButton.tsx","views/Reminders/ReminderItem.tsx","views/Reminders/RemindersList.tsx","views/Reminders/ReminderGroupItem.tsx","views/Reminders/ReminderGroupList.tsx","views/Reminders/Reminders.tsx"],"sourcesContent":["import { FC } from \"react\";\nimport { Trash } from \"lucide-react\";\n\nimport { Button, TButtonProps } from \"components\";\n\nexport const DeleteButton: FC<TButtonProps> = ({ children, ...props }) => {\n  return (\n    <Button\n      size=\"icon\"\n      variant={\"ghost\"}\n      className=\"shrink-0 opacity-30 hover:bg-accent-dark hover:text-destructive hover:opacity-100\"\n      {...props}\n    >\n      <Trash className=\"icon\" />\n      {children}\n    </Button>\n  );\n};\n","import { FC, PropsWithChildren } from \"react\";\n\nimport { TReminder } from \"types\";\n\nimport { DeleteButton } from \"./components\";\n\nexport type TReminderItemProps = {\n  reminder: TReminder;\n};\n\nexport const ReminderItem: FC<PropsWithChildren<TReminderItemProps>> = ({ reminder }) => {\n  return (\n    <div\n      className=\"flex flex-1 items-center justify-between gap-2 py-2\"\n      data-testid={`reminder-item-${reminder.id}`}\n    >\n      <div>{reminder.title}</div>\n      <DeleteButton data-testid={`delete-reminder-item-${reminder.id}`} />\n    </div>\n  );\n};\n","import { FC, PropsWithChildren } from \"react\";\n\nimport { RefreshCcw } from \"lucide-react\";\n\nimport { Button, Typography } from \"components\";\n\nimport { useGetRemindersQuery, useSelectReminderGroups, useSelectQueryParams } from \"shared\";\n\nimport { ReminderItem } from \"./ReminderItem\";\n\nexport type TRemindersListProps = Record<string, never>;\n\nexport const RemindersList: FC<PropsWithChildren<TRemindersListProps>> = () => {\n  const queryParams = useSelectQueryParams();\n\n  const { data: reminders, refetch } = useGetRemindersQuery(queryParams);\n\n  const { data: reminderGroups } = useSelectReminderGroups();\n\n  const reminderGroupName =\n    reminderGroups && reminderGroups.find((reminderGroup) => reminderGroup.id === queryParams.groupId)?.name;\n\n  return (\n    <div className=\"flex flex-1 flex-col overflow-hidden p-4\">\n      <div className=\"mb-2 flex items-center justify-between\">\n        <Typography\n          variant={\"h3\"}\n          className=\"text-md flex items-center justify-between font-bold leading-none\"\n          data-testid=\"active-list-title\"\n        >\n          {reminderGroupName || \"All\"}\n        </Typography>\n        <div className=\"flex gap-2\">\n          <Button\n            size={\"icon\"}\n            variant={\"ghost\"}\n            className=\"hover:text-primary\"\n            data-testid=\"refresh-reminder-list\"\n          >\n            <RefreshCcw\n              className=\"icon\"\n              onClick={refetch}\n            />\n          </Button>\n        </div>\n      </div>\n      {reminders && (\n        <div className=\"flex-1 overflow-scroll\">\n          <ul className=\"divide divide-y\">\n            {reminders.map((reminder) => {\n              return (\n                <li key={reminder.id}>\n                  <ReminderItem reminder={reminder} />\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { FC, PropsWithChildren, useCallback } from \"react\";\n\nimport { TReminderGroup } from \"types\";\n\nimport { useAppDispatch, setQueryParams, useAppSelector, selectQueryParams, cn } from \"shared\";\n\nimport { DeleteButton } from \"./components\";\n\nexport type TReminderGroupItemProps = {\n  reminderGroup?: TReminderGroup;\n};\n\nexport const ReminderGroupItem: FC<PropsWithChildren<TReminderGroupItemProps>> = ({ reminderGroup }) => {\n  const dispatch = useAppDispatch();\n\n  const { groupId } = useAppSelector(selectQueryParams);\n\n  const isSelected = groupId === reminderGroup?.id;\n\n  const className = cn(\"flex flex-1 items-center justify-between py-2 cursor-pointer gap-2\");\n\n  const titleClassName = cn(isSelected && \"text-primary\");\n\n  const handleOnClick = useCallback(\n    (queryParams: Parameters<typeof setQueryParams>[0]) => {\n      dispatch(setQueryParams(queryParams));\n    },\n    [dispatch]\n  );\n\n  if (!reminderGroup) {\n    return (\n      <div\n        className={className}\n        data-testid=\"reminder-group-item-all\"\n        onClick={() => handleOnClick({ groupId: undefined })}\n      >\n        <div className={titleClassName}>All</div>\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={className}\n      data-testid={`reminder-group-item-${reminderGroup.id}`}\n      onClick={() => handleOnClick({ groupId: reminderGroup.id })}\n    >\n      <div className={titleClassName}> {reminderGroup.name}</div>\n\n      <DeleteButton data-testid={`delete-reminder-group-item-${reminderGroup.id}`} />\n    </div>\n  );\n};\n","import { FC, PropsWithChildren } from \"react\";\n\nimport { Plus } from \"lucide-react\";\n\nimport { useGetReminderGroupsQuery } from \"shared\";\n\nimport { Button } from \"components\";\n\nimport { ReminderGroupItem } from \"./ReminderGroupItem\";\n\nexport type TReminderGroupListProps = Record<string, never>;\n\nexport const ReminderGroupList: FC<PropsWithChildren<TReminderGroupListProps>> = () => {\n  const { data: reminderGroups } = useGetReminderGroupsQuery();\n\n  return (\n    <div className=\"flex min-w-[200px] flex-1 flex-col overflow-hidden bg-secondary p-4\">\n      <div className=\"mb-2 flex justify-center\">\n        <Button\n          className=\"gap-1 hover:bg-accent-dark hover:text-primary\"\n          variant={\"ghost\"}\n        >\n          <Plus className=\"icon\" />\n          Add list\n        </Button>\n      </div>\n      <div className=\"flex-1 overflow-scroll\">\n        <ul className=\"divide divide-y\">\n          <li key=\"all\">\n            <ReminderGroupItem />\n          </li>\n          {reminderGroups &&\n            reminderGroups.map((reminderGroup) => {\n              return (\n                <li key={reminderGroup.id}>\n                  <ReminderGroupItem reminderGroup={reminderGroup} />\n                </li>\n              );\n            })}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import { FC, PropsWithChildren } from \"react\";\n\nimport { Panel, PanelGroup, PanelResizeHandle } from \"react-resizable-panels\";\nimport { EllipsisVertical, EllipsisIcon } from \"lucide-react\";\n\nimport { useBreakpoint } from \"hooks\";\nimport { cn } from \"shared\";\n\nimport { RemindersList } from \"./RemindersList\";\n\nimport { ReminderGroupList } from \"./ReminderGroupList\";\n\nexport type TRemindersProps = Record<string, never>;\n\nexport const Reminders: FC<PropsWithChildren<TRemindersProps>> = () => {\n  const { isBelowMd } = useBreakpoint(\"md\");\n\n  return (\n    <div className=\"mx-auto h-full max-w-screen-md p-8\">\n      <div className=\"flex h-full flex-col rounded border-2 border-primary shadow-lg lg:h-3/4\">\n        <nav className=\"flex h-[--navbar-height] border-b-2 border-primary\">\n          <ul className=\"flex flex-1 items-center justify-between px-4\">\n            <li>Reminders</li>\n          </ul>\n        </nav>\n\n        <PanelGroup\n          direction={isBelowMd ? \"vertical\" : \"horizontal\"}\n          className=\"flex-1\"\n          autoSaveId={\"reminders-panel-group\"}\n        >\n          <Panel\n            maxSize={50}\n            className=\"flex flex-col\"\n          >\n            <ReminderGroupList />\n          </Panel>\n\n          <PanelResizeHandle className=\"group\">\n            <div\n              className={cn(\n                \"flex h-full w-8 items-center border-primary bg-secondary\",\n                isBelowMd ? \"h-8 w-full border-b-2\" : \"border-r-2\"\n              )}\n            >\n              <span\n                className={cn(\n                  \"mx-auto rounded group-hover:bg-primary group-hover:text-secondary\",\n                  isBelowMd ? \"px-1\" : \"py-1\"\n                )}\n              >\n                {isBelowMd ? <EllipsisIcon className=\"icon\" /> : <EllipsisVertical className={\"icon\"} />}\n              </span>\n            </div>\n          </PanelResizeHandle>\n\n          <Panel className=\"flex flex-col\">\n            <RemindersList />\n          </Panel>\n        </PanelGroup>\n      </div>\n    </div>\n  );\n};\n"],"names":["DeleteButton","_ref","children","props","_jsxs","Button","size","variant","className","_jsx","Trash","ReminderItem","reminder","concat","id","title","RemindersList","_reminderGroups$find","queryParams","useSelectQueryParams","data","reminders","refetch","useGetRemindersQuery","reminderGroups","useSelectReminderGroups","reminderGroupName","find","reminderGroup","groupId","name","Typography","RefreshCcw","onClick","map","ReminderGroupItem","dispatch","useAppDispatch","useAppSelector","selectQueryParams","isSelected","cn","titleClassName","handleOnClick","useCallback","setQueryParams","undefined","ReminderGroupList","useGetReminderGroupsQuery","Plus","Reminders","isBelowMd","useBreakpoint","PanelGroup","direction","autoSaveId","Panel","maxSize","PanelResizeHandle","EllipsisIcon","EllipsisVertical"],"sourceRoot":""}