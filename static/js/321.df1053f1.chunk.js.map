{"version":3,"file":"static/js/321.df1053f1.chunk.js","mappings":"gLAMO,MAAMA,GAAKC,EAAAA,EAAAA,SAAQ,CACxBC,SAAU,CACRC,IAAIC,EAAAA,EAAAA,YAAWC,EAAAA,IACfC,MAAOA,IACC,YAANC,QAAmBF,EAAAA,EAAAA,IAAK,CAAEG,QAAQ,KAGpCC,SAAUA,KAAM,EAChBC,MAAOA,IAAMC,EAAAA,EAAeC,SAC5BC,OAAOC,EAAAA,EAAAA,OAAM,iBACbC,UAAWA,KAAM,IAAIC,MAAOC,cAC5BC,UAAWA,KAAM,IAAIF,MAAOC,cAC5BE,SAASC,EAAAA,EAAAA,UAASC,SAGpBC,cAAe,CACbnB,IAAIC,EAAAA,EAAAA,YAAWC,EAAAA,IACfkB,KAAMA,IAAA,kBAAAhB,QAAwBF,EAAAA,EAAAA,IAAK,CAAEG,QAAQ,KAC7CO,UAAWA,KAAM,IAAIC,MAAOC,cAC5BC,UAAWA,KAAM,IAAIF,MAAOC,iB,uBCRzB,MAAMO,EAA6CC,IAAa,IAAZ,GAAEzB,GAAIyB,EA4G/D,MAAO,CA3GcC,EAAAA,EAAKC,KAAIC,EAAAA,EAAAA,IAAU,eAAeC,IAAkB,IAAjB,QAAEC,GAASD,EACjE,MAAME,EAAY/B,EAAGE,SAAS8B,SAExBC,GAAeC,EAAAA,EAAAA,IAAmBJ,EAAQK,KAEhD,IAAIC,EAAoBL,EAUxB,OARIE,EAAsB,UACxBG,EAAOA,EAAKC,QAAQnC,IAAQ,IAAAoC,EAAA,OAAa,OAARpC,QAAQ,IAARA,GAAe,QAAPoC,EAARpC,EAAUW,aAAK,IAAAyB,OAAP,EAARA,EAAiBnC,MAAO8B,EAAsB,OAAC,KAG9EA,EAAoB,QACtBG,EAAOA,EAAKC,QAAQnC,GAAaA,EAASQ,QAAUuB,EAAoB,SAGnEM,EAAAA,EAAaC,KAAK,CAAEJ,QAAQ,CAAEK,OAAQ,KAAM,IAG9Bf,EAAAA,EAAKgB,MAC1Bd,EAAAA,EAAAA,IAAU,eACVe,UAAwB,IAAjB,QAAEb,GAASc,EAChB,MAAM,MAAEtC,EAAK,QAAEuC,SAAkBf,EAAQU,OAEnC3B,EAAQb,EAAGsB,cAAcU,SAASc,MAAMjC,GAAUA,EAAMV,KAAO0C,IAErE,GAAIA,IAAYhC,EACd,OAAO0B,EAAAA,EAAaC,KAAK,CAAEO,QAAQ,0BAADxC,OAA4BsC,EAAO,gBAAiB,CAAEJ,OAAQ,MAGlG,MAAMO,EAAchD,EAAGE,SAAS+C,OAAO,CAAE3C,QAAOO,UAEhD,OAAO0B,EAAAA,EAAaC,KAAK,CAAEJ,KAAMY,GAAe,CAAEP,OAAQ,KAAM,IAI7Cf,EAAAA,EAAKwB,QAC1BtB,EAAAA,EAAAA,IAAU,mBACVuB,IAAiB,IAAhB,OAAEC,GAAQD,EAST,OARiBnD,EAAGE,SAASmD,UAAU,CACrCC,MAAO,CACLnD,GAAI,CACFoD,OAAQH,EAAOjD,QASrBH,EAAGE,SAASgD,OAAO,CACjBI,MAAO,CACLnD,GAAI,CACFoD,OAAQH,EAAOjD,OAKdoC,EAAAA,EAAaC,KAAK,CAAEO,QAAQ,oBAADxC,OAAsB6C,EAAOjD,GAAE,cAAe,CAAEsC,OAAQ,OAXjFF,EAAAA,EAAaC,KAAK,CAAEO,QAAQ,oBAADxC,OAAsB6C,EAAOjD,GAAE,gBAAiB,CAAEsC,OAAQ,KAWE,IAI7Ef,EAAAA,EAAK8B,OAI1B5B,EAAAA,EAAAA,IAAU,mBAAmBe,UAAgC,IAAzB,QAAEb,EAAO,OAAEsB,GAAQK,EACvD,MAAM,QAAEZ,KAAYa,SAAsB5B,EAAQU,OAUlD,IARiBxC,EAAGE,SAASmD,UAAU,CACrCC,MAAO,CACLnD,GAAI,CACFoD,OAAQH,EAAOjD,OAMnB,OAAOoC,EAAAA,EAAaC,KAAK,CAAEO,QAAQ,oBAADxC,OAAsB6C,EAAOjD,GAAE,gBAAiB,CAAEsC,OAAQ,MAG9F,MAAM5B,EAAQb,EAAGsB,cAAc+B,UAAU,CACvCC,MAAO,CACLnD,GAAI,CACFoD,OAAQV,MAKd,GAAIA,IAAYhC,EACd,OAAO0B,EAAAA,EAAaC,KAAK,CAAEO,QAAQ,0BAADxC,OAA4BsC,EAAO,gBAAiB,CAAEJ,OAAQ,MAGlG,MAAMkB,EAAkB3D,EAAGE,SAAS0D,OAAO,CACzCN,MAAO,CACLnD,GAAI,CACFoD,OAAQH,EAAOjD,KAGnBiC,KAAM,IACAsB,KAIR,OAAOnB,EAAAA,EAAaC,KAAK,CAAEJ,KAAMuB,GAAmB,CAAElB,OAAQ,KAAM,IAGD,EC1G1DoB,EAAkDpC,IAAa,IAAZ,GAAEzB,GAAIyB,EAoGpE,MAAO,CAnGmBC,EAAAA,EAAKC,KAAIC,EAAAA,EAAAA,IAAU,qBAAqB,IACzDW,EAAAA,EAAaC,KAAK,CAAEJ,KAAMpC,EAAGsB,cAAcU,UAAY,CAAES,OAAQ,QAGjDf,EAAAA,EAAKC,KAI5BC,EAAAA,EAAAA,IAAU,yBAAyBC,IAAiB,IAAhB,OAAEuB,GAAQvB,EAC9C,MAAMP,EAAgBtB,EAAGsB,cAAc+B,UAAU,CAC/CC,MAAO,CACLnD,GAAI,CACFoD,OAAQH,EAAOjD,OAKrB,OAAKmB,EAIEiB,EAAAA,EAAaC,KAAK,CAAEJ,KAAMd,GAAiB,CAAEmB,OAAQ,MAHnDF,EAAAA,EAAaC,KAAK,CAAEO,QAAQ,0BAADxC,OAA4B6C,EAAOjD,GAAE,gBAAiB,CAAEsC,OAAQ,KAGlC,IAGxCf,EAAAA,EAAKgB,MAI/Bd,EAAAA,EAAAA,IAAU,qBAAqBe,UAAwB,IAAjB,QAAEb,GAASc,EACjD,MAAMc,QAAoB5B,EAAQU,OAE5BlB,EAAgBtB,EAAGsB,cAAc2B,OAAO,IACzCS,IAGL,OAAOnB,EAAAA,EAAaC,KAAK,CAAEJ,KAAMd,GAAiB,CAAEmB,OAAQ,KAAM,IAGxCf,EAAAA,EAAKwB,QAI/BtB,EAAAA,EAAAA,IAAU,yBAAyBuB,IAAiB,IAAhB,OAAEC,GAAQD,EAS9C,OARsBnD,EAAGsB,cAAc+B,UAAU,CAC/CC,MAAO,CACLnD,GAAI,CACFoD,OAAQH,EAAOjD,QASrBH,EAAGsB,cAAc4B,OAAO,CACtBI,MAAO,CACLnD,GAAI,CACFoD,OAAQH,EAAOjD,OAKdoC,EAAAA,EAAaC,KAAK,CAAEO,QAAQ,0BAADxC,OAA4B6C,EAAOjD,GAAE,cAAe,CAAEsC,OAAQ,OAXvFF,EAAAA,EAAaC,KAAK,CAAEO,QAAQ,0BAADxC,OAA4B6C,EAAOjD,GAAE,gBAAiB,CAAEsC,OAAQ,KAWE,IAG5Ef,EAAAA,EAAK8B,OAI/B5B,EAAAA,EAAAA,IAAU,yBAAyBe,UAAgC,IAAzB,QAAEb,EAAO,OAAEsB,GAAQK,EAC7D,MAAMC,QAAoB5B,EAAQU,OAUlC,IARsBxC,EAAGsB,cAAc+B,UAAU,CAC/CC,MAAO,CACLnD,GAAI,CACFoD,OAAQH,EAAOjD,OAMnB,OAAOoC,EAAAA,EAAaC,KAAK,CAAEO,QAAQ,0BAADxC,OAA4B6C,EAAOjD,GAAE,gBAAiB,CAAEsC,OAAQ,MAGpG,MAAMkB,EAAkB3D,EAAGsB,cAAcsC,OAAO,CAC9CN,MAAO,CACLnD,GAAI,CACFoD,OAAQH,EAAOjD,KAGnBiC,KAAM,IACDsB,KAIP,OAAOnB,EAAAA,EAAaC,KAAK,CAAEJ,KAAMuB,GAAmB,CAAElB,OAAQ,KAAM,IAGqC,EC7GhGqB,ECR6D,IACrED,EADyBE,EDQQ,CAAE/D,GAAG,OCNtCwB,EAAyBuC,IAFAA,MDUvB,MAWMC,EAAYrB,UACb,OAANoB,QAAM,IAANA,GAAAA,EAAQE,qBACVC,EAAelE,GACZmE,cAAc,GACdC,mBAAmB,CAAEC,eAAgB,CAAC,OAAQ,OAAQ,YAAaC,kBAAmB,SAf/D3B,WAC5B,MAAM4B,GAASC,EAAAA,EAAAA,MAAeV,GAE9B,aAAaS,EAAOE,MAAM,CACxBC,mBAAoB,SACpBC,cAAe,CACbxC,IAAI,GAAD5B,OAVUqE,yCAUK,0BAEpB,EAUWC,IAGFX,EAAkBlE,IAC7B,MAAM8E,EAA6B,CACjCX,cAAe,WAAa,IAAZY,EAACC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GAClB,IAAK,IAAIG,EAAI,EAAGA,EAAIJ,EAAGI,IACrBnF,EAAGE,SAAS+C,SAGd,OAAO6B,CACT,EACAV,mBAAoB3C,IAAgF,IAA/E,eAAE4C,EAAiB,CAAC,OAAQ,OAAQ,YAAW,kBAAEC,EAAoB,IAAI7C,EAS5F,OARA4C,EAAee,SAASC,IACtB,MAAMxE,EAAQb,EAAGsB,cAAc2B,OAAO,CAAE1B,KAAM8D,IAE9C,IAAK,IAAIF,EAAI,EAAGA,EAAIb,EAAmBa,IACrCnF,EAAGE,SAAS+C,OAAO,CAAEpC,SACvB,IAGKiE,CAAO,GAGlB,OAAOA,CAAO,C,kCEtDT,MAAMnE,EAAiB,CAC5BC,SAAU,WACV0E,WAAY,aACZC,UAAW,YACXC,SAAU,W","sources":["services/mocker/msw/db.ts","services/mocker/msw/controllers/reminder.ts","services/mocker/msw/controllers/reminderGroup.ts","services/mocker/msw/server.ts","services/mocker/msw/handlers.ts","types/Reminders.ts"],"sourcesContent":["import { factory, nullable, oneOf, primaryKey, drop } from \"@mswjs/data\";\n\nimport { uuid } from \"shared\";\n\nimport { REMINDER_STATE } from \"types\";\n\nexport const db = factory({\n  reminder: {\n    id: primaryKey(uuid),\n    title: () => {\n      return `Reminder ${uuid({ simple: true })}`;\n    },\n\n    isPinned: () => false,\n    state: () => REMINDER_STATE.INACTIVE,\n    group: oneOf(\"reminderGroup\"),\n    createdAt: () => new Date().toISOString(),\n    updatedAt: () => new Date().toISOString(),\n    dueDate: nullable(String),\n  },\n\n  reminderGroup: {\n    id: primaryKey(uuid),\n    name: () => `Reminder Group ${uuid({ simple: true })}`,\n    createdAt: () => new Date().toISOString(),\n    updatedAt: () => new Date().toISOString(),\n  },\n});\n\nexport type TDb = typeof db;\n\nexport const dropDb = (db: TDb) => {\n  drop(db);\n};\n","import { HttpResponse, http } from \"msw\";\n\nimport {\n  TCreateReminderRequestPayload,\n  TCreateReminderResponsePayload,\n  TDeleteReminderRequestPayload,\n  TDeleteReminderResponsePayload,\n  TReminder,\n  THTTPError,\n  TUpdateReminderRequestPayload,\n  TUpdateReminderResponsePayload,\n} from \"types\";\n\nimport { getUrlSearchParams, urlPrefix } from \"shared\";\n\nimport { TSetupController } from \"./types\";\n\nexport const setupRemindersController: TSetupController = ({ db }) => {\n  const getReminders = http.get(urlPrefix(\"/reminders\"), ({ request }) => {\n    const reminders = db.reminder.getAll();\n\n    const searchParams = getUrlSearchParams(request.url);\n\n    let data: TReminder[] = reminders;\n\n    if (searchParams[\"groupId\"]) {\n      data = data.filter((reminder) => reminder?.group?.id === searchParams[\"groupId\"]);\n    }\n\n    if (searchParams[\"state\"]) {\n      data = data.filter((reminder) => reminder.state === searchParams[\"state\"]);\n    }\n\n    return HttpResponse.json({ data }, { status: 200 });\n  });\n\n  const createReminder = http.post<never, TCreateReminderRequestPayload, TCreateReminderResponsePayload | THTTPError>(\n    urlPrefix(\"/reminders\"),\n    async ({ request }) => {\n      const { title, groupId } = await request.json();\n\n      const group = db.reminderGroup.getAll().find((group) => group.id === groupId);\n\n      if (groupId && !group) {\n        return HttpResponse.json({ message: `Reminder Group with id ${groupId} not found!` }, { status: 404 });\n      }\n\n      const newReminder = db.reminder.create({ title, group });\n\n      return HttpResponse.json({ data: newReminder }, { status: 201 });\n    }\n  );\n\n  const deleteReminder = http.delete<{ id: TDeleteReminderRequestPayload }, never, TDeleteReminderResponsePayload>(\n    urlPrefix(\"/reminders/:id\"),\n    ({ params }) => {\n      const reminder = db.reminder.findFirst({\n        where: {\n          id: {\n            equals: params.id,\n          },\n        },\n      });\n\n      if (!reminder) {\n        return HttpResponse.json({ message: `Reminder with id ${params.id} not found!` }, { status: 404 });\n      }\n\n      db.reminder.delete({\n        where: {\n          id: {\n            equals: params.id,\n          },\n        },\n      });\n\n      return HttpResponse.json({ message: `Reminder with id ${params.id} deleted!` }, { status: 200 });\n    }\n  );\n\n  const updateReminder = http.patch<\n    { id: TUpdateReminderRequestPayload[\"id\"] },\n    TUpdateReminderRequestPayload,\n    TUpdateReminderResponsePayload | THTTPError\n  >(urlPrefix(\"/reminders/:id\"), async ({ request, params }) => {\n    const { groupId, ...requestBody } = await request.json();\n\n    const reminder = db.reminder.findFirst({\n      where: {\n        id: {\n          equals: params.id,\n        },\n      },\n    });\n\n    if (!reminder) {\n      return HttpResponse.json({ message: `Reminder with id ${params.id} not found!` }, { status: 404 });\n    }\n\n    const group = db.reminderGroup.findFirst({\n      where: {\n        id: {\n          equals: groupId,\n        },\n      },\n    });\n\n    if (groupId && !group) {\n      return HttpResponse.json({ message: `Reminder Group with id ${groupId} not found!` }, { status: 404 });\n    }\n\n    const updatedReminder = db.reminder.update({\n      where: {\n        id: {\n          equals: params.id,\n        },\n      },\n      data: {\n        ...(requestBody as any),\n      },\n    }) as TReminder;\n\n    return HttpResponse.json({ data: updatedReminder }, { status: 200 });\n  });\n\n  return [getReminders, createReminder, deleteReminder, updateReminder];\n};\n","import { HttpResponse, http } from \"msw\";\n\nimport {\n  TCreateReminderGroupRequestPayload,\n  TCreateReminderGroupResponsePayload,\n  TDeleteReminderGroupRequestPayload,\n  TDeleteReminderGroupResponsePayload,\n  TUpdateReminderGroupRequestPayload,\n  TUpdateReminderGroupResponsePayload,\n  TGetReminderGroupRequestPayload,\n  TGetReminderGroupResponsePayload,\n  TReminderGroup,\n  THTTPError,\n} from \"types\";\n\nimport { urlPrefix } from \"shared\";\n\nimport { TSetupController } from \"./types\";\n\nexport const setupReminderGroupsController: TSetupController = ({ db }) => {\n  const getReminderGroups = http.get(urlPrefix(\"/reminder-groups\"), () => {\n    return HttpResponse.json({ data: db.reminderGroup.getAll() }, { status: 200 });\n  });\n\n  const getReminderGroup = http.get<\n    { id: TGetReminderGroupRequestPayload },\n    never,\n    TGetReminderGroupResponsePayload | THTTPError\n  >(urlPrefix(\"/reminder-groups/:id\"), ({ params }) => {\n    const reminderGroup = db.reminderGroup.findFirst({\n      where: {\n        id: {\n          equals: params.id,\n        },\n      },\n    });\n\n    if (!reminderGroup) {\n      return HttpResponse.json({ message: `Reminder Group with id ${params.id} not found!` }, { status: 404 });\n    }\n\n    return HttpResponse.json({ data: reminderGroup }, { status: 200 });\n  });\n\n  const createReminderGroup = http.post<\n    never,\n    TCreateReminderGroupRequestPayload,\n    TCreateReminderGroupResponsePayload | THTTPError\n  >(urlPrefix(\"/reminder-groups\"), async ({ request }) => {\n    const requestBody = await request.json();\n\n    const reminderGroup = db.reminderGroup.create({\n      ...requestBody,\n    });\n\n    return HttpResponse.json({ data: reminderGroup }, { status: 201 });\n  });\n\n  const deleteReminderGroup = http.delete<\n    { id: TDeleteReminderGroupRequestPayload },\n    never,\n    TDeleteReminderGroupResponsePayload | THTTPError\n  >(urlPrefix(\"/reminder-groups/:id\"), ({ params }) => {\n    const reminderGroup = db.reminderGroup.findFirst({\n      where: {\n        id: {\n          equals: params.id,\n        },\n      },\n    });\n\n    if (!reminderGroup) {\n      return HttpResponse.json({ message: `Reminder Group with id ${params.id} not found!` }, { status: 404 });\n    }\n\n    db.reminderGroup.delete({\n      where: {\n        id: {\n          equals: params.id,\n        },\n      },\n    });\n\n    return HttpResponse.json({ message: `Reminder Group with id ${params.id} deleted!` }, { status: 200 });\n  });\n\n  const updateReminderGroup = http.patch<\n    { id: TUpdateReminderGroupRequestPayload[\"id\"] },\n    TUpdateReminderGroupRequestPayload,\n    TUpdateReminderGroupResponsePayload | THTTPError\n  >(urlPrefix(\"/reminder-groups/:id\"), async ({ request, params }) => {\n    const requestBody = await request.json();\n\n    const reminderGroup = db.reminderGroup.findFirst({\n      where: {\n        id: {\n          equals: params.id,\n        },\n      },\n    });\n\n    if (!reminderGroup) {\n      return HttpResponse.json({ message: `Reminder Group with id ${params.id} not found!` }, { status: 404 });\n    }\n\n    const updatedReminder = db.reminderGroup.update({\n      where: {\n        id: {\n          equals: params.id,\n        },\n      },\n      data: {\n        ...requestBody,\n      },\n    }) as TReminderGroup;\n\n    return HttpResponse.json({ data: updatedReminder }, { status: 200 });\n  });\n\n  return [getReminderGroups, getReminderGroup, createReminderGroup, deleteReminderGroup, updateReminderGroup];\n};\n","import { setupWorker } from \"msw/browser\";\n\nimport { TScenariosBuilder } from \"../types\";\n\nimport { db, TDb } from \"./db\";\n\nimport { setupHandlers } from \"./handlers\";\n\nconst PUBLIC_URL = process.env.REACT_APP_PUBLIC_URL;\n\nexport const handlers = setupHandlers({ db });\n\nexport const startMswWorker = async () => {\n  const worker = setupWorker(...handlers);\n\n  return await worker.start({\n    onUnhandledRequest: \"bypass\",\n    serviceWorker: {\n      url: `${PUBLIC_URL}mockServiceWorker.js`,\n    },\n  });\n};\n\nexport const runServer = async (config?: { withDefaultScenario?: boolean }) => {\n  if (config?.withDefaultScenario) {\n    buildScenarios(db)\n      .withReminders(5)\n      .withReminderGroups({ reminderGroups: [\"Work\", \"Home\", \"Personal\"], remindersPerGroup: 2 });\n  }\n\n  return await startMswWorker();\n};\n\nexport const buildScenarios = (db: TDb) => {\n  const builder: TScenariosBuilder = {\n    withReminders: (n = 10) => {\n      for (let i = 0; i < n; i++) {\n        db.reminder.create();\n      }\n\n      return builder;\n    },\n    withReminderGroups: ({ reminderGroups = [\"Work\", \"Home\", \"Personal\"], remindersPerGroup = 10 }) => {\n      reminderGroups.forEach((groupName) => {\n        const group = db.reminderGroup.create({ name: groupName });\n\n        for (let i = 0; i < remindersPerGroup; i++) {\n          db.reminder.create({ group });\n        }\n      });\n\n      return builder;\n    },\n  };\n  return builder;\n};\n","import { setupReminderGroupsController, setupRemindersController, TSetupController } from \"./controllers\";\n\nexport const setupHandlers = (config: Parameters<TSetupController>[0]) => [\n  ...setupReminderGroupsController(config),\n  ...setupRemindersController(config),\n];\n","export const REMINDER_STATE = {\n  INACTIVE: \"INACTIVE\",\n  INPROGRESS: \"INPROGRESS\",\n  COMPLETED: \"COMPLETED\",\n  ARCHIVED: \"ARCHIVED\",\n} as const;\n\nexport type TReminderState = (typeof REMINDER_STATE)[keyof typeof REMINDER_STATE];\n\nexport type TReminder = {\n  id: string;\n  title: string;\n  /**\n   * Current state of the reminder.\n   *\n   * @example \"IN_ACTIVE\" | \"IN_PROGRESS\" | \"COMPLETED\"\n   */\n  state: TReminderState;\n  /**\n   * Indicates if the reminder is pinned on top.\n   */\n  isPinned: boolean;\n  /**\n   * Date and time the reminder was created. (ISO 8601 format)\n   */\n  createdAt: string;\n  /**\n   * Date and time the reminder was last updated. (ISO 8601 format)\n   */\n  updatedAt: string;\n  /**\n   * Optional reminder group this reminder belongs to.\n   */\n  group?: TReminderGroup;\n  /**\n   * Optional due date and time for the reminder. (ISO 8601 format)\n   *\n   * @example \"2021-09-30T00:00:00.000Z\"\n   */\n  dueDate?: string | null;\n};\n\nexport type TReminderGroup = {\n  id: string;\n  name: string;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type TMessageResponsePaylaod = {\n  message: string;\n};\n\nexport type TDataResponsePayload<T> = {\n  data: T;\n};\n\n/**\n * Error\n */\nexport type THTTPError = {\n  message: string;\n};\n\n/**\n * Reminder\n */\nexport type TGetRemindersQueryParams = Partial<{\n  groupId: TReminderGroup[\"id\"];\n  state: TReminder[\"state\"];\n}>;\n\nexport type TGetRemindersResponsePayload = TDataResponsePayload<TReminder[]>;\n\nexport type TGetReminderRequestPayload = TReminder[\"id\"];\n\nexport type TGetReminderResponsePayload = TDataResponsePayload<TReminder>;\n\nexport type TCreateReminderRequestPayload = Pick<TReminder, \"title\"> & Partial<{ groupId: TReminderGroup[\"id\"] }>;\n\nexport type TCreateReminderResponsePayload = TDataResponsePayload<TReminder>;\n\nexport type TUpdateReminderRequestPayload = Pick<TReminder, \"id\"> &\n  Partial<Pick<TReminder, \"title\" | \"state\" | \"isPinned\" | \"dueDate\"> & { groupId: TReminderGroup[\"id\"] }>;\n\nexport type TUpdateReminderResponsePayload = TDataResponsePayload<TReminder>;\n\nexport type TDeleteReminderRequestPayload = TReminder[\"id\"];\n\nexport type TDeleteReminderResponsePayload = TMessageResponsePaylaod;\n\n/**\n * Reminder Group\n */\nexport type TGetReminderGroupsResponsePayload = TDataResponsePayload<TReminderGroup[]>;\n\nexport type TGetReminderGroupRequestPayload = TReminderGroup[\"id\"];\n\nexport type TGetReminderGroupResponsePayload = TDataResponsePayload<TReminderGroup>;\n\nexport type TCreateReminderGroupRequestPayload = Pick<TReminderGroup, \"name\">;\n\nexport type TCreateReminderGroupResponsePayload = TDataResponsePayload<TReminderGroup>;\n\nexport type TUpdateReminderGroupRequestPayload = Pick<TReminderGroup, \"id\"> & Partial<Pick<TReminderGroup, \"name\">>;\n\nexport type TUpdateReminderGroupResponsePayload = TDataResponsePayload<TReminderGroup>;\n\nexport type TDeleteReminderGroupRequestPayload = TReminderGroup[\"id\"];\n\nexport type TDeleteReminderGroupResponsePayload = TMessageResponsePaylaod;\n"],"names":["db","factory","reminder","id","primaryKey","uuid","title","concat","simple","isPinned","state","REMINDER_STATE","INACTIVE","group","oneOf","createdAt","Date","toISOString","updatedAt","dueDate","nullable","String","reminderGroup","name","setupRemindersController","_ref","http","get","urlPrefix","_ref2","request","reminders","getAll","searchParams","getUrlSearchParams","url","data","filter","_reminder$group","HttpResponse","json","status","post","async","_ref3","groupId","find","message","newReminder","create","delete","_ref4","params","findFirst","where","equals","patch","_ref5","requestBody","updatedReminder","update","setupReminderGroupsController","handlers","config","runServer","withDefaultScenario","buildScenarios","withReminders","withReminderGroups","reminderGroups","remindersPerGroup","worker","setupWorker","start","onUnhandledRequest","serviceWorker","process","startMswWorker","builder","n","arguments","length","undefined","i","forEach","groupName","INPROGRESS","COMPLETED","ARCHIVED"],"sourceRoot":""}