{"version":3,"file":"static/js/9.c6a5c3d3.chunk.js","mappings":"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","sources":["services/mocker/mirage/factories/reminder.ts","services/mocker/mirage/factories/reminderGroup.ts","services/mocker/mirage/identityManager.ts","services/mocker/mirage/models/reminder.ts","services/mocker/mirage/models/reminderGroup.ts","services/mocker/mirage/routes/index.ts","services/mocker/mirage/routes/reminder.ts","services/mocker/mirage/routes/reminderGroup.ts","services/mocker/mirage/routes/utils.ts","services/mocker/mirage/scenarios/index.ts","services/mocker/mirage/server.ts","types/Reminders.ts"],"sourcesContent":["import { Factory } from \"miragejs\";\n// eslint-disable-next-line import/no-unresolved\nimport { FactoryDefinition } from \"miragejs/-types\";\n\nimport { TReminder, REMINDER_STATE } from \"types\";\n\nimport { TAppModels } from \"../types\";\n\nexport const reminder: FactoryDefinition<TAppModels[\"reminder\"]> = Factory.extend<TReminder>({\n  id(n) {\n    return `reminder-id-${n}`;\n  },\n  title(n) {\n    return `Reminder ${n}`;\n  },\n  isPinned(n) {\n    if (n % 2 === 0) {\n      return true;\n    }\n    return false;\n  },\n  state: REMINDER_STATE.INACTIVE,\n  createdAt() {\n    return new Date().toISOString();\n  },\n  updatedAt() {\n    return new Date().toISOString();\n  },\n  dueDate() {\n    return null;\n  },\n});\n","import { Factory } from \"miragejs\";\n// eslint-disable-next-line import/no-unresolved\nimport { FactoryDefinition } from \"miragejs/-types\";\n\nimport { TReminderGroup } from \"types\";\n\nexport const reminderGroup: FactoryDefinition = Factory.extend<TReminderGroup>({\n  id(n) {\n    return `reminder-group-id-${n}`;\n  },\n  name(n) {\n    return `Reminder Group ${n}`;\n  },\n  createdAt() {\n    return new Date().toISOString();\n  },\n  updatedAt() {\n    return new Date().toISOString();\n  },\n});\n","import { uuid } from \"shared\";\n\nclass IdentityManager {\n  ids: Set<string>;\n\n  constructor() {\n    this.ids = new Set<string>();\n  }\n\n  // Returns a new unused unique identifier.\n  fetch() {\n    let id = uuid();\n    while (this.ids.has(id)) {\n      id = uuid();\n    }\n\n    this.ids.add(id);\n\n    return id;\n  }\n\n  // Registers an identifier as used. Must throw if identifier is already used.\n  set(id: string) {\n    if (this.ids.has(id)) {\n      throw new Error(`ID ${id} has already been used.`);\n    }\n\n    this.ids.add(id);\n  }\n\n  // Resets all used identifiers to unused.\n  reset() {\n    this.ids.clear();\n  }\n}\n\nexport { IdentityManager };\n","// eslint-disable-next-line import/no-unresolved\nimport { BelongsTo, ModelDefinition } from \"miragejs/-types\";\nimport { Model, belongsTo } from \"miragejs\";\n\nimport { TReminder } from \"types\";\n\ntype TModelReminder = {\n  group: BelongsTo<\"reminderGroup\">;\n  getAttributes: () => TReminder;\n};\n\nexport const reminder: ModelDefinition<TModelReminder> = Model.extend({\n  // NOTE: the association's name is group and it is associated with model named reminderGroup.\n  group: belongsTo(\"reminderGroup\"),\n\n  getAttributes() {\n    // NOTE: this.attrs is the object that contains the attributes of the model.\n    // NOTE: this.fks is array of foreign keys of the model.\n    const { groupId, ...reminderAttributes } = (this as any).attrs;\n    // NOTE: populate the group attribute if the reminder is associated with a group.\n    if (groupId) {\n      reminderAttributes.group = (this as any).group.attrs;\n    }\n\n    return reminderAttributes as TReminder;\n  },\n});\n","// eslint-disable-next-line import/no-unresolved\nimport { ModelDefinition } from \"miragejs/-types\";\nimport { Model } from \"miragejs\";\n\nimport { TReminderGroup } from \"types\";\n\nexport const reminderGroup: ModelDefinition<TReminderGroup> = Model.extend({});\n","import { TAppMockServer } from \"../types\";\n\nimport { reminderRoutes } from \"./reminder\";\nimport { reminderGroupRoutes } from \"./reminderGroup\";\n\nexport function createRoutes(this: TAppMockServer) {\n  reminderRoutes.call(this);\n  reminderGroupRoutes.call(this);\n}\n","import { REMINDER_STATE, TReminder } from \"types\";\n\nimport { TAppMockServer } from \"../types\";\n\nimport { urlPrefix, resourceNotFoundResponse } from \"./utils\";\n\nexport function reminderRoutes(this: TAppMockServer) {\n  this.get(urlPrefix(\"/reminders\"), (schema, request) => {\n    let reminders; // Collection<Instantiate<TAppRegistry, \"reminder\">>;\n    const queryParams = request.queryParams;\n    // queryParams = { groupId: \"group-id-1\" }\n\n    if (queryParams) {\n      if (queryParams.groupId) {\n        const reminderGroup = schema.find(\"reminderGroup\", queryParams.groupId as string);\n        if (reminderGroup === null) {\n          return resourceNotFoundResponse(\"Reminder group \" + queryParams.groupId);\n        }\n      }\n      reminders = schema.where(\"reminder\", queryParams);\n    } else {\n      reminders = schema.all(\"reminder\");\n    }\n\n    return {\n      data: reminders.models.map((reminder) => reminder.getAttributes()),\n    };\n  });\n\n  // NOTE: :segmentName to define a dynamic segment in the URL for a route handler\n  this.delete(urlPrefix(\"/reminders/:id\"), (schema, request) => {\n    // NOTE: Access dynamic segments via request.params.segmentName\n    const id = request.params.id;\n\n    const reminder = schema.find(\"reminder\", id);\n\n    reminder?.destroy();\n\n    if (reminder === null) {\n      return resourceNotFoundResponse(\"Reminder \" + id);\n    }\n\n    // NOTE: use Response class to return a custom response\n    return { message: `Reminder with id ${id} deleted!` };\n  });\n\n  this.post(urlPrefix(\"/reminders\"), (schema, request) => {\n    const attrs = JSON.parse(request.requestBody);\n\n    const defaultAttr: Partial<TReminder> = {\n      isPinned: false,\n      state: REMINDER_STATE.INACTIVE,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    };\n\n    const reminder = schema.create(\"reminder\", Object.assign(defaultAttr, attrs));\n\n    return {\n      data: reminder.attrs,\n    };\n  });\n\n  this.patch(urlPrefix(\"/reminders/:id\"), (schema, request) => {\n    const id = request.params.id;\n    const attrs = JSON.parse(request.requestBody);\n\n    const reminder = schema.find(\"reminder\", id);\n\n    if (reminder === null) {\n      return resourceNotFoundResponse(\"Reminder \" + id);\n    }\n\n    reminder.update(attrs);\n\n    return {\n      data: reminder,\n    };\n  });\n}\n","import { TReminderGroup } from \"types\";\n\nimport { TAppMockServer } from \"../types\";\n\nimport { urlPrefix, resourceNotFoundResponse } from \"./utils\";\n\nexport function reminderGroupRoutes(this: TAppMockServer) {\n  this.get(urlPrefix(\"/reminder-groups\"), (schema) => {\n    const reminderGroups = schema.all(\"reminderGroup\").models;\n\n    return {\n      data: reminderGroups,\n    };\n  });\n\n  this.get(urlPrefix(\"/reminder-groups/:id\"), (schema, request) => {\n    const id = request.params.id;\n\n    const reminderGroup = schema.find(\"reminderGroup\", id);\n\n    if (reminderGroup === null) {\n      return resourceNotFoundResponse(\"Reminder group \" + id);\n    }\n\n    return {\n      data: reminderGroup,\n    };\n  });\n\n  this.delete(urlPrefix(\"/reminder-groups/:id\"), (schema, request) => {\n    const id = request.params.id;\n\n    const reminderGroup = schema.find(\"reminderGroup\", id);\n\n    if (reminderGroup === null) {\n      return resourceNotFoundResponse(\"Reminder group \" + id);\n    }\n\n    // @ts-expect-error\n    const reminders = schema.all(\"reminder\").filter((reminder) => reminder.groupId === id);\n\n    reminders?.destroy();\n\n    reminderGroup?.destroy();\n\n    return {\n      message: `Reminder group with id ${id} deleted!`,\n    };\n  });\n\n  this.patch(urlPrefix(\"/reminder-groups/:id\"), (schema, request) => {\n    const id = request.params.id;\n    const attrs = JSON.parse(request.requestBody);\n\n    const reminderGroup = schema.find(\"reminderGroup\", id);\n\n    if (reminderGroup === null) {\n      return resourceNotFoundResponse(\"Reminder group \" + id);\n    }\n\n    reminderGroup.update(attrs);\n\n    return {\n      data: reminderGroup,\n    };\n  });\n\n  this.post(urlPrefix(\"/reminder-groups\"), (schema, request) => {\n    const attrs = JSON.parse(request.requestBody);\n\n    const defaultAttr: Partial<TReminderGroup> = {\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    };\n\n    const reminderGroup = schema.create(\"reminderGroup\", Object.assign(defaultAttr, attrs));\n\n    return {\n      data: reminderGroup,\n    };\n  });\n}\n","import { Response } from \"miragejs\";\n\nconst apiUrl = process.env.REACT_APP_API_URL;\n\nexport const urlPrefix = (path: string) => {\n  if (path[0] !== \"/\") {\n    throw new Error(\"Miragejs handler path should start with a forward slash.\");\n  }\n  const isApiUrlEndsWithSlash = apiUrl[apiUrl.length - 1] === \"/\";\n\n  if (isApiUrlEndsWithSlash) {\n    return `${apiUrl}${path.slice(1)}`;\n  }\n  return `${apiUrl}${path}`;\n};\n\nexport const resourceNotFoundResponse = (resourceName?: string) =>\n  new Response(404, {}, { message: `Resource ${resourceName} not found!` });\n","import { TNonEmptyArray } from \"types\";\n\nimport { TAppMockServer } from \"../types\";\n\nexport function buildScenarios(server: TAppMockServer) {\n  const builder = {\n    // create reminders without any group\n    withReminders: (n: number = 10) => {\n      server.createList(\"reminder\", n);\n      return builder;\n    },\n    // create reminders with groups\n    withReminderGroups: ({\n      reminderGroups = [\"Work\", \"Home\", \"Personal\"],\n      remindersPerGroup = 10,\n    }: {\n      reminderGroups?: TNonEmptyArray<string>;\n      remindersPerGroup?: number;\n    }) => {\n      reminderGroups.forEach((groupName) => {\n        const group = server.create(\"reminderGroup\", { name: groupName });\n        server.createList(\"reminder\", remindersPerGroup, { group });\n      });\n\n      return builder;\n    },\n  };\n  return builder;\n}\n","import { createServer } from \"miragejs\";\n\nimport { createRoutes } from \"./routes\";\nimport * as models from \"./models\";\nimport * as factories from \"./factories\";\nimport { buildScenarios } from \"./scenarios\";\n\nimport { TAppMockServer } from \"./types\";\nimport { IdentityManager } from \"./identityManager\";\n\nexport type TRunMirageServerConfig = {\n  environment?: string;\n  logging?: boolean;\n  timing?: number;\n};\n\nexport function runServer(config: TRunMirageServerConfig = {}): TAppMockServer {\n  return createServer({\n    logging: config.logging || true,\n    environment: config?.environment || \"development\",\n    models,\n    factories,\n    identityManagers: {\n      application: IdentityManager,\n    },\n    // mirage's seeds are loaded on initialization\n    seeds(server) {\n      buildScenarios(server).withReminders(5).withReminderGroups({ remindersPerGroup: 2 });\n    },\n\n    routes() {\n      this.timing = config.timing || 100;\n\n      createRoutes.call(this);\n\n      this.passthrough();\n    },\n  });\n}\n","export const REMINDER_STATE = {\n  INACTIVE: \"INACTIVE\",\n  INPROGRESS: \"INPROGRESS\",\n  COMPLETED: \"COMPLETED\",\n  ARCHIVED: \"ARCHIVED\",\n} as const;\n\nexport type TReminderState = (typeof REMINDER_STATE)[keyof typeof REMINDER_STATE];\n\nexport type TReminder = {\n  id: string;\n  title: string;\n  /**\n   * Current state of the reminder.\n   *\n   * @example \"IN_ACTIVE\" | \"IN_PROGRESS\" | \"COMPLETED\"\n   */\n  state: TReminderState;\n  /**\n   * Indicates if the reminder is pinned on top.\n   */\n  isPinned: boolean;\n  /**\n   * Date and time the reminder was created. (ISO 8601 format)\n   */\n  createdAt: string;\n  /**\n   * Date and time the reminder was last updated. (ISO 8601 format)\n   */\n  updatedAt: string;\n  /**\n   * Optional reminder group this reminder belongs to.\n   */\n  group?: TReminderGroup;\n  /**\n   * Optional due date and time for the reminder. (ISO 8601 format)\n   *\n   * @example \"2021-09-30T00:00:00.000Z\"\n   */\n  dueDate?: string | null;\n};\n\nexport type TReminderGroup = {\n  id: string;\n  name: string;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type TMessageResponsePaylaod = {\n  message: string;\n};\n\nexport type TDataResponsePayload<T> = {\n  data: T;\n};\n\n/**\n * Error\n */\nexport type THTTPError = {\n  message: string;\n};\n\n/**\n * Reminder\n */\nexport type TGetRemindersQueryParams = Partial<{\n  groupId: TReminderGroup[\"id\"];\n  state: TReminder[\"state\"];\n}>;\n\nexport type TGetRemindersResponsePayload = TDataResponsePayload<TReminder[]>;\n\nexport type TGetReminderRequestPayload = TReminder[\"id\"];\n\nexport type TGetReminderResponsePayload = TDataResponsePayload<TReminder>;\n\nexport type TCreateReminderRequestPayload = Pick<TReminder, \"title\"> & Partial<{ groupId: TReminderGroup[\"id\"] }>;\n\nexport type TCreateReminderResponsePayload = TDataResponsePayload<TReminder>;\n\nexport type TUpdateReminderRequestPayload = Pick<TReminder, \"id\"> &\n  Partial<Pick<TReminder, \"title\" | \"state\" | \"isPinned\" | \"dueDate\"> & { groupId: TReminderGroup[\"id\"] }>;\n\nexport type TUpdateReminderResponsePayload = TDataResponsePayload<TReminder>;\n\nexport type TDeleteReminderRequestPayload = TReminder[\"id\"];\n\nexport type TDeleteReminderResponsePayload = TMessageResponsePaylaod;\n\n/**\n * Reminder Group\n */\nexport type TGetReminderGroupsResponsePayload = TDataResponsePayload<TReminderGroup[]>;\n\nexport type TGetReminderGroupRequestPayload = TReminderGroup[\"id\"];\n\nexport type TGetReminderGroupResponsePayload = TDataResponsePayload<TReminderGroup>;\n\nexport type TCreateReminderGroupRequestPayload = Pick<TReminderGroup, \"name\">;\n\nexport type TCreateReminderGroupResponsePayload = TDataResponsePayload<TReminderGroup>;\n\nexport type TUpdateReminderGroupRequestPayload = Pick<TReminderGroup, \"id\"> & Partial<Pick<TReminderGroup, \"name\">>;\n\nexport type TUpdateReminderGroupResponsePayload = TDataResponsePayload<TReminderGroup>;\n\nexport type TDeleteReminderGroupRequestPayload = TReminderGroup[\"id\"];\n\nexport type TDeleteReminderGroupResponsePayload = TMessageResponsePaylaod;\n"],"names":["reminder","Factory","extend","id","n","concat","title","isPinned","state","REMINDER_STATE","INACTIVE","createdAt","Date","toISOString","updatedAt","dueDate","reminderGroup","name","IdentityManager","constructor","ids","this","Set","fetch","uuid","has","add","set","Error","reset","clear","Model","group","belongsTo","getAttributes","groupId","reminderAttributes","attrs","createRoutes","reminderRoutes","call","reminderGroupRoutes","get","urlPrefix","schema","request","reminders","queryParams","find","resourceNotFoundResponse","where","all","data","models","map","delete","params","destroy","message","post","JSON","parse","requestBody","defaultAttr","create","Object","assign","patch","update","filter","apiUrl","process","path","slice","resourceName","Response","buildScenarios","server","builder","withReminders","arguments","length","undefined","createList","withReminderGroups","_ref","reminderGroups","remindersPerGroup","forEach","groupName","runServer","config","createServer","logging","environment","factories","identityManagers","application","seeds","routes","timing","passthrough","INPROGRESS","COMPLETED","ARCHIVED"],"sourceRoot":""}