{"version":3,"file":"static/js/168.b3d6690a.chunk.js","mappings":"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","sources":["services/mocker/mirage/routes/index.ts","services/mocker/mirage/routes/reminder.ts","services/mocker/mirage/routes/reminderGroup.ts","services/mocker/mirage/routes/utils.ts","types/Reminders.ts"],"sourcesContent":["import { TAppMockServer } from \"../types\";\n\nimport { reminderRoutes } from \"./reminder\";\nimport { reminderGroupRoutes } from \"./reminderGroup\";\n\nexport function createRoutes(this: TAppMockServer) {\n  reminderRoutes.call(this);\n  reminderGroupRoutes.call(this);\n}\n","import { REMINDER_STATE, TReminder } from \"types\";\n\nimport { TAppMockServer } from \"../types\";\n\nimport { urlPrefix, resourceNotFoundResponse } from \"./utils\";\n\nexport function reminderRoutes(this: TAppMockServer) {\n  this.get(urlPrefix(\"/reminders\"), (schema, request) => {\n    let reminders; // Collection<Instantiate<TAppRegistry, \"reminder\">>;\n    const queryParams = request.queryParams;\n    // queryParams = { groupId: \"group-id-1\" }\n\n    if (queryParams) {\n      if (queryParams.groupId) {\n        const reminderGroup = schema.find(\"reminderGroup\", queryParams.groupId as string);\n        if (reminderGroup === null) {\n          return resourceNotFoundResponse(\"Reminder group \" + queryParams.groupId);\n        }\n      }\n      reminders = schema.where(\"reminder\", queryParams);\n    } else {\n      reminders = schema.all(\"reminder\");\n    }\n\n    return {\n      data: reminders.models.map((reminder) => reminder.getAttributes()),\n    };\n  });\n\n  // NOTE: :segmentName to define a dynamic segment in the URL for a route handler\n  this.delete(urlPrefix(\"/reminders/:id\"), (schema, request) => {\n    // NOTE: Access dynamic segments via request.params.segmentName\n    const id = request.params.id;\n\n    const reminder = schema.find(\"reminder\", id);\n\n    reminder?.destroy();\n\n    if (reminder === null) {\n      return resourceNotFoundResponse(\"Reminder \" + id);\n    }\n\n    // NOTE: use Response class to return a custom response\n    return { message: `Reminder with id ${id} deleted!` };\n  });\n\n  this.post(urlPrefix(\"/reminders\"), (schema, request) => {\n    const attrs = JSON.parse(request.requestBody);\n\n    const defaultAttr: Partial<TReminder> = {\n      isPinned: false,\n      state: REMINDER_STATE.ACTIVE,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    };\n\n    const reminder = schema.create(\"reminder\", Object.assign(defaultAttr, attrs));\n\n    return {\n      data: reminder.attrs,\n    };\n  });\n\n  this.patch(urlPrefix(\"/reminders/:id\"), (schema, request) => {\n    const id = request.params.id;\n    const attrs = JSON.parse(request.requestBody);\n\n    const reminder = schema.find(\"reminder\", id);\n\n    if (reminder === null) {\n      return resourceNotFoundResponse(\"Reminder \" + id);\n    }\n\n    reminder.update(attrs);\n\n    return {\n      data: reminder,\n    };\n  });\n}\n","import { TReminderGroup } from \"types\";\n\nimport { TAppMockServer } from \"../types\";\n\nimport { urlPrefix, resourceNotFoundResponse } from \"./utils\";\n\nexport function reminderGroupRoutes(this: TAppMockServer) {\n  this.get(urlPrefix(\"/reminder-groups\"), (schema) => {\n    const reminderGroups = schema.all(\"reminderGroup\").models;\n\n    return {\n      data: reminderGroups,\n    };\n  });\n\n  this.get(urlPrefix(\"/reminder-groups/:id\"), (schema, request) => {\n    const id = request.params.id;\n\n    const reminderGroup = schema.find(\"reminderGroup\", id);\n\n    if (reminderGroup === null) {\n      return resourceNotFoundResponse(\"Reminder group \" + id);\n    }\n\n    return {\n      data: reminderGroup,\n    };\n  });\n\n  this.delete(urlPrefix(\"/reminder-groups/:id\"), (schema, request) => {\n    const id = request.params.id;\n\n    const reminderGroup = schema.find(\"reminderGroup\", id);\n\n    if (reminderGroup === null) {\n      return resourceNotFoundResponse(\"Reminder group \" + id);\n    }\n\n    // @ts-expect-error\n    const reminders = schema.all(\"reminder\").filter((reminder) => reminder.groupId === id);\n\n    reminders?.destroy();\n\n    reminderGroup?.destroy();\n\n    return {\n      message: `Reminder group with id ${id} deleted!`,\n    };\n  });\n\n  this.patch(urlPrefix(\"/reminder-groups/:id\"), (schema, request) => {\n    const id = request.params.id;\n    const attrs = JSON.parse(request.requestBody);\n\n    const reminderGroup = schema.find(\"reminderGroup\", id);\n\n    if (reminderGroup === null) {\n      return resourceNotFoundResponse(\"Reminder group \" + id);\n    }\n\n    reminderGroup.update(attrs);\n\n    return {\n      data: reminderGroup,\n    };\n  });\n\n  this.post(urlPrefix(\"/reminder-groups\"), (schema, request) => {\n    const attrs = JSON.parse(request.requestBody);\n\n    const defaultAttr: Partial<TReminderGroup> = {\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    };\n\n    const reminderGroup = schema.create(\"reminderGroup\", Object.assign(defaultAttr, attrs));\n\n    return {\n      data: reminderGroup,\n    };\n  });\n}\n","import { Response } from \"miragejs\";\n\nconst apiUrl = process.env.REACT_APP_API_URL;\n\nexport const urlPrefix = (path: string) => {\n  if (path[0] !== \"/\") {\n    throw new Error(\"Miragejs handler path should start with a forward slash.\");\n  }\n  const isApiUrlEndsWithSlash = apiUrl[apiUrl.length - 1] === \"/\";\n\n  if (isApiUrlEndsWithSlash) {\n    return `${apiUrl}${path.slice(1)}`;\n  }\n  return `${apiUrl}${path}`;\n};\n\nexport const resourceNotFoundResponse = (resourceName?: string) =>\n  new Response(404, {}, { message: `Resource ${resourceName} not found!` });\n","export const REMINDER_STATE = {\n  ACTIVE: \"ACTIVE\",\n  COMPLETED: \"COMPLETED\",\n} as const;\n\nexport type TReminderState = (typeof REMINDER_STATE)[keyof typeof REMINDER_STATE];\n\nexport type TReminder = {\n  id: string;\n  title: string;\n  state: TReminderState;\n  isPinned: boolean;\n  createdAt: string;\n  updatedAt: string;\n  group?: TReminderGroup;\n};\n\nexport type TReminderGroup = {\n  id: string;\n  name: string;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type TMessageResponsePaylaod = {\n  message: string;\n};\n\nexport type TDataResponsePayload<T> = {\n  data: T;\n};\n\n/**\n * Error\n */\nexport type THTTPError = {\n  message: string;\n};\n\n/**\n * Reminder\n */\nexport type TGetRemindersQueryParams = Partial<{\n  groupId: TReminderGroup[\"id\"];\n  state: TReminder[\"state\"];\n}>;\n\nexport type TGetRemindersResponsePayload = TDataResponsePayload<TReminder[]>;\n\nexport type TGetReminderRequestPayload = TReminder[\"id\"];\n\nexport type TGetReminderResponsePayload = TDataResponsePayload<TReminder>;\n\nexport type TCreateReminderRequestPayload = Pick<TReminder, \"title\"> & Partial<{ groupId: TReminderGroup[\"id\"] }>;\n\nexport type TCreateReminderResponsePayload = TDataResponsePayload<TReminder>;\n\nexport type TUpdateReminderRequestPayload = Pick<TReminder, \"id\"> &\n  Partial<Pick<TReminder, \"title\" | \"state\" | \"isPinned\"> & { groupId: TReminderGroup[\"id\"] }>;\n\nexport type TUpdateReminderResponsePayload = TDataResponsePayload<TReminder>;\n\nexport type TDeleteReminderRequestPayload = TReminder[\"id\"];\n\nexport type TDeleteReminderResponsePayload = TMessageResponsePaylaod;\n\n/**\n * Reminder Group\n */\nexport type TGetReminderGroupsResponsePayload = TDataResponsePayload<TReminderGroup[]>;\n\nexport type TGetReminderGroupRequestPayload = TReminderGroup[\"id\"];\n\nexport type TGetReminderGroupResponsePayload = TDataResponsePayload<TReminderGroup>;\n\nexport type TCreateReminderGroupRequestPayload = Pick<TReminderGroup, \"name\">;\n\nexport type TCreateReminderGroupResponsePayload = TDataResponsePayload<TReminderGroup>;\n\nexport type TUpdateReminderGroupRequestPayload = Pick<TReminderGroup, \"id\"> & Partial<Pick<TReminderGroup, \"name\">>;\n\nexport type TUpdateReminderGroupResponsePayload = TDataResponsePayload<TReminderGroup>;\n\nexport type TDeleteReminderGroupRequestPayload = TReminderGroup[\"id\"];\n\nexport type TDeleteReminderGroupResponsePayload = TMessageResponsePaylaod;\n"],"names":["createRoutes","reminderRoutes","call","this","reminderGroupRoutes","get","urlPrefix","schema","request","reminders","queryParams","groupId","find","resourceNotFoundResponse","where","all","data","models","map","reminder","getAttributes","delete","id","params","destroy","message","concat","post","attrs","JSON","parse","requestBody","defaultAttr","isPinned","state","REMINDER_STATE","ACTIVE","createdAt","Date","toISOString","updatedAt","create","Object","assign","patch","update","reminderGroup","filter","apiUrl","process","path","Error","slice","resourceName","Response","COMPLETED"],"sourceRoot":""}