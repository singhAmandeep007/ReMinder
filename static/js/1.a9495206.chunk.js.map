{"version":3,"file":"static/js/1.a9495206.chunk.js","mappings":"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","sources":["services/mocker/msw/controllers/db.ts","services/mocker/msw/controllers/reminder.ts","services/mocker/msw/controllers/reminderGroup.ts","services/mocker/msw/controllers/utils.ts","types/Reminders.ts"],"sourcesContent":["import { factory, oneOf, primaryKey } from \"@mswjs/data\";\n\nimport { uuid } from \"shared\";\n\nimport { REMINDER_STATE } from \"types\";\n\nexport const db = factory({\n  reminder: {\n    id: primaryKey(uuid),\n    title: () => {\n      return `Reminder ${uuid({ simple: true })}`;\n    },\n\n    isPinned: () => false,\n    state: () => REMINDER_STATE.ACTIVE,\n    group: oneOf(\"reminderGroup\"),\n    createdAt: () => new Date().toISOString(),\n    updatedAt: () => new Date().toISOString(),\n  },\n\n  reminderGroup: {\n    id: primaryKey(uuid),\n    name: () => `Reminder Group ${uuid({ simple: true })}`,\n    createdAt: () => new Date().toISOString(),\n    updatedAt: () => new Date().toISOString(),\n  },\n});\n\nexport type TDb = typeof db;\n\nexport const buildScenarios = (db: TDb) => {\n  const builder = {\n    withReminders: (n: number = 10) => {\n      for (let i = 0; i < n; i++) {\n        db.reminder.create();\n      }\n\n      return builder;\n    },\n    withReminderGroups: ({\n      reminderGroups = [\"Work\", \"Home\", \"Personal\"],\n      remindersPerGroup = 10,\n    }: {\n      reminderGroups?: string[];\n      remindersPerGroup?: number;\n    }) => {\n      reminderGroups.forEach((groupName) => {\n        const group = db.reminderGroup.create({ name: groupName });\n\n        for (let i = 0; i < remindersPerGroup; i++) {\n          db.reminder.create({ group });\n        }\n      });\n\n      return builder;\n    },\n  };\n  return builder;\n};\n","import { HttpResponse, http } from \"msw\";\n\nimport {\n  TCreateReminderRequestPayload,\n  TCreateReminderResponsePayload,\n  TDeleteReminderRequestPayload,\n  TDeleteReminderResponsePayload,\n  TReminder,\n  THTTPError,\n  TUpdateReminderRequestPayload,\n  TUpdateReminderResponsePayload,\n} from \"types\";\n\nimport { getUrlSearchParams } from \"shared\";\n\nimport { urlPrefix } from \"./utils\";\n\nimport { db } from \"./db\";\n\nexport const getReminders = http.get(urlPrefix(\"/reminders\"), ({ request }) => {\n  const reminders = db.reminder.getAll();\n\n  const searchParams = getUrlSearchParams(request.url);\n\n  // REFACTOR: structuredClone not required\n  let data = structuredClone(reminders) as TReminder[];\n\n  if (searchParams[\"groupId\"]) {\n    data = data.filter((reminder) => reminder?.group?.id === searchParams[\"groupId\"]);\n  }\n\n  if (searchParams[\"state\"]) {\n    data = data.filter((reminder) => reminder.state === searchParams[\"state\"]);\n  }\n\n  return HttpResponse.json({ data }, { status: 200 });\n});\n\nexport const createReminder = http.post<\n  never,\n  TCreateReminderRequestPayload,\n  TCreateReminderResponsePayload | THTTPError\n>(urlPrefix(\"/reminders\"), async ({ request }) => {\n  const { title, groupId } = await request.json();\n\n  const group = db.reminderGroup.getAll().find((group) => group.id === groupId);\n\n  if (groupId && !group) {\n    return HttpResponse.json({ message: `Reminder Group with id ${groupId} not found!` }, { status: 404 });\n  }\n\n  const newReminder = db.reminder.create({ title, group });\n\n  return HttpResponse.json({ data: newReminder }, { status: 201 });\n});\n\nexport const deleteReminder = http.delete<{ id: TDeleteReminderRequestPayload }, never, TDeleteReminderResponsePayload>(\n  urlPrefix(\"/reminders/:id\"),\n  ({ params }) => {\n    const reminder = db.reminder.findFirst({\n      where: {\n        id: {\n          equals: params.id,\n        },\n      },\n    });\n\n    if (!reminder) {\n      return HttpResponse.json({ message: `Reminder with id ${params.id} not found!` }, { status: 404 });\n    }\n\n    db.reminder.delete({\n      where: {\n        id: {\n          equals: params.id,\n        },\n      },\n    });\n\n    return HttpResponse.json({ message: `Reminder with id ${params.id} deleted!` }, { status: 200 });\n  }\n);\n\nexport const updateReminder = http.patch<\n  { id: TUpdateReminderRequestPayload[\"id\"] },\n  TUpdateReminderRequestPayload,\n  TUpdateReminderResponsePayload | THTTPError\n>(urlPrefix(\"/reminders/:id\"), async ({ request, params }) => {\n  const { groupId, ...requestBody } = await request.json();\n\n  const reminder = db.reminder.findFirst({\n    where: {\n      id: {\n        equals: params.id,\n      },\n    },\n  });\n\n  if (!reminder) {\n    return HttpResponse.json({ message: `Reminder with id ${params.id} not found!` }, { status: 404 });\n  }\n\n  const group = db.reminderGroup.findFirst({\n    where: {\n      id: {\n        equals: groupId,\n      },\n    },\n  });\n\n  if (groupId && !group) {\n    return HttpResponse.json({ message: `Reminder Group with id ${groupId} not found!` }, { status: 404 });\n  }\n\n  const updatedReminder = db.reminder.update({\n    where: {\n      id: {\n        equals: params.id,\n      },\n    },\n    data: {\n      ...(requestBody as any),\n    },\n  }) as TReminder;\n\n  return HttpResponse.json({ data: updatedReminder }, { status: 200 });\n});\n","import { HttpResponse, http } from \"msw\";\n\nimport {\n  TCreateReminderGroupRequestPayload,\n  TCreateReminderGroupResponsePayload,\n  TDeleteReminderGroupRequestPayload,\n  TDeleteReminderGroupResponsePayload,\n  TUpdateReminderGroupRequestPayload,\n  TUpdateReminderGroupResponsePayload,\n  TGetReminderGroupRequestPayload,\n  TGetReminderGroupResponsePayload,\n  TReminderGroup,\n  THTTPError,\n} from \"types\";\n\nimport { urlPrefix } from \"./utils\";\n\nimport { db } from \"./db\";\n\nexport const getReminderGroups = http.get(urlPrefix(\"/reminder-groups\"), () => {\n  return HttpResponse.json({ data: db.reminderGroup.getAll() }, { status: 200 });\n});\n\nexport const getReminderGroup = http.get<\n  { id: TGetReminderGroupRequestPayload },\n  never,\n  TGetReminderGroupResponsePayload | THTTPError\n>(urlPrefix(\"/reminder-groups/:id\"), ({ params }) => {\n  const reminderGroup = db.reminderGroup.findFirst({\n    where: {\n      id: {\n        equals: params.id,\n      },\n    },\n  });\n\n  if (!reminderGroup) {\n    return HttpResponse.json({ message: `Reminder Group with id ${params.id} not found!` }, { status: 404 });\n  }\n\n  return HttpResponse.json({ data: reminderGroup }, { status: 200 });\n});\n\nexport const createReminderGroup = http.post<\n  never,\n  TCreateReminderGroupRequestPayload,\n  TCreateReminderGroupResponsePayload | THTTPError\n>(urlPrefix(\"/reminder-groups\"), async ({ request }) => {\n  const requestBody = await request.json();\n\n  const reminderGroup = db.reminderGroup.create({\n    ...requestBody,\n  });\n\n  return HttpResponse.json({ data: reminderGroup }, { status: 201 });\n});\n\nexport const deleteReminderGroup = http.delete<\n  { id: TDeleteReminderGroupRequestPayload },\n  never,\n  TDeleteReminderGroupResponsePayload | THTTPError\n>(urlPrefix(\"/reminder-groups/:id\"), ({ params }) => {\n  const reminderGroup = db.reminderGroup.findFirst({\n    where: {\n      id: {\n        equals: params.id,\n      },\n    },\n  });\n\n  if (!reminderGroup) {\n    return HttpResponse.json({ message: `Reminder Group with id ${params.id} not found!` }, { status: 404 });\n  }\n\n  db.reminderGroup.delete({\n    where: {\n      id: {\n        equals: params.id,\n      },\n    },\n  });\n\n  return HttpResponse.json({ message: `Reminder Group with id ${params.id} deleted!` }, { status: 200 });\n});\n\nexport const updateReminderGroup = http.patch<\n  { id: TUpdateReminderGroupRequestPayload[\"id\"] },\n  TUpdateReminderGroupRequestPayload,\n  TUpdateReminderGroupResponsePayload | THTTPError\n>(urlPrefix(\"/reminder-groups/:id\"), async ({ request, params }) => {\n  const requestBody = await request.json();\n\n  const reminderGroup = db.reminderGroup.findFirst({\n    where: {\n      id: {\n        equals: params.id,\n      },\n    },\n  });\n\n  if (!reminderGroup) {\n    return HttpResponse.json({ message: `Reminder Group with id ${params.id} not found!` }, { status: 404 });\n  }\n\n  const updatedReminder = db.reminderGroup.update({\n    where: {\n      id: {\n        equals: params.id,\n      },\n    },\n    data: {\n      ...requestBody,\n    },\n  }) as TReminderGroup;\n\n  return HttpResponse.json({ data: updatedReminder }, { status: 200 });\n});\n","const apiUrl = process.env.REACT_APP_API_URL;\n\nexport const urlPrefix = (path: string) => {\n  if (path[0] !== \"/\") {\n    throw new Error(\"MSW handler path should start with a forward slash.\");\n  }\n  const isApiUrlEndsWithSlash = apiUrl[apiUrl.length - 1] === \"/\";\n\n  if (isApiUrlEndsWithSlash) {\n    return `${apiUrl}${path.slice(1)}`;\n  }\n  return `${apiUrl}${path}`;\n};\n","export const REMINDER_STATE = {\n  ACTIVE: \"ACTIVE\",\n  COMPLETED: \"COMPLETED\",\n} as const;\n\nexport type TReminderState = (typeof REMINDER_STATE)[keyof typeof REMINDER_STATE];\n\nexport type TReminder = {\n  id: string;\n  title: string;\n  state: TReminderState;\n  isPinned: boolean;\n  createdAt: string;\n  updatedAt: string;\n  group?: TReminderGroup;\n};\n\nexport type TReminderGroup = {\n  id: string;\n  name: string;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type TMessageResponsePaylaod = {\n  message: string;\n};\n\nexport type TDataResponsePayload<T> = {\n  data: T;\n};\n\n/**\n * Error\n */\nexport type THTTPError = {\n  message: string;\n};\n\n/**\n * Reminder\n */\nexport type TGetRemindersQueryParams = Partial<{\n  groupId: TReminderGroup[\"id\"];\n  state: TReminder[\"state\"];\n}>;\n\nexport type TGetRemindersResponsePayload = TDataResponsePayload<TReminder[]>;\n\nexport type TGetReminderRequestPayload = TReminder[\"id\"];\n\nexport type TGetReminderResponsePayload = TDataResponsePayload<TReminder>;\n\nexport type TCreateReminderRequestPayload = Pick<TReminder, \"title\"> & Partial<{ groupId: TReminderGroup[\"id\"] }>;\n\nexport type TCreateReminderResponsePayload = TDataResponsePayload<TReminder>;\n\nexport type TUpdateReminderRequestPayload = Pick<TReminder, \"id\"> &\n  Partial<Pick<TReminder, \"title\" | \"state\" | \"isPinned\"> & { groupId: TReminderGroup[\"id\"] }>;\n\nexport type TUpdateReminderResponsePayload = TDataResponsePayload<TReminder>;\n\nexport type TDeleteReminderRequestPayload = TReminder[\"id\"];\n\nexport type TDeleteReminderResponsePayload = TMessageResponsePaylaod;\n\n/**\n * Reminder Group\n */\nexport type TGetReminderGroupsResponsePayload = TDataResponsePayload<TReminderGroup[]>;\n\nexport type TGetReminderGroupRequestPayload = TReminderGroup[\"id\"];\n\nexport type TGetReminderGroupResponsePayload = TDataResponsePayload<TReminderGroup>;\n\nexport type TCreateReminderGroupRequestPayload = Pick<TReminderGroup, \"name\">;\n\nexport type TCreateReminderGroupResponsePayload = TDataResponsePayload<TReminderGroup>;\n\nexport type TUpdateReminderGroupRequestPayload = Pick<TReminderGroup, \"id\"> & Partial<Pick<TReminderGroup, \"name\">>;\n\nexport type TUpdateReminderGroupResponsePayload = TDataResponsePayload<TReminderGroup>;\n\nexport type TDeleteReminderGroupRequestPayload = TReminderGroup[\"id\"];\n\nexport type TDeleteReminderGroupResponsePayload = TMessageResponsePaylaod;\n"],"names":["db","factory","reminder","id","primaryKey","uuid","title","concat","simple","isPinned","state","REMINDER_STATE","ACTIVE","group","oneOf","createdAt","Date","toISOString","updatedAt","reminderGroup","name","buildScenarios","builder","withReminders","n","arguments","length","undefined","i","create","withReminderGroups","_ref","reminderGroups","remindersPerGroup","forEach","groupName","getReminders","http","get","urlPrefix","request","reminders","getAll","searchParams","getUrlSearchParams","url","data","structuredClone","filter","_reminder$group","HttpResponse","json","status","createReminder","post","async","_ref2","groupId","find","message","newReminder","deleteReminder","delete","_ref3","params","findFirst","where","equals","updateReminder","patch","_ref4","requestBody","updatedReminder","update","getReminderGroups","getReminderGroup","createReminderGroup","deleteReminderGroup","updateReminderGroup","apiUrl","process","path","Error","slice","COMPLETED"],"sourceRoot":""}