{"version":3,"file":"static/js/976.506f9ad0.chunk.js","mappings":"0JAIO,SAASA,IACdC,KAAKC,KAAIC,EAAAA,EAAAA,WAAU,eAAe,CAACC,EAAQC,KACzC,IAAIC,EACJ,MAAMC,EAAcF,EAAQE,YAG5B,GAAIA,EAAa,CACf,GAAIA,EAAYC,QAAS,CAEvB,GAAsB,OADAJ,EAAOK,KAAK,gBAAiBF,EAAYC,SAE7D,OAAOE,EAAAA,EAAAA,0BAAyB,kBAAoBH,EAAYC,QAEpE,CACAF,EAAYF,EAAOO,MAAM,WAAYJ,EACvC,MACED,EAAYF,EAAOQ,IAAI,YAGzB,MAAO,CACLC,KAAMP,EAAUQ,OAAOC,KAAKC,GAAaA,EAASC,kBACnD,IAIHhB,KAAKiB,QAAOf,EAAAA,EAAAA,WAAU,mBAAmB,CAACC,EAAQC,KAEhD,MAAMc,EAAKd,EAAQe,OAAOD,GAEpBH,EAAWZ,EAAOK,KAAK,WAAYU,GAIzC,OAFQ,OAARH,QAAQ,IAARA,GAAAA,EAAUK,UAEO,OAAbL,GACKN,EAAAA,EAAAA,0BAAyB,YAAcS,GAIzC,CAAEG,QAAQ,oBAADC,OAAsBJ,EAAE,aAAa,IAGvDlB,KAAKuB,MAAKrB,EAAAA,EAAAA,WAAU,eAAe,CAACC,EAAQC,KAC1C,MAAMoB,EAAQC,KAAKC,MAAMtB,EAAQuB,aAIjC,MAAO,CACLf,KAHeT,EAAOyB,OAAO,WAAYJ,GAG1BA,MAChB,GAEL,C,8FCnDA,MAAMK,EAASC,+BAEF5B,EAAa6B,IACxB,GAAgB,MAAZA,EAAK,GACP,MAAM,IAAIC,MAAM,4DAIlB,MAF4D,MAA9BH,EAAOA,IAG7B,GAANP,OAAUO,GAAMP,OAAGS,EAAKE,MAAM,IAE1B,GAANX,OAAUO,GAAMP,OAAGS,EAAI,EAGZtB,EAA4ByB,GACvC,IAAIC,EAAAA,GAAS,IAAK,CAAC,EAAG,CAAEd,QAAQ,YAADC,OAAcY,EAAY,gB","sources":["services/mocker/mirage/routes/reminder.ts","services/mocker/mirage/routes/utils.ts"],"sourcesContent":["import { TAppMockServer } from \"../types\";\n\nimport { urlPrefix, resourceNotFoundResponse } from \"./utils\";\n\nexport function reminderRoutes(this: TAppMockServer) {\n  this.get(urlPrefix(\"/reminders\"), (schema, request) => {\n    let reminders; // Collection<Instantiate<TAppRegistry, \"reminder\">>;\n    const queryParams = request.queryParams;\n    // queryParams = { groupId: \"group-id-1\" }\n\n    if (queryParams) {\n      if (queryParams.groupId) {\n        const reminderGroup = schema.find(\"reminderGroup\", queryParams.groupId as string);\n        if (reminderGroup === null) {\n          return resourceNotFoundResponse(\"Reminder group \" + queryParams.groupId);\n        }\n      }\n      reminders = schema.where(\"reminder\", queryParams);\n    } else {\n      reminders = schema.all(\"reminder\");\n    }\n\n    return {\n      data: reminders.models.map((reminder) => reminder.getAttributes()),\n    };\n  });\n\n  // NOTE: :segmentName to define a dynamic segment in the URL for a route handler\n  this.delete(urlPrefix(\"/reminders/:id\"), (schema, request) => {\n    // NOTE: Access dynamic segments via request.params.segmentName\n    const id = request.params.id;\n\n    const reminder = schema.find(\"reminder\", id);\n\n    reminder?.destroy();\n\n    if (reminder === null) {\n      return resourceNotFoundResponse(\"Reminder \" + id);\n    }\n\n    // NOTE: use Response class to return a custom response\n    return { message: `Reminder with id ${id} deleted!` };\n  });\n\n  this.post(urlPrefix(\"/reminders\"), (schema, request) => {\n    const attrs = JSON.parse(request.requestBody);\n\n    const reminder = schema.create(\"reminder\", attrs);\n\n    return {\n      data: reminder.attrs,\n    };\n  });\n}\n","import { Response } from \"miragejs\";\n\nconst apiUrl = process.env.REACT_APP_API_URL;\n\nexport const urlPrefix = (path: string) => {\n  if (path[0] !== \"/\") {\n    throw new Error(\"Miragejs handler path should start with a forward slash.\");\n  }\n  const isApiUrlEndsWithSlash = apiUrl[apiUrl.length - 1] === \"/\";\n\n  if (isApiUrlEndsWithSlash) {\n    return `${apiUrl}${path.slice(1)}`;\n  }\n  return `${apiUrl}${path}`;\n};\n\nexport const resourceNotFoundResponse = (resourceName?: string) =>\n  new Response(404, {}, { message: `Resource ${resourceName} not found!` });\n"],"names":["reminderRoutes","this","get","urlPrefix","schema","request","reminders","queryParams","groupId","find","resourceNotFoundResponse","where","all","data","models","map","reminder","getAttributes","delete","id","params","destroy","message","concat","post","attrs","JSON","parse","requestBody","create","apiUrl","process","path","Error","slice","resourceName","Response"],"sourceRoot":""}