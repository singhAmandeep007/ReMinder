{"version":3,"file":"static/js/494.747ccb5a.chunk.js","mappings":"oSAQO,MAAMA,E,QAAsDC,GAAQC,OAAkB,CAC3FC,GAAGC,GACK,eAANC,OAAsBD,GAExBE,MAAMF,GACE,YAANC,OAAmBD,GAErBG,SAASH,GACHA,EAAI,IAAM,EAKhBI,MAAO,SACPC,UAASA,KACA,IAAIC,MAAOC,cAEpBC,UAASA,KACA,IAAIF,MAAOC,e,qDCpBf,MAAME,E,QAAmCZ,GAAQC,OAAuB,CAC7EC,GAAGC,GACK,qBAANC,OAA4BD,GAE9BU,KAAKV,GACG,kBAANC,OAAyBD,GAE3BK,UAASA,KACA,IAAIC,MAAOC,cAEpBC,UAASA,KACA,IAAIF,MAAOC,e,uDCjBtB,MACA,GACEI,WAFmC,qBAAXC,QAA0BA,OAAOD,YAAcC,OAAOD,WAAWE,KAAKD,SCGhG,IAAIE,EACJ,MAAMC,EAAQ,IAAIC,WAAW,IACd,SAASC,IAEtB,IAAKH,IAEHA,EAAoC,qBAAXF,QAA0BA,OAAOE,iBAAmBF,OAAOE,gBAAgBD,KAAKD,SAEpGE,GACH,MAAM,IAAII,MAAM,4GAIpB,OAAOJ,EAAgBC,EACzB,CCXA,MAAMI,EAAY,GAElB,IAAK,IAAIC,EAAI,EAAGA,EAAI,MAAOA,EACzBD,EAAUE,MAAMD,EAAI,KAAOE,SAAS,IAAIC,MAAM,IAGzC,SAASC,EAAgBC,GAAiB,IAAZC,EAAMC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EAG5C,OAAOR,EAAUM,EAAIC,EAAS,IAAMP,EAAUM,EAAIC,EAAS,IAAMP,EAAUM,EAAIC,EAAS,IAAMP,EAAUM,EAAIC,EAAS,IAAM,IAAMP,EAAUM,EAAIC,EAAS,IAAMP,EAAUM,EAAIC,EAAS,IAAM,IAAMP,EAAUM,EAAIC,EAAS,IAAMP,EAAUM,EAAIC,EAAS,IAAM,IAAMP,EAAUM,EAAIC,EAAS,IAAMP,EAAUM,EAAIC,EAAS,IAAM,IAAMP,EAAUM,EAAIC,EAAS,KAAOP,EAAUM,EAAIC,EAAS,KAAOP,EAAUM,EAAIC,EAAS,KAAOP,EAAUM,EAAIC,EAAS,KAAOP,EAAUM,EAAIC,EAAS,KAAOP,EAAUM,EAAIC,EAAS,IAChf,CCYA,QAxBA,SAAYI,EAASC,EAAKL,GACxB,GAAIM,EAAOrB,aAAeoB,IAAQD,EAChC,OAAOE,EAAOrB,aAIhB,MAAMsB,GADNH,EAAUA,GAAW,CAAC,GACDI,SAAWJ,EAAQb,KAAOA,KAK/C,GAHAgB,EAAK,GAAe,GAAVA,EAAK,GAAY,GAC3BA,EAAK,GAAe,GAAVA,EAAK,GAAY,IAEvBF,EAAK,CACPL,EAASA,GAAU,EAEnB,IAAK,IAAIN,EAAI,EAAGA,EAAI,KAAMA,EACxBW,EAAIL,EAASN,GAAKa,EAAKb,GAGzB,OAAOW,CACT,CAEA,OAAOP,EAAgBS,EACzB,ECxBA,MAAME,EAGJC,WAAAA,GAAe,KAFfC,SAAG,EAGDC,KAAKD,IAAM,IAAIE,GACjB,CAGAC,KAAAA,GACE,IAAIC,EAAOC,IACX,KAAOJ,KAAKD,IAAIM,IAAIF,IAClBA,EAAOC,IAKT,OAFAJ,KAAKD,IAAIO,IAAIH,GAENA,CACT,CAGAI,GAAAA,CAAI9C,GACF,GAAIuC,KAAKD,IAAIM,IAAI5C,GACf,MAAM,IAAImB,MAAM,MAADjB,OAAOF,EAAE,4BAG1BuC,KAAKD,IAAIO,IAAI7C,EACf,CAGA+C,KAAAA,GACER,KAAKD,IAAIU,OACX,E,+KCtBK,MAAMnD,EAA4CoD,EAAAA,GAAMlD,OAAO,CAEpEmD,OAAOC,EAAAA,EAAAA,IAAU,iBAEjBC,aAAAA,GAGE,MAAM,QAAEC,KAAYC,GAAwBf,KAAagB,MAMzD,OAJIF,IACFC,EAAmBJ,MAASX,KAAaW,MAAMK,OAG1CD,CACT,G,qDCnBK,MAAM5C,E,QAAiDuC,GAAMlD,OAAO,CAAC,E,4ECDrE,SAASyD,IACdC,EAAAA,eAAeC,KAAKnB,MACpBoB,EAAAA,oBAAoBD,KAAKnB,KAC3B,C,oECFO,SAASkB,IACdlB,KAAKqB,KAAIC,EAAAA,EAAAA,WAAU,eAAe,CAACC,EAAQC,KACzC,IAAIC,EACJ,MAAMC,EAAcF,EAAQE,YAG5B,GAAIA,EAAa,CACf,GAAIA,EAAYZ,QAAS,CAEvB,GAAsB,OADAS,EAAOI,KAAK,gBAAiBD,EAAYZ,SAE7D,OAAOc,EAAAA,EAAAA,0BAAyB,kBAAoBF,EAAYZ,QAEpE,CACAW,EAAYF,EAAOM,MAAM,WAAYH,EACvC,MACED,EAAYF,EAAOO,IAAI,YAGzB,MAAO,CACLC,KAAMN,EAAUO,OAAOC,KAAK3E,GAAaA,EAASuD,kBACnD,IAIHb,KAAKkC,QAAOZ,EAAAA,EAAAA,WAAU,mBAAmB,CAACC,EAAQC,KAEhD,MAAM/D,EAAK+D,EAAQW,OAAO1E,GAEpBH,EAAWiE,EAAOI,KAAK,WAAYlE,GAIzC,OAFQ,OAARH,QAAQ,IAARA,GAAAA,EAAU8E,UAEO,OAAb9E,GACKsE,EAAAA,EAAAA,0BAAyB,YAAcnE,GAIzC,CAAE4E,QAAQ,oBAAD1E,OAAsBF,EAAE,aAAa,IAGvDuC,KAAKsC,MAAKhB,EAAAA,EAAAA,WAAU,eAAe,CAACC,EAAQC,KAC1C,MAAMR,EAAQuB,KAAKC,MAAMhB,EAAQiB,aAE3BC,EAAkC,CACtC7E,UAAU,EACVC,MAAO,SACPC,WAAW,IAAIC,MAAOC,cACtBC,WAAW,IAAIF,MAAOC,eAKxB,MAAO,CACL8D,KAHeR,EAAOoB,OAAO,WAAYC,OAAOC,OAAOH,EAAa1B,IAGrDA,MAChB,IAGHhB,KAAK8C,OAAMxB,EAAAA,EAAAA,WAAU,mBAAmB,CAACC,EAAQC,KAC/C,MAAM/D,EAAK+D,EAAQW,OAAO1E,GACpBuD,EAAQuB,KAAKC,MAAMhB,EAAQiB,aAE3BnF,EAAWiE,EAAOI,KAAK,WAAYlE,GAEzC,OAAiB,OAAbH,GACKsE,EAAAA,EAAAA,0BAAyB,YAAcnE,IAGhDH,EAASyF,OAAO/B,GAET,CACLe,KAAMzE,GACP,GAEL,C,yECzEO,SAAS8D,IACdpB,KAAKqB,KAAIC,EAAAA,EAAAA,WAAU,qBAAsBC,IAGhC,CACLQ,KAHqBR,EAAOO,IAAI,iBAAiBE,WAOrDhC,KAAKqB,KAAIC,EAAAA,EAAAA,WAAU,yBAAyB,CAACC,EAAQC,KACnD,MAAM/D,EAAK+D,EAAQW,OAAO1E,GAEpBU,EAAgBoD,EAAOI,KAAK,gBAAiBlE,GAEnD,OAAsB,OAAlBU,GACKyD,EAAAA,EAAAA,0BAAyB,kBAAoBnE,GAG/C,CACLsE,KAAM5D,EACP,IAGH6B,KAAKkC,QAAOZ,EAAAA,EAAAA,WAAU,yBAAyB,CAACC,EAAQC,KACtD,MAAM/D,EAAK+D,EAAQW,OAAO1E,GAEpBU,EAAgBoD,EAAOI,KAAK,gBAAiBlE,GAEnD,GAAsB,OAAlBU,EACF,OAAOyD,EAAAA,EAAAA,0BAAyB,kBAAoBnE,GAItD,MAAMgE,EAAYF,EAAOO,IAAI,YAAYkB,QAAQ1F,GAAaA,EAASwD,UAAYrD,IAMnF,OAJS,OAATgE,QAAS,IAATA,GAAAA,EAAWW,UAEE,OAAbjE,QAAa,IAAbA,GAAAA,EAAeiE,UAER,CACLC,QAAQ,0BAAD1E,OAA4BF,EAAE,aACtC,IAGHuC,KAAK8C,OAAMxB,EAAAA,EAAAA,WAAU,yBAAyB,CAACC,EAAQC,KACrD,MAAM/D,EAAK+D,EAAQW,OAAO1E,GACpBuD,EAAQuB,KAAKC,MAAMhB,EAAQiB,aAE3BtE,EAAgBoD,EAAOI,KAAK,gBAAiBlE,GAEnD,OAAsB,OAAlBU,GACKyD,EAAAA,EAAAA,0BAAyB,kBAAoBnE,IAGtDU,EAAc4E,OAAO/B,GAEd,CACLe,KAAM5D,GACP,IAGH6B,KAAKsC,MAAKhB,EAAAA,EAAAA,WAAU,qBAAqB,CAACC,EAAQC,KAChD,MAAMR,EAAQuB,KAAKC,MAAMhB,EAAQiB,aAE3BC,EAAuC,CAC3C3E,WAAW,IAAIC,MAAOC,cACtBC,WAAW,IAAIF,MAAOC,eAKxB,MAAO,CACL8D,KAHoBR,EAAOoB,OAAO,gBAAiBC,OAAOC,OAAOH,EAAa1B,IAI/E,GAEL,C,8FC/EA,MAAMiC,EAASC,+BAEF5B,EAAa6B,IACxB,GAAgB,MAAZA,EAAK,GACP,MAAM,IAAIvE,MAAM,4DAIlB,MAF4D,MAA9BqE,EAAOA,IAG7B,GAANtF,OAAUsF,GAAMtF,OAAGwF,EAAKlE,MAAM,IAE1B,GAANtB,OAAUsF,GAAMtF,OAAGwF,EAAI,EAGZvB,EAA4BwB,GACvC,IAAIC,EAAAA,GAAS,IAAK,CAAC,EAAG,CAAEhB,QAAQ,YAAD1E,OAAcyF,EAAY,gB,iBCbpD,SAASE,EAAeC,GAC7B,MAAMC,EAAU,CAEdC,cAAe,WAAqB,IAApB/F,EAAS2B,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GAE1B,OADAkE,EAAOG,WAAW,WAAYhG,GACvB8F,CACT,EAEAG,mBAAoBC,IAMb,IANc,eACnBC,EAAiB,CAAC,OAAQ,OAAQ,YAAW,kBAC7CC,EAAoB,IAIrBF,EAMC,OALAC,EAAeE,SAASC,IACtB,MAAMrD,EAAQ4C,EAAOZ,OAAO,gBAAiB,CAAEvE,KAAM4F,IACrDT,EAAOG,WAAW,WAAYI,EAAmB,CAAEnD,SAAQ,IAGtD6C,CAAO,GAGlB,OAAOA,CACT,C,oJCZO,SAASS,IAAgE,IAAtDC,EAA8B7E,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC1D,OAAO8E,EAAAA,EAAAA,IAAa,CAClBC,QAASF,EAAOE,UAAW,EAC3BC,aAAmB,OAANH,QAAM,IAANA,OAAM,EAANA,EAAQG,cAAe,cACpCrC,OAAM,EACNsC,UAAS,EACTC,iBAAkB,CAChBC,YAAa3E,EAAAA,iBAGf4E,KAAAA,CAAMlB,IACJD,EAAAA,EAAAA,gBAAeC,GAAQE,cAAc,IAAIE,mBAAmB,CAAEG,kBAAmB,IACnF,EAEAY,MAAAA,GACE1E,KAAK2E,OAAST,EAAOS,QAAU,IAE/B1D,EAAAA,aAAaE,KAAKnB,MAElBA,KAAK4E,aACP,GAEJ,C","sources":["services/mocker/mirage/factories/reminder.ts","services/mocker/mirage/factories/reminderGroup.ts","../node_modules/uuid/dist/esm-browser/native.js","../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/v4.js","services/mocker/mirage/identityManager.ts","services/mocker/mirage/models/reminder.ts","services/mocker/mirage/models/reminderGroup.ts","services/mocker/mirage/routes/index.ts","services/mocker/mirage/routes/reminder.ts","services/mocker/mirage/routes/reminderGroup.ts","services/mocker/mirage/routes/utils.ts","services/mocker/mirage/scenarios/index.ts","services/mocker/mirage/server.ts"],"sourcesContent":["import { Factory } from \"miragejs\";\n// eslint-disable-next-line import/no-unresolved\nimport { FactoryDefinition } from \"miragejs/-types\";\n\nimport { TReminder } from \"types\";\n\nimport { TAppModels } from \"../types\";\n\nexport const reminder: FactoryDefinition<TAppModels[\"reminder\"]> = Factory.extend<TReminder>({\n  id(n) {\n    return `reminder-id-${n}`;\n  },\n  title(n) {\n    return `Reminder ${n}`;\n  },\n  isPinned(n) {\n    if (n % 2 === 0) {\n      return true;\n    }\n    return false;\n  },\n  state: \"ACTIVE\",\n  createdAt() {\n    return new Date().toISOString();\n  },\n  updatedAt() {\n    return new Date().toISOString();\n  },\n});\n","import { Factory } from \"miragejs\";\n// eslint-disable-next-line import/no-unresolved\nimport { FactoryDefinition } from \"miragejs/-types\";\n\nimport { TReminderGroup } from \"types\";\n\nexport const reminderGroup: FactoryDefinition = Factory.extend<TReminderGroup>({\n  id(n) {\n    return `reminder-group-id-${n}`;\n  },\n  name(n) {\n    return `Reminder Group ${n}`;\n  },\n  createdAt() {\n    return new Date().toISOString();\n  },\n  updatedAt() {\n    return new Date().toISOString();\n  },\n});\n","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;","import { v4 as uuidv4 } from \"uuid\";\n\nclass IdentityManager {\n  ids: Set<string>;\n\n  constructor() {\n    this.ids = new Set<string>();\n  }\n\n  // Returns a new unused unique identifier.\n  fetch() {\n    let uuid = uuidv4();\n    while (this.ids.has(uuid)) {\n      uuid = uuidv4();\n    }\n\n    this.ids.add(uuid);\n\n    return uuid;\n  }\n\n  // Registers an identifier as used. Must throw if identifier is already used.\n  set(id: string) {\n    if (this.ids.has(id)) {\n      throw new Error(`ID ${id} has already been used.`);\n    }\n\n    this.ids.add(id);\n  }\n\n  // Resets all used identifiers to unused.\n  reset() {\n    this.ids.clear();\n  }\n}\n\nexport { IdentityManager };\n","// eslint-disable-next-line import/no-unresolved\nimport { BelongsTo, ModelDefinition } from \"miragejs/-types\";\nimport { Model, belongsTo } from \"miragejs\";\n\nimport { TReminder } from \"types\";\n\ntype TModelReminder = {\n  group: BelongsTo<\"reminderGroup\">;\n  getAttributes: () => TReminder;\n};\n\nexport const reminder: ModelDefinition<TModelReminder> = Model.extend({\n  // NOTE: the association's name is group and it is associated with model named reminderGroup.\n  group: belongsTo(\"reminderGroup\"),\n\n  getAttributes() {\n    // NOTE: this.attrs is the object that contains the attributes of the model.\n    // NOTE: this.fks is array of foreign keys of the model.\n    const { groupId, ...reminderAttributes } = (this as any).attrs;\n    // NOTE: populate the group attribute if the reminder is associated with a group.\n    if (groupId) {\n      reminderAttributes.group = (this as any).group.attrs;\n    }\n\n    return reminderAttributes as TReminder;\n  },\n});\n","// eslint-disable-next-line import/no-unresolved\nimport { ModelDefinition } from \"miragejs/-types\";\nimport { Model } from \"miragejs\";\n\nimport { TReminderGroup } from \"types\";\n\nexport const reminderGroup: ModelDefinition<TReminderGroup> = Model.extend({});\n","import { TAppMockServer } from \"../types\";\n\nimport { reminderRoutes } from \"./reminder\";\nimport { reminderGroupRoutes } from \"./reminderGroup\";\n\nexport function createRoutes(this: TAppMockServer) {\n  reminderRoutes.call(this);\n  reminderGroupRoutes.call(this);\n}\n","import { TReminder } from \"types\";\n\nimport { TAppMockServer } from \"../types\";\n\nimport { urlPrefix, resourceNotFoundResponse } from \"./utils\";\n\nexport function reminderRoutes(this: TAppMockServer) {\n  this.get(urlPrefix(\"/reminders\"), (schema, request) => {\n    let reminders; // Collection<Instantiate<TAppRegistry, \"reminder\">>;\n    const queryParams = request.queryParams;\n    // queryParams = { groupId: \"group-id-1\" }\n\n    if (queryParams) {\n      if (queryParams.groupId) {\n        const reminderGroup = schema.find(\"reminderGroup\", queryParams.groupId as string);\n        if (reminderGroup === null) {\n          return resourceNotFoundResponse(\"Reminder group \" + queryParams.groupId);\n        }\n      }\n      reminders = schema.where(\"reminder\", queryParams);\n    } else {\n      reminders = schema.all(\"reminder\");\n    }\n\n    return {\n      data: reminders.models.map((reminder) => reminder.getAttributes()),\n    };\n  });\n\n  // NOTE: :segmentName to define a dynamic segment in the URL for a route handler\n  this.delete(urlPrefix(\"/reminders/:id\"), (schema, request) => {\n    // NOTE: Access dynamic segments via request.params.segmentName\n    const id = request.params.id;\n\n    const reminder = schema.find(\"reminder\", id);\n\n    reminder?.destroy();\n\n    if (reminder === null) {\n      return resourceNotFoundResponse(\"Reminder \" + id);\n    }\n\n    // NOTE: use Response class to return a custom response\n    return { message: `Reminder with id ${id} deleted!` };\n  });\n\n  this.post(urlPrefix(\"/reminders\"), (schema, request) => {\n    const attrs = JSON.parse(request.requestBody);\n\n    const defaultAttr: Partial<TReminder> = {\n      isPinned: false,\n      state: \"ACTIVE\",\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    };\n\n    const reminder = schema.create(\"reminder\", Object.assign(defaultAttr, attrs));\n\n    return {\n      data: reminder.attrs,\n    };\n  });\n\n  this.patch(urlPrefix(\"/reminders/:id\"), (schema, request) => {\n    const id = request.params.id;\n    const attrs = JSON.parse(request.requestBody);\n\n    const reminder = schema.find(\"reminder\", id);\n\n    if (reminder === null) {\n      return resourceNotFoundResponse(\"Reminder \" + id);\n    }\n\n    reminder.update(attrs);\n\n    return {\n      data: reminder,\n    };\n  });\n}\n","import { TReminderGroup } from \"types\";\n\nimport { TAppMockServer } from \"../types\";\n\nimport { urlPrefix, resourceNotFoundResponse } from \"./utils\";\n\nexport function reminderGroupRoutes(this: TAppMockServer) {\n  this.get(urlPrefix(\"/reminder-groups\"), (schema) => {\n    const reminderGroups = schema.all(\"reminderGroup\").models;\n\n    return {\n      data: reminderGroups,\n    };\n  });\n\n  this.get(urlPrefix(\"/reminder-groups/:id\"), (schema, request) => {\n    const id = request.params.id;\n\n    const reminderGroup = schema.find(\"reminderGroup\", id);\n\n    if (reminderGroup === null) {\n      return resourceNotFoundResponse(\"Reminder group \" + id);\n    }\n\n    return {\n      data: reminderGroup,\n    };\n  });\n\n  this.delete(urlPrefix(\"/reminder-groups/:id\"), (schema, request) => {\n    const id = request.params.id;\n\n    const reminderGroup = schema.find(\"reminderGroup\", id);\n\n    if (reminderGroup === null) {\n      return resourceNotFoundResponse(\"Reminder group \" + id);\n    }\n\n    // @ts-expect-error\n    const reminders = schema.all(\"reminder\").filter((reminder) => reminder.groupId === id);\n\n    reminders?.destroy();\n\n    reminderGroup?.destroy();\n\n    return {\n      message: `Reminder group with id ${id} deleted!`,\n    };\n  });\n\n  this.patch(urlPrefix(\"/reminder-groups/:id\"), (schema, request) => {\n    const id = request.params.id;\n    const attrs = JSON.parse(request.requestBody);\n\n    const reminderGroup = schema.find(\"reminderGroup\", id);\n\n    if (reminderGroup === null) {\n      return resourceNotFoundResponse(\"Reminder group \" + id);\n    }\n\n    reminderGroup.update(attrs);\n\n    return {\n      data: reminderGroup,\n    };\n  });\n\n  this.post(urlPrefix(\"/reminder-groups\"), (schema, request) => {\n    const attrs = JSON.parse(request.requestBody);\n\n    const defaultAttr: Partial<TReminderGroup> = {\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    };\n\n    const reminderGroup = schema.create(\"reminderGroup\", Object.assign(defaultAttr, attrs));\n\n    return {\n      data: reminderGroup,\n    };\n  });\n}\n","import { Response } from \"miragejs\";\n\nconst apiUrl = process.env.REACT_APP_API_URL;\n\nexport const urlPrefix = (path: string) => {\n  if (path[0] !== \"/\") {\n    throw new Error(\"Miragejs handler path should start with a forward slash.\");\n  }\n  const isApiUrlEndsWithSlash = apiUrl[apiUrl.length - 1] === \"/\";\n\n  if (isApiUrlEndsWithSlash) {\n    return `${apiUrl}${path.slice(1)}`;\n  }\n  return `${apiUrl}${path}`;\n};\n\nexport const resourceNotFoundResponse = (resourceName?: string) =>\n  new Response(404, {}, { message: `Resource ${resourceName} not found!` });\n","import { TNonEmptyArray } from \"types\";\n\nimport { TAppMockServer } from \"../types\";\n\nexport function buildScenarios(server: TAppMockServer) {\n  const builder = {\n    // create reminders without any group\n    withReminders: (n: number = 10) => {\n      server.createList(\"reminder\", n);\n      return builder;\n    },\n    // create reminders with groups\n    withReminderGroups: ({\n      reminderGroups = [\"Work\", \"Home\", \"Personal\"],\n      remindersPerGroup = 10,\n    }: {\n      reminderGroups?: TNonEmptyArray<string>;\n      remindersPerGroup?: number;\n    }) => {\n      reminderGroups.forEach((groupName) => {\n        const group = server.create(\"reminderGroup\", { name: groupName });\n        server.createList(\"reminder\", remindersPerGroup, { group });\n      });\n\n      return builder;\n    },\n  };\n  return builder;\n}\n","import { createServer } from \"miragejs\";\n\nimport { createRoutes } from \"./routes\";\nimport * as models from \"./models\";\nimport * as factories from \"./factories\";\nimport { buildScenarios } from \"./scenarios\";\n\nimport { TAppMockServer } from \"./types\";\nimport { IdentityManager } from \"./identityManager\";\n\nexport type TRunMirageServerConfig = {\n  environment?: string;\n  logging?: boolean;\n  timing?: number;\n};\n\nexport function runServer(config: TRunMirageServerConfig = {}): TAppMockServer {\n  return createServer({\n    logging: config.logging || true,\n    environment: config?.environment || \"development\",\n    models,\n    factories,\n    identityManagers: {\n      application: IdentityManager,\n    },\n    // mirage's seeds are loaded on initialization\n    seeds(server) {\n      buildScenarios(server).withReminders(30).withReminderGroups({ remindersPerGroup: 10 });\n    },\n\n    routes() {\n      this.timing = config.timing || 100;\n\n      createRoutes.call(this);\n\n      this.passthrough();\n    },\n  });\n}\n"],"names":["reminder","Factory","extend","id","n","concat","title","isPinned","state","createdAt","Date","toISOString","updatedAt","reminderGroup","name","randomUUID","crypto","bind","getRandomValues","rnds8","Uint8Array","rng","Error","byteToHex","i","push","toString","slice","unsafeStringify","arr","offset","arguments","length","undefined","options","buf","native","rnds","random","IdentityManager","constructor","ids","this","Set","fetch","uuid","uuidv4","has","add","set","reset","clear","Model","group","belongsTo","getAttributes","groupId","reminderAttributes","attrs","createRoutes","reminderRoutes","call","reminderGroupRoutes","get","urlPrefix","schema","request","reminders","queryParams","find","resourceNotFoundResponse","where","all","data","models","map","delete","params","destroy","message","post","JSON","parse","requestBody","defaultAttr","create","Object","assign","patch","update","filter","apiUrl","process","path","resourceName","Response","buildScenarios","server","builder","withReminders","createList","withReminderGroups","_ref","reminderGroups","remindersPerGroup","forEach","groupName","runServer","config","createServer","logging","environment","factories","identityManagers","application","seeds","routes","timing","passthrough"],"sourceRoot":""}