{"version":3,"file":"static/js/940.23a41e6b.chunk.js","mappings":"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","sources":["services/mocker/msw/controllers/reminderGroup.ts","services/mocker/msw/db.ts","services/mocker/msw/utils.ts","types/Reminders.ts"],"sourcesContent":["import { HttpResponse, http } from \"msw\";\n\nimport {\n  TCreateReminderGroupRequestPayload,\n  TCreateReminderGroupResponsePayload,\n  TDeleteReminderGroupRequestPayload,\n  TDeleteReminderGroupResponsePayload,\n  TUpdateReminderGroupRequestPayload,\n  TUpdateReminderGroupResponsePayload,\n  TGetReminderGroupRequestPayload,\n  TGetReminderGroupResponsePayload,\n  TReminderGroup,\n  THTTPError,\n} from \"types\";\n\nimport { db } from \"../db\";\n\nimport { urlPrefix } from \"../utils\";\n\nexport const getReminderGroups = http.get(urlPrefix(\"/reminder-groups\"), () => {\n  return HttpResponse.json({ data: db.reminderGroup.getAll() }, { status: 200 });\n});\n\nexport const getReminderGroup = http.get<\n  { id: TGetReminderGroupRequestPayload },\n  never,\n  TGetReminderGroupResponsePayload | THTTPError\n>(urlPrefix(\"/reminder-groups/:id\"), ({ params }) => {\n  const reminderGroup = db.reminderGroup.findFirst({\n    where: {\n      id: {\n        equals: params.id,\n      },\n    },\n  });\n\n  if (!reminderGroup) {\n    return HttpResponse.json({ message: `Reminder Group with id ${params.id} not found!` }, { status: 404 });\n  }\n\n  return HttpResponse.json({ data: reminderGroup }, { status: 200 });\n});\n\nexport const createReminderGroup = http.post<\n  never,\n  TCreateReminderGroupRequestPayload,\n  TCreateReminderGroupResponsePayload | THTTPError\n>(urlPrefix(\"/reminder-groups\"), async ({ request }) => {\n  const requestBody = await request.json();\n\n  const reminderGroup = db.reminderGroup.create({\n    ...requestBody,\n  });\n\n  return HttpResponse.json({ data: reminderGroup }, { status: 201 });\n});\n\nexport const deleteReminderGroup = http.delete<\n  { id: TDeleteReminderGroupRequestPayload },\n  never,\n  TDeleteReminderGroupResponsePayload | THTTPError\n>(urlPrefix(\"/reminder-groups/:id\"), ({ params }) => {\n  const reminderGroup = db.reminderGroup.findFirst({\n    where: {\n      id: {\n        equals: params.id,\n      },\n    },\n  });\n\n  if (!reminderGroup) {\n    return HttpResponse.json({ message: `Reminder Group with id ${params.id} not found!` }, { status: 404 });\n  }\n\n  db.reminderGroup.delete({\n    where: {\n      id: {\n        equals: params.id,\n      },\n    },\n  });\n\n  return HttpResponse.json({ message: `Reminder Group with id ${params.id} deleted!` }, { status: 200 });\n});\n\nexport const updateReminderGroup = http.patch<\n  { id: TUpdateReminderGroupRequestPayload[\"id\"] },\n  TUpdateReminderGroupRequestPayload,\n  TUpdateReminderGroupResponsePayload | THTTPError\n>(urlPrefix(\"/reminder-groups/:id\"), async ({ request, params }) => {\n  const requestBody = await request.json();\n\n  const reminderGroup = db.reminderGroup.findFirst({\n    where: {\n      id: {\n        equals: params.id,\n      },\n    },\n  });\n\n  if (!reminderGroup) {\n    return HttpResponse.json({ message: `Reminder Group with id ${params.id} not found!` }, { status: 404 });\n  }\n\n  const updatedReminder = db.reminderGroup.update({\n    where: {\n      id: {\n        equals: params.id,\n      },\n    },\n    data: {\n      ...requestBody,\n    },\n  }) as TReminderGroup;\n\n  return HttpResponse.json({ data: updatedReminder }, { status: 200 });\n});\n","import { factory, nullable, oneOf, primaryKey } from \"@mswjs/data\";\n\nimport { uuid } from \"shared\";\n\nimport { REMINDER_STATE } from \"types\";\n\nexport const db = factory({\n  reminder: {\n    id: primaryKey(uuid),\n    title: () => {\n      return `Reminder ${uuid({ simple: true })}`;\n    },\n\n    isPinned: () => false,\n    state: () => REMINDER_STATE.INACTIVE,\n    group: oneOf(\"reminderGroup\"),\n    createdAt: () => new Date().toISOString(),\n    updatedAt: () => new Date().toISOString(),\n    dueDate: nullable(String),\n  },\n\n  reminderGroup: {\n    id: primaryKey(uuid),\n    name: () => `Reminder Group ${uuid({ simple: true })}`,\n    createdAt: () => new Date().toISOString(),\n    updatedAt: () => new Date().toISOString(),\n  },\n});\n\nexport type TDb = typeof db;\n\nexport const buildScenarios = (db: TDb) => {\n  const builder = {\n    withReminders: (n: number = 10) => {\n      for (let i = 0; i < n; i++) {\n        db.reminder.create();\n      }\n\n      return builder;\n    },\n    withReminderGroups: ({\n      reminderGroups = [\"Work\", \"Home\", \"Personal\"],\n      remindersPerGroup = 10,\n    }: {\n      reminderGroups?: string[];\n      remindersPerGroup?: number;\n    }) => {\n      reminderGroups.forEach((groupName) => {\n        const group = db.reminderGroup.create({ name: groupName });\n\n        for (let i = 0; i < remindersPerGroup; i++) {\n          db.reminder.create({ group });\n        }\n      });\n\n      return builder;\n    },\n  };\n  return builder;\n};\n","const apiUrl = process.env.REACT_APP_API_URL;\n\nexport const urlPrefix = (path: string) => {\n  if (path[0] !== \"/\") {\n    throw new Error(\"MSW handler path should start with a forward slash.\");\n  }\n  const isApiUrlEndsWithSlash = apiUrl[apiUrl.length - 1] === \"/\";\n\n  if (isApiUrlEndsWithSlash) {\n    return `${apiUrl}${path.slice(1)}`;\n  }\n  return `${apiUrl}${path}`;\n};\n","export const REMINDER_STATE = {\n  INACTIVE: \"INACTIVE\",\n  INPROGRESS: \"INPROGRESS\",\n  COMPLETED: \"COMPLETED\",\n  ARCHIVED: \"ARCHIVED\",\n} as const;\n\nexport type TReminderState = (typeof REMINDER_STATE)[keyof typeof REMINDER_STATE];\n\nexport type TReminder = {\n  id: string;\n  title: string;\n  /**\n   * Current state of the reminder.\n   *\n   * @example \"IN_ACTIVE\" | \"IN_PROGRESS\" | \"COMPLETED\"\n   */\n  state: TReminderState;\n  /**\n   * Indicates if the reminder is pinned on top.\n   */\n  isPinned: boolean;\n  /**\n   * Date and time the reminder was created. (ISO 8601 format)\n   */\n  createdAt: string;\n  /**\n   * Date and time the reminder was last updated. (ISO 8601 format)\n   */\n  updatedAt: string;\n  /**\n   * Optional reminder group this reminder belongs to.\n   */\n  group?: TReminderGroup;\n  /**\n   * Optional due date and time for the reminder. (ISO 8601 format)\n   *\n   * @example \"2021-09-30T00:00:00.000Z\"\n   */\n  dueDate?: string | null;\n};\n\nexport type TReminderGroup = {\n  id: string;\n  name: string;\n  createdAt: string;\n  updatedAt: string;\n};\n\nexport type TMessageResponsePaylaod = {\n  message: string;\n};\n\nexport type TDataResponsePayload<T> = {\n  data: T;\n};\n\n/**\n * Error\n */\nexport type THTTPError = {\n  message: string;\n};\n\n/**\n * Reminder\n */\nexport type TGetRemindersQueryParams = Partial<{\n  groupId: TReminderGroup[\"id\"];\n  state: TReminder[\"state\"];\n}>;\n\nexport type TGetRemindersResponsePayload = TDataResponsePayload<TReminder[]>;\n\nexport type TGetReminderRequestPayload = TReminder[\"id\"];\n\nexport type TGetReminderResponsePayload = TDataResponsePayload<TReminder>;\n\nexport type TCreateReminderRequestPayload = Pick<TReminder, \"title\"> & Partial<{ groupId: TReminderGroup[\"id\"] }>;\n\nexport type TCreateReminderResponsePayload = TDataResponsePayload<TReminder>;\n\nexport type TUpdateReminderRequestPayload = Pick<TReminder, \"id\"> &\n  Partial<Pick<TReminder, \"title\" | \"state\" | \"isPinned\" | \"dueDate\"> & { groupId: TReminderGroup[\"id\"] }>;\n\nexport type TUpdateReminderResponsePayload = TDataResponsePayload<TReminder>;\n\nexport type TDeleteReminderRequestPayload = TReminder[\"id\"];\n\nexport type TDeleteReminderResponsePayload = TMessageResponsePaylaod;\n\n/**\n * Reminder Group\n */\nexport type TGetReminderGroupsResponsePayload = TDataResponsePayload<TReminderGroup[]>;\n\nexport type TGetReminderGroupRequestPayload = TReminderGroup[\"id\"];\n\nexport type TGetReminderGroupResponsePayload = TDataResponsePayload<TReminderGroup>;\n\nexport type TCreateReminderGroupRequestPayload = Pick<TReminderGroup, \"name\">;\n\nexport type TCreateReminderGroupResponsePayload = TDataResponsePayload<TReminderGroup>;\n\nexport type TUpdateReminderGroupRequestPayload = Pick<TReminderGroup, \"id\"> & Partial<Pick<TReminderGroup, \"name\">>;\n\nexport type TUpdateReminderGroupResponsePayload = TDataResponsePayload<TReminderGroup>;\n\nexport type TDeleteReminderGroupRequestPayload = TReminderGroup[\"id\"];\n\nexport type TDeleteReminderGroupResponsePayload = TMessageResponsePaylaod;\n"],"names":["getReminderGroups","http","get","urlPrefix","HttpResponse","json","data","db","reminderGroup","getAll","status","getReminderGroup","_ref","params","findFirst","where","id","equals","message","concat","createReminderGroup","post","async","request","_ref2","requestBody","create","deleteReminderGroup","delete","_ref3","updateReminderGroup","patch","_ref4","updatedReminder","update","factory","reminder","primaryKey","uuid","title","simple","isPinned","state","REMINDER_STATE","INACTIVE","group","oneOf","createdAt","Date","toISOString","updatedAt","dueDate","nullable","String","name","buildScenarios","builder","withReminders","n","arguments","length","undefined","i","withReminderGroups","reminderGroups","remindersPerGroup","forEach","groupName","apiUrl","process","path","Error","slice","INPROGRESS","COMPLETED","ARCHIVED"],"sourceRoot":""}